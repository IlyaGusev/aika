<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="2134" onload="init(evt)" viewBox="0 0 1200 2134" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="2134.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="2117" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="2117" > </text>
<g id="frames">
<g >
<title>TTranspositionTable::TPositionEqualFn::operator (2 samples, 0.01%)</title><rect x="264.6" y="1797" width="0.1" height="15.0" fill="rgb(207,91,41)" rx="2" ry="2" />
<text  x="267.56" y="1807.5" ></text>
</g>
<g >
<title>[unknown] (100 samples, 0.63%)</title><rect x="963.0" y="149" width="7.4" height="15.0" fill="rgb(207,54,16)" rx="2" ry="2" />
<text  x="965.97" y="159.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (4 samples, 0.03%)</title><rect x="267.7" y="1797" width="0.3" height="15.0" fill="rgb(217,178,21)" rx="2" ry="2" />
<text  x="270.70" y="1807.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (2 samples, 0.01%)</title><rect x="168.2" y="1829" width="0.2" height="15.0" fill="rgb(219,180,0)" rx="2" ry="2" />
<text  x="171.24" y="1839.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (2 samples, 0.01%)</title><rect x="727.8" y="1829" width="0.2" height="15.0" fill="rgb(233,67,13)" rx="2" ry="2" />
<text  x="730.80" y="1839.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (2 samples, 0.01%)</title><rect x="49.9" y="1829" width="0.2" height="15.0" fill="rgb(242,17,26)" rx="2" ry="2" />
<text  x="52.92" y="1839.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetRookAttacks (13 samples, 0.08%)</title><rect x="624.8" y="1765" width="0.9" height="15.0" fill="rgb(225,77,13)" rx="2" ry="2" />
<text  x="627.77" y="1775.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::back (7 samples, 0.04%)</title><rect x="876.9" y="1797" width="0.6" height="15.0" fill="rgb(225,212,8)" rx="2" ry="2" />
<text  x="879.94" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateKingAttackInfo (2 samples, 0.01%)</title><rect x="527.8" y="1733" width="0.1" height="15.0" fill="rgb(232,108,12)" rx="2" ry="2" />
<text  x="530.78" y="1743.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (76 samples, 0.48%)</title><rect x="270.7" y="1861" width="5.7" height="15.0" fill="rgb(247,66,22)" rx="2" ry="2" />
<text  x="273.68" y="1871.5" ></text>
</g>
<g >
<title>boost::unordered::unordered_map&lt;lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt; &gt;::find (3 samples, 0.02%)</title><rect x="256.7" y="1797" width="0.2" height="15.0" fill="rgb(246,144,24)" rx="2" ry="2" />
<text  x="259.65" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::Hash (4 samples, 0.03%)</title><rect x="171.8" y="1749" width="0.3" height="15.0" fill="rgb(236,165,3)" rx="2" ry="2" />
<text  x="174.82" y="1759.5" ></text>
</g>
<g >
<title>GetPieceType (8 samples, 0.05%)</title><rect x="487.3" y="1765" width="0.6" height="15.0" fill="rgb(232,102,12)" rx="2" ry="2" />
<text  x="490.27" y="1775.5" ></text>
</g>
<g >
<title>[unknown] (188 samples, 1.19%)</title><rect x="963.0" y="1077" width="14.0" height="15.0" fill="rgb(239,13,42)" rx="2" ry="2" />
<text  x="965.97" y="1087.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (3 samples, 0.02%)</title><rect x="727.0" y="1829" width="0.2" height="15.0" fill="rgb(205,46,36)" rx="2" ry="2" />
<text  x="729.98" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (3 samples, 0.02%)</title><rect x="247.3" y="1765" width="0.2" height="15.0" fill="rgb(239,125,28)" rx="2" ry="2" />
<text  x="250.25" y="1775.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ApplyMove (8 samples, 0.05%)</title><rect x="287.8" y="1877" width="0.6" height="15.0" fill="rgb(230,23,1)" rx="2" ry="2" />
<text  x="290.84" y="1887.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::~vector (2 samples, 0.01%)</title><rect x="708.0" y="1813" width="0.1" height="15.0" fill="rgb(244,180,20)" rx="2" ry="2" />
<text  x="710.96" y="1823.5" ></text>
</g>
<g >
<title>CalcPSTScore (35 samples, 0.22%)</title><rect x="486.1" y="1781" width="2.7" height="15.0" fill="rgb(250,115,25)" rx="2" ry="2" />
<text  x="489.15" y="1791.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_get_insert_equal_pos (4 samples, 0.03%)</title><rect x="289.1" y="1877" width="0.3" height="15.0" fill="rgb(244,26,52)" rx="2" ry="2" />
<text  x="292.11" y="1887.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetBishopAttacks (2 samples, 0.01%)</title><rect x="556.6" y="1765" width="0.1" height="15.0" fill="rgb(208,224,36)" rx="2" ry="2" />
<text  x="559.58" y="1775.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::Mirror (2 samples, 0.01%)</title><rect x="513.8" y="1637" width="0.2" height="15.0" fill="rgb(218,117,0)" rx="2" ry="2" />
<text  x="516.83" y="1647.5" ></text>
</g>
<g >
<title>[unknown] (222 samples, 1.40%)</title><rect x="963.0" y="1493" width="16.5" height="15.0" fill="rgb(208,144,32)" rx="2" ry="2" />
<text  x="965.97" y="1503.5" ></text>
</g>
<g >
<title>[unknown] (237 samples, 1.50%)</title><rect x="963.0" y="1701" width="17.6" height="15.0" fill="rgb(232,179,9)" rx="2" ry="2" />
<text  x="965.97" y="1711.5" ></text>
</g>
<g >
<title>std::array&lt;int, 64ul&gt;::operator[] (10 samples, 0.06%)</title><rect x="866.2" y="1829" width="0.7" height="15.0" fill="rgb(234,183,6)" rx="2" ry="2" />
<text  x="869.20" y="1839.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare&gt; (2 samples, 0.01%)</title><rect x="877.5" y="1813" width="0.1" height="15.0" fill="rgb(252,220,48)" rx="2" ry="2" />
<text  x="880.47" y="1823.5" ></text>
</g>
<g >
<title>std::array&lt;int, 64ul&gt;::operator[] (2 samples, 0.01%)</title><rect x="241.4" y="1845" width="0.1" height="15.0" fill="rgb(241,132,18)" rx="2" ry="2" />
<text  x="244.36" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (9 samples, 0.06%)</title><rect x="480.2" y="1765" width="0.7" height="15.0" fill="rgb(223,201,30)" rx="2" ry="2" />
<text  x="483.18" y="1775.5" ></text>
</g>
<g >
<title>[unknown] (108 samples, 0.68%)</title><rect x="963.0" y="245" width="8.0" height="15.0" fill="rgb(232,151,15)" rx="2" ry="2" />
<text  x="965.97" y="255.5" ></text>
</g>
<g >
<title>__asan_region_is_poisoned (5 samples, 0.03%)</title><rect x="279.0" y="1813" width="0.3" height="15.0" fill="rgb(229,182,5)" rx="2" ry="2" />
<text  x="281.96" y="1823.5" ></text>
</g>
<g >
<title>TTranspositionTable::Insert (25 samples, 0.16%)</title><rect x="170.6" y="1861" width="1.8" height="15.0" fill="rgb(226,181,22)" rx="2" ry="2" />
<text  x="173.56" y="1871.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (2 samples, 0.01%)</title><rect x="308.1" y="1813" width="0.2" height="15.0" fill="rgb(229,135,31)" rx="2" ry="2" />
<text  x="311.13" y="1823.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetRookAttacks (5 samples, 0.03%)</title><rect x="874.8" y="1813" width="0.4" height="15.0" fill="rgb(249,90,29)" rx="2" ry="2" />
<text  x="877.78" y="1823.5" ></text>
</g>
<g >
<title>[unknown] (228 samples, 1.44%)</title><rect x="963.0" y="1573" width="17.0" height="15.0" fill="rgb(250,211,34)" rx="2" ry="2" />
<text  x="965.97" y="1583.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.01%)</title><rect x="971.4" y="325" width="0.1" height="15.0" fill="rgb(230,82,54)" rx="2" ry="2" />
<text  x="974.40" y="335.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (27 samples, 0.17%)</title><rect x="816.2" y="1797" width="2.0" height="15.0" fill="rgb(208,8,44)" rx="2" ry="2" />
<text  x="819.21" y="1807.5" ></text>
</g>
<g >
<title>lczero::BitBoard::get (6 samples, 0.04%)</title><rect x="246.1" y="1829" width="0.4" height="15.0" fill="rgb(220,147,5)" rx="2" ry="2" />
<text  x="249.06" y="1839.5" ></text>
</g>
<g >
<title>lczero::BitBoard::get (3 samples, 0.02%)</title><rect x="255.3" y="1813" width="0.2" height="15.0" fill="rgb(244,186,29)" rx="2" ry="2" />
<text  x="258.31" y="1823.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (7 samples, 0.04%)</title><rect x="463.7" y="1765" width="0.5" height="15.0" fill="rgb(228,106,5)" rx="2" ry="2" />
<text  x="466.69" y="1775.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (2 samples, 0.01%)</title><rect x="290.2" y="1909" width="0.1" height="15.0" fill="rgb(233,76,48)" rx="2" ry="2" />
<text  x="293.15" y="1919.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::back (18 samples, 0.11%)</title><rect x="787.3" y="1797" width="1.4" height="15.0" fill="rgb(211,191,9)" rx="2" ry="2" />
<text  x="790.34" y="1807.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_get_insert_equal_pos (8 samples, 0.05%)</title><rect x="947.3" y="1861" width="0.6" height="15.0" fill="rgb(216,164,43)" rx="2" ry="2" />
<text  x="950.30" y="1871.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (4 samples, 0.03%)</title><rect x="359.1" y="1749" width="0.3" height="15.0" fill="rgb(216,167,1)" rx="2" ry="2" />
<text  x="362.09" y="1759.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (11 samples, 0.07%)</title><rect x="306.2" y="1813" width="0.8" height="15.0" fill="rgb(217,5,2)" rx="2" ry="2" />
<text  x="309.19" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ChessBoard (2 samples, 0.01%)</title><rect x="147.1" y="1813" width="0.2" height="15.0" fill="rgb(221,52,36)" rx="2" ry="2" />
<text  x="150.13" y="1823.5" ></text>
</g>
<g >
<title>__pthread_getspecific (3 samples, 0.02%)</title><rect x="912.5" y="1797" width="0.2" height="15.0" fill="rgb(239,33,46)" rx="2" ry="2" />
<text  x="915.46" y="1807.5" ></text>
</g>
<g >
<title>[unknown] (167 samples, 1.06%)</title><rect x="963.0" y="949" width="12.4" height="15.0" fill="rgb(241,12,39)" rx="2" ry="2" />
<text  x="965.97" y="959.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::Mirror (2 samples, 0.01%)</title><rect x="482.3" y="1765" width="0.1" height="15.0" fill="rgb(239,159,13)" rx="2" ry="2" />
<text  x="485.27" y="1775.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::next_for_find (2 samples, 0.01%)</title><rect x="350.9" y="1781" width="0.1" height="15.0" fill="rgb(212,95,31)" rx="2" ry="2" />
<text  x="353.88" y="1791.5" ></text>
</g>
<g >
<title>TTranspositionTable::Insert (11 samples, 0.07%)</title><rect x="917.5" y="1861" width="0.9" height="15.0" fill="rgb(253,171,20)" rx="2" ry="2" />
<text  x="920.53" y="1871.5" ></text>
</g>
<g >
<title>lczero::Position::Position (11 samples, 0.07%)</title><rect x="308.0" y="1829" width="0.8" height="15.0" fill="rgb(206,93,49)" rx="2" ry="2" />
<text  x="310.98" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (2 samples, 0.01%)</title><rect x="65.7" y="1765" width="0.2" height="15.0" fill="rgb(249,166,11)" rx="2" ry="2" />
<text  x="68.73" y="1775.5" ></text>
</g>
<g >
<title>__asan::Allocator::QuarantineChunk (3 samples, 0.02%)</title><rect x="727.4" y="1829" width="0.2" height="15.0" fill="rgb(230,154,11)" rx="2" ry="2" />
<text  x="730.36" y="1839.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (9 samples, 0.06%)</title><rect x="506.0" y="1733" width="0.7" height="15.0" fill="rgb(248,115,21)" rx="2" ry="2" />
<text  x="508.99" y="1743.5" ></text>
</g>
<g >
<title>__sanitizer::StackDepotPut (2 samples, 0.01%)</title><rect x="948.4" y="1829" width="0.2" height="15.0" fill="rgb(241,225,2)" rx="2" ry="2" />
<text  x="951.42" y="1839.5" ></text>
</g>
<g >
<title>CalcPSTScore (18 samples, 0.11%)</title><rect x="253.1" y="1845" width="1.4" height="15.0" fill="rgb(220,54,13)" rx="2" ry="2" />
<text  x="256.15" y="1855.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_emplace_equal&lt;int&amp;, TSearchNode&gt; (15 samples, 0.09%)</title><rect x="705.0" y="1813" width="1.1" height="15.0" fill="rgb(223,17,36)" rx="2" ry="2" />
<text  x="707.97" y="1823.5" ></text>
</g>
<g >
<title>std::array&lt;int, 64ul&gt;::operator[] (51 samples, 0.32%)</title><rect x="459.2" y="1797" width="3.8" height="15.0" fill="rgb(226,28,5)" rx="2" ry="2" />
<text  x="462.21" y="1807.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.01%)</title><rect x="217.6" y="1813" width="0.2" height="15.0" fill="rgb(234,44,42)" rx="2" ry="2" />
<text  x="220.63" y="1823.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.01%)</title><rect x="978.2" y="1285" width="0.1" height="15.0" fill="rgb(225,191,6)" rx="2" ry="2" />
<text  x="981.19" y="1295.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_create_node&lt;int&amp;, TSearchNode&gt; (4 samples, 0.03%)</title><rect x="147.4" y="1813" width="0.3" height="15.0" fill="rgb(248,128,36)" rx="2" ry="2" />
<text  x="150.35" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::knights (3 samples, 0.02%)</title><rect x="41.5" y="1829" width="0.2" height="15.0" fill="rgb(231,29,36)" rx="2" ry="2" />
<text  x="44.48" y="1839.5" ></text>
</g>
<g >
<title>lczero::Position::Position (4 samples, 0.03%)</title><rect x="500.4" y="1733" width="0.3" height="15.0" fill="rgb(205,34,41)" rx="2" ry="2" />
<text  x="503.40" y="1743.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::back (3 samples, 0.02%)</title><rect x="361.9" y="1765" width="0.2" height="15.0" fill="rgb(244,131,2)" rx="2" ry="2" />
<text  x="364.93" y="1775.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (9 samples, 0.06%)</title><rect x="489.7" y="1749" width="0.6" height="15.0" fill="rgb(234,43,43)" rx="2" ry="2" />
<text  x="492.65" y="1759.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (2 samples, 0.01%)</title><rect x="101.5" y="1781" width="0.2" height="15.0" fill="rgb(215,211,49)" rx="2" ry="2" />
<text  x="104.54" y="1791.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (8 samples, 0.05%)</title><rect x="227.2" y="1877" width="0.6" height="15.0" fill="rgb(240,119,46)" rx="2" ry="2" />
<text  x="230.18" y="1887.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (9 samples, 0.06%)</title><rect x="502.6" y="1717" width="0.7" height="15.0" fill="rgb(247,37,22)" rx="2" ry="2" />
<text  x="505.64" y="1727.5" ></text>
</g>
<g >
<title>TSearchStrategy::Search (1,253 samples, 7.92%)</title><rect x="75.1" y="1861" width="93.5" height="15.0" fill="rgb(209,159,51)" rx="2" ry="2" />
<text  x="78.13" y="1871.5" >TSearchStra..</text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (2 samples, 0.01%)</title><rect x="549.6" y="1765" width="0.1" height="15.0" fill="rgb(239,133,4)" rx="2" ry="2" />
<text  x="552.56" y="1775.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (2 samples, 0.01%)</title><rect x="320.7" y="1797" width="0.1" height="15.0" fill="rgb(236,42,32)" rx="2" ry="2" />
<text  x="323.67" y="1807.5" ></text>
</g>
<g >
<title>TTranspositionTable::TPositionEqualFn::operator (5 samples, 0.03%)</title><rect x="58.6" y="1797" width="0.3" height="15.0" fill="rgb(249,142,13)" rx="2" ry="2" />
<text  x="61.57" y="1807.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (3 samples, 0.02%)</title><rect x="510.6" y="1685" width="0.2" height="15.0" fill="rgb(223,77,10)" rx="2" ry="2" />
<text  x="513.62" y="1695.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (6 samples, 0.04%)</title><rect x="517.3" y="1621" width="0.5" height="15.0" fill="rgb(228,166,51)" rx="2" ry="2" />
<text  x="520.33" y="1631.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.01%)</title><rect x="975.4" y="949" width="0.2" height="15.0" fill="rgb(217,190,24)" rx="2" ry="2" />
<text  x="978.43" y="959.5" ></text>
</g>
<g >
<title>__asan::PoisonShadow (52 samples, 0.33%)</title><rect x="959.1" y="2021" width="3.9" height="15.0" fill="rgb(240,120,26)" rx="2" ry="2" />
<text  x="962.09" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (219 samples, 1.38%)</title><rect x="963.0" y="1477" width="16.3" height="15.0" fill="rgb(250,58,16)" rx="2" ry="2" />
<text  x="965.97" y="1487.5" ></text>
</g>
<g >
<title>TSearchStrategy::Search (43 samples, 0.27%)</title><rect x="21.9" y="2037" width="3.2" height="15.0" fill="rgb(238,42,12)" rx="2" ry="2" />
<text  x="24.86" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (258 samples, 1.63%)</title><rect x="963.0" y="1861" width="19.2" height="15.0" fill="rgb(211,4,38)" rx="2" ry="2" />
<text  x="965.97" y="1871.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (12 samples, 0.08%)</title><rect x="522.0" y="1653" width="0.9" height="15.0" fill="rgb(211,65,18)" rx="2" ry="2" />
<text  x="525.03" y="1663.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;int const, TSearchNode&gt; &gt;::operator* (2 samples, 0.01%)</title><rect x="914.5" y="1845" width="0.2" height="15.0" fill="rgb(241,165,0)" rx="2" ry="2" />
<text  x="917.55" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::operator== (8 samples, 0.05%)</title><rect x="867.2" y="1781" width="0.6" height="15.0" fill="rgb(205,100,0)" rx="2" ry="2" />
<text  x="870.17" y="1791.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (4 samples, 0.03%)</title><rect x="286.6" y="1861" width="0.3" height="15.0" fill="rgb(251,136,4)" rx="2" ry="2" />
<text  x="289.57" y="1871.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::next_for_find (2 samples, 0.01%)</title><rect x="269.7" y="1813" width="0.2" height="15.0" fill="rgb(240,162,1)" rx="2" ry="2" />
<text  x="272.71" y="1823.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (4 samples, 0.03%)</title><rect x="116.6" y="1813" width="0.3" height="15.0" fill="rgb(207,205,33)" rx="2" ry="2" />
<text  x="119.61" y="1823.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_construct_node&lt;int&amp;, TSearchNode&gt; (78 samples, 0.49%)</title><rect x="896.9" y="1813" width="5.8" height="15.0" fill="rgb(210,99,17)" rx="2" ry="2" />
<text  x="899.87" y="1823.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (19 samples, 0.12%)</title><rect x="213.4" y="1845" width="1.4" height="15.0" fill="rgb(248,115,46)" rx="2" ry="2" />
<text  x="216.38" y="1855.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (8 samples, 0.05%)</title><rect x="323.3" y="1813" width="0.6" height="15.0" fill="rgb(236,1,29)" rx="2" ry="2" />
<text  x="326.28" y="1823.5" ></text>
</g>
<g >
<title>lczero::Position::Position (6 samples, 0.04%)</title><rect x="956.3" y="1893" width="0.4" height="15.0" fill="rgb(223,93,37)" rx="2" ry="2" />
<text  x="959.25" y="1903.5" ></text>
</g>
<g >
<title>std::array&lt;lczero::Move, 64ul&gt;::at (2 samples, 0.01%)</title><rect x="343.6" y="1813" width="0.2" height="15.0" fill="rgb(235,10,2)" rx="2" ry="2" />
<text  x="346.65" y="1823.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::Unwind (4 samples, 0.03%)</title><rect x="814.0" y="1781" width="0.3" height="15.0" fill="rgb(219,118,45)" rx="2" ry="2" />
<text  x="816.98" y="1791.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (18 samples, 0.11%)</title><rect x="251.4" y="1813" width="1.4" height="15.0" fill="rgb(222,195,2)" rx="2" ry="2" />
<text  x="254.43" y="1823.5" ></text>
</g>
<g >
<title>std::array&lt;int, 2ul&gt;::operator[] (2 samples, 0.01%)</title><rect x="237.6" y="1861" width="0.1" height="15.0" fill="rgb(232,180,12)" rx="2" ry="2" />
<text  x="240.55" y="1871.5" ></text>
</g>
<g >
<title>__sanitizer::Quarantine&lt;__asan::QuarantineCallback, __asan::AsanChunk&gt;::DoRecycle (2 samples, 0.01%)</title><rect x="980.3" y="1621" width="0.1" height="15.0" fill="rgb(244,163,53)" rx="2" ry="2" />
<text  x="983.28" y="1631.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (6 samples, 0.04%)</title><rect x="94.3" y="1781" width="0.5" height="15.0" fill="rgb(251,87,48)" rx="2" ry="2" />
<text  x="97.31" y="1791.5" ></text>
</g>
<g >
<title>TTranspositionTable::Find (17 samples, 0.11%)</title><rect x="31.9" y="1861" width="1.3" height="15.0" fill="rgb(215,29,14)" rx="2" ry="2" />
<text  x="34.93" y="1871.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (24 samples, 0.15%)</title><rect x="519.8" y="1701" width="1.8" height="15.0" fill="rgb(226,51,30)" rx="2" ry="2" />
<text  x="522.80" y="1711.5" ></text>
</g>
<g >
<title>TSearchStrategy::Search (2,773 samples, 17.53%)</title><rect x="25.7" y="1941" width="206.9" height="15.0" fill="rgb(237,125,45)" rx="2" ry="2" />
<text  x="28.74" y="1951.5" >TSearchStrategy::Search</text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (24 samples, 0.15%)</title><rect x="875.7" y="1813" width="1.8" height="15.0" fill="rgb(218,183,29)" rx="2" ry="2" />
<text  x="878.68" y="1823.5" ></text>
</g>
<g >
<title>boost::unordered::detail::func::construct_node_pair&lt;std::allocator&lt;boost::unordered::detail::ptr_node&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt; &gt;, lczero::Position const&amp;, TTranspositionTable::TNode&gt; (2 samples, 0.01%)</title><rect x="269.9" y="1829" width="0.1" height="15.0" fill="rgb(250,207,51)" rx="2" ry="2" />
<text  x="272.86" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (116 samples, 0.73%)</title><rect x="541.2" y="1781" width="8.7" height="15.0" fill="rgb(243,176,12)" rx="2" ry="2" />
<text  x="544.21" y="1791.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateKingAttackInfo (3 samples, 0.02%)</title><rect x="532.1" y="1749" width="0.2" height="15.0" fill="rgb(228,195,0)" rx="2" ry="2" />
<text  x="535.11" y="1759.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (2 samples, 0.01%)</title><rect x="27.8" y="1845" width="0.2" height="15.0" fill="rgb(226,37,44)" rx="2" ry="2" />
<text  x="30.83" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (108 samples, 0.68%)</title><rect x="66.5" y="1845" width="8.0" height="15.0" fill="rgb(228,195,21)" rx="2" ry="2" />
<text  x="69.48" y="1855.5" ></text>
</g>
<g >
<title>lczero::Position::Position (3 samples, 0.02%)</title><rect x="503.6" y="1717" width="0.2" height="15.0" fill="rgb(207,10,6)" rx="2" ry="2" />
<text  x="506.61" y="1727.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (11 samples, 0.07%)</title><rect x="464.6" y="1765" width="0.8" height="15.0" fill="rgb(211,93,14)" rx="2" ry="2" />
<text  x="467.59" y="1775.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (2 samples, 0.01%)</title><rect x="281.1" y="1813" width="0.1" height="15.0" fill="rgb(239,21,24)" rx="2" ry="2" />
<text  x="284.05" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (5 samples, 0.03%)</title><rect x="335.7" y="1765" width="0.4" height="15.0" fill="rgb(215,80,35)" rx="2" ry="2" />
<text  x="338.74" y="1775.5" ></text>
</g>
<g >
<title>boost::unordered::unordered_map&lt;lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt; &gt;::find (17 samples, 0.11%)</title><rect x="243.7" y="1829" width="1.2" height="15.0" fill="rgb(206,169,25)" rx="2" ry="2" />
<text  x="246.67" y="1839.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (2 samples, 0.01%)</title><rect x="127.9" y="1765" width="0.1" height="15.0" fill="rgb(228,70,37)" rx="2" ry="2" />
<text  x="130.88" y="1775.5" ></text>
</g>
<g >
<title>[unknown] (144 samples, 0.91%)</title><rect x="963.0" y="693" width="10.7" height="15.0" fill="rgb(234,203,33)" rx="2" ry="2" />
<text  x="965.97" y="703.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;boost::unordered::detail::ptr_node&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt; &gt;::construct&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;lczero::Position const&amp;&gt;, std::tuple&lt;TTranspositionTable::TNode&amp;&amp;&gt; &gt; (2 samples, 0.01%)</title><rect x="269.9" y="1813" width="0.1" height="15.0" fill="rgb(224,197,28)" rx="2" ry="2" />
<text  x="272.86" y="1823.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (10 samples, 0.06%)</title><rect x="470.8" y="1765" width="0.7" height="15.0" fill="rgb(246,59,28)" rx="2" ry="2" />
<text  x="473.78" y="1775.5" ></text>
</g>
<g >
<title>lczero::Position::Position (2 samples, 0.01%)</title><rect x="493.1" y="1749" width="0.1" height="15.0" fill="rgb(251,135,41)" rx="2" ry="2" />
<text  x="496.09" y="1759.5" ></text>
</g>
<g >
<title>lczero::BitBoard::get (12 samples, 0.08%)</title><rect x="78.9" y="1829" width="0.9" height="15.0" fill="rgb(205,204,17)" rx="2" ry="2" />
<text  x="81.94" y="1839.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_emplace_equal&lt;int&amp;, TSearchNode&gt; (6 samples, 0.04%)</title><rect x="550.2" y="1781" width="0.4" height="15.0" fill="rgb(206,150,9)" rx="2" ry="2" />
<text  x="553.16" y="1791.5" ></text>
</g>
<g >
<title>[unknown] (172 samples, 1.09%)</title><rect x="963.0" y="981" width="12.8" height="15.0" fill="rgb(230,199,39)" rx="2" ry="2" />
<text  x="965.97" y="991.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (34 samples, 0.21%)</title><rect x="143.7" y="1765" width="2.5" height="15.0" fill="rgb(226,9,18)" rx="2" ry="2" />
<text  x="146.70" y="1775.5" ></text>
</g>
<g >
<title>[unknown] (230 samples, 1.45%)</title><rect x="963.0" y="1589" width="17.1" height="15.0" fill="rgb(246,217,37)" rx="2" ry="2" />
<text  x="965.97" y="1599.5" ></text>
</g>
<g >
<title>search (15,816 samples, 100.00%)</title><rect x="10.0" y="2069" width="1180.0" height="15.0" fill="rgb(244,5,11)" rx="2" ry="2" />
<text  x="13.00" y="2079.5" >search</text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetRookAttacks (2 samples, 0.01%)</title><rect x="121.2" y="1781" width="0.2" height="15.0" fill="rgb(228,158,37)" rx="2" ry="2" />
<text  x="124.24" y="1791.5" ></text>
</g>
<g >
<title>__asan::GetCurrentThread (2 samples, 0.01%)</title><rect x="727.6" y="1829" width="0.1" height="15.0" fill="rgb(227,67,14)" rx="2" ry="2" />
<text  x="730.58" y="1839.5" ></text>
</g>
<g >
<title>TSearchStrategy::Search (779 samples, 4.93%)</title><rect x="233.4" y="1957" width="58.1" height="15.0" fill="rgb(233,178,24)" rx="2" ry="2" />
<text  x="236.38" y="1967.5" >TSearc..</text>
</g>
<g >
<title>std::array&lt;int, 64ul&gt;::operator[] (3 samples, 0.02%)</title><rect x="505.8" y="1717" width="0.2" height="15.0" fill="rgb(208,194,51)" rx="2" ry="2" />
<text  x="508.77" y="1727.5" ></text>
</g>
<g >
<title>__asan::Allocator::QuarantineChunk (4 samples, 0.03%)</title><rect x="569.5" y="1813" width="0.3" height="15.0" fill="rgb(229,166,41)" rx="2" ry="2" />
<text  x="572.49" y="1823.5" ></text>
</g>
<g >
<title>TSearchStrategy::Search (2,454 samples, 15.52%)</title><rect x="35.6" y="1877" width="183.1" height="15.0" fill="rgb(248,176,10)" rx="2" ry="2" />
<text  x="38.59" y="1887.5" >TSearchStrategy::Search</text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_insert_node (7 samples, 0.04%)</title><rect x="945.5" y="1845" width="0.5" height="15.0" fill="rgb(235,146,33)" rx="2" ry="2" />
<text  x="948.51" y="1855.5" ></text>
</g>
<g >
<title>std::array&lt;int, 2ul&gt;::fill (2 samples, 0.01%)</title><rect x="455.3" y="1797" width="0.2" height="15.0" fill="rgb(244,156,54)" rx="2" ry="2" />
<text  x="458.34" y="1807.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::find_node_impl&lt;lczero::Position, TTranspositionTable::TPositionEqualFn&gt; (28 samples, 0.18%)</title><rect x="149.1" y="1813" width="2.1" height="15.0" fill="rgb(218,137,53)" rx="2" ry="2" />
<text  x="152.07" y="1823.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (7 samples, 0.04%)</title><rect x="108.9" y="1733" width="0.5" height="15.0" fill="rgb(240,172,8)" rx="2" ry="2" />
<text  x="111.86" y="1743.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (42 samples, 0.27%)</title><rect x="248.0" y="1829" width="3.1" height="15.0" fill="rgb(219,56,23)" rx="2" ry="2" />
<text  x="251.00" y="1839.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (2 samples, 0.01%)</title><rect x="114.7" y="1765" width="0.2" height="15.0" fill="rgb(243,156,41)" rx="2" ry="2" />
<text  x="117.75" y="1775.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (11 samples, 0.07%)</title><rect x="465.8" y="1781" width="0.8" height="15.0" fill="rgb(246,54,53)" rx="2" ry="2" />
<text  x="468.78" y="1791.5" ></text>
</g>
<g >
<title>[unknown] (138 samples, 0.87%)</title><rect x="963.0" y="597" width="10.3" height="15.0" fill="rgb(225,135,48)" rx="2" ry="2" />
<text  x="965.97" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::erase (2 samples, 0.01%)</title><rect x="252.8" y="1829" width="0.1" height="15.0" fill="rgb(239,7,6)" rx="2" ry="2" />
<text  x="255.77" y="1839.5" ></text>
</g>
<g >
<title>boost::unordered::unordered_map&lt;lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt; &gt;::find (6 samples, 0.04%)</title><rect x="264.6" y="1829" width="0.4" height="15.0" fill="rgb(210,5,24)" rx="2" ry="2" />
<text  x="267.56" y="1839.5" ></text>
</g>
<g >
<title>TSearchStrategy::Search (7,927 samples, 50.12%)</title><rect x="324.0" y="1861" width="591.4" height="15.0" fill="rgb(254,76,6)" rx="2" ry="2" />
<text  x="326.95" y="1871.5" >TSearchStrategy::Search</text>
</g>
<g >
<title>TSearchStrategy::Search (764 samples, 4.83%)</title><rect x="233.7" y="1925" width="57.0" height="15.0" fill="rgb(234,114,9)" rx="2" ry="2" />
<text  x="236.75" y="1935.5" >TSearc..</text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (35 samples, 0.22%)</title><rect x="523.4" y="1717" width="2.6" height="15.0" fill="rgb(239,37,17)" rx="2" ry="2" />
<text  x="526.38" y="1727.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (24 samples, 0.15%)</title><rect x="192.4" y="1845" width="1.8" height="15.0" fill="rgb(225,122,35)" rx="2" ry="2" />
<text  x="195.42" y="1855.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::find_node (4 samples, 0.03%)</title><rect x="292.5" y="1845" width="0.3" height="15.0" fill="rgb(230,82,27)" rx="2" ry="2" />
<text  x="295.54" y="1855.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (18 samples, 0.11%)</title><rect x="930.1" y="1845" width="1.3" height="15.0" fill="rgb(242,201,5)" rx="2" ry="2" />
<text  x="933.07" y="1855.5" ></text>
</g>
<g >
<title>CalcPSTScore (14 samples, 0.09%)</title><rect x="501.4" y="1749" width="1.0" height="15.0" fill="rgb(209,92,22)" rx="2" ry="2" />
<text  x="504.37" y="1759.5" ></text>
</g>
<g >
<title>IsPromotion (2 samples, 0.01%)</title><rect x="342.5" y="1829" width="0.1" height="15.0" fill="rgb(212,202,31)" rx="2" ry="2" />
<text  x="345.45" y="1839.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_get_insert_equal_pos (4 samples, 0.03%)</title><rect x="289.6" y="1893" width="0.3" height="15.0" fill="rgb(227,19,44)" rx="2" ry="2" />
<text  x="292.56" y="1903.5" ></text>
</g>
<g >
<title>lczero::Position::Position (9 samples, 0.06%)</title><rect x="466.6" y="1781" width="0.7" height="15.0" fill="rgb(232,212,17)" rx="2" ry="2" />
<text  x="469.60" y="1791.5" ></text>
</g>
<g >
<title>std::pair&lt;std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&gt;::pair&lt;std::_Rb_tree_node&lt;std::pair&lt;int const, TSearchNode&gt; &gt;*&amp;, std::_Rb_tree_node_base*&amp;, true&gt; (3 samples, 0.02%)</title><rect x="907.0" y="1813" width="0.2" height="15.0" fill="rgb(235,47,22)" rx="2" ry="2" />
<text  x="910.01" y="1823.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (34 samples, 0.21%)</title><rect x="912.0" y="1813" width="2.5" height="15.0" fill="rgb(254,182,32)" rx="2" ry="2" />
<text  x="915.01" y="1823.5" ></text>
</g>
<g >
<title>[unknown] (157 samples, 0.99%)</title><rect x="963.0" y="869" width="11.7" height="15.0" fill="rgb(232,136,40)" rx="2" ry="2" />
<text  x="965.97" y="879.5" ></text>
</g>
<g >
<title>lczero::Position::Hash (7 samples, 0.04%)</title><rect x="243.9" y="1781" width="0.5" height="15.0" fill="rgb(211,169,30)" rx="2" ry="2" />
<text  x="246.90" y="1791.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::begin (3 samples, 0.02%)</title><rect x="500.9" y="1701" width="0.2" height="15.0" fill="rgb(229,11,29)" rx="2" ry="2" />
<text  x="503.92" y="1711.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::Hash (5 samples, 0.03%)</title><rect x="32.3" y="1781" width="0.4" height="15.0" fill="rgb(223,194,45)" rx="2" ry="2" />
<text  x="35.31" y="1791.5" ></text>
</g>
<g >
<title>__asan::AsanTSDGet (2 samples, 0.01%)</title><rect x="936.9" y="1829" width="0.1" height="15.0" fill="rgb(239,104,26)" rx="2" ry="2" />
<text  x="939.86" y="1839.5" ></text>
</g>
<g >
<title>__asan_memcpy (3 samples, 0.02%)</title><rect x="728.0" y="1829" width="0.3" height="15.0" fill="rgb(235,77,37)" rx="2" ry="2" />
<text  x="731.03" y="1839.5" ></text>
</g>
<g >
<title>GetPieceValue (2 samples, 0.01%)</title><rect x="48.4" y="1813" width="0.2" height="15.0" fill="rgb(245,33,25)" rx="2" ry="2" />
<text  x="51.42" y="1823.5" ></text>
</g>
<g >
<title>__pthread_getspecific (2 samples, 0.01%)</title><rect x="913.4" y="1781" width="0.1" height="15.0" fill="rgb(227,12,19)" rx="2" ry="2" />
<text  x="916.35" y="1791.5" ></text>
</g>
<g >
<title>[unknown] (234 samples, 1.48%)</title><rect x="963.0" y="1669" width="17.4" height="15.0" fill="rgb(241,211,11)" rx="2" ry="2" />
<text  x="965.97" y="1679.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (2 samples, 0.01%)</title><rect x="320.3" y="1781" width="0.1" height="15.0" fill="rgb(245,119,22)" rx="2" ry="2" />
<text  x="323.29" y="1791.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (6 samples, 0.04%)</title><rect x="29.2" y="1877" width="0.5" height="15.0" fill="rgb(235,61,24)" rx="2" ry="2" />
<text  x="32.25" y="1887.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_create_node&lt;int&amp;, TSearchNode&gt; (2 samples, 0.01%)</title><rect x="957.8" y="1909" width="0.2" height="15.0" fill="rgb(228,51,39)" rx="2" ry="2" />
<text  x="960.82" y="1919.5" ></text>
</g>
<g >
<title>TSearchStrategy::Search (557 samples, 3.52%)</title><rect x="239.7" y="1877" width="41.6" height="15.0" fill="rgb(224,211,39)" rx="2" ry="2" />
<text  x="242.72" y="1887.5" >TSe..</text>
</g>
<g >
<title>__sanitizer::Quarantine&lt;__asan::QuarantineCallback, __asan::AsanChunk&gt;::DoRecycle (2 samples, 0.01%)</title><rect x="970.7" y="197" width="0.2" height="15.0" fill="rgb(245,34,24)" rx="2" ry="2" />
<text  x="973.73" y="207.5" ></text>
</g>
<g >
<title>__sanitizer::SizeClassAllocator64&lt;__asan::AP64&gt;::ReleaseFreeMemoryToOS&lt;__sanitizer::SizeClassAllocator64&lt;__asan::AP64&gt;::MemoryMapper&gt; (10 samples, 0.06%)</title><rect x="1149.7" y="2053" width="0.8" height="15.0" fill="rgb(222,161,25)" rx="2" ry="2" />
<text  x="1152.71" y="2063.5" ></text>
</g>
<g >
<title>[unknown] (199 samples, 1.26%)</title><rect x="963.0" y="1205" width="14.8" height="15.0" fill="rgb(232,120,37)" rx="2" ry="2" />
<text  x="965.97" y="1215.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (15 samples, 0.09%)</title><rect x="509.1" y="1717" width="1.1" height="15.0" fill="rgb(217,94,31)" rx="2" ry="2" />
<text  x="512.05" y="1727.5" ></text>
</g>
<g >
<title>boost::unordered::unordered_map&lt;lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt; &gt;::find (6 samples, 0.04%)</title><rect x="102.9" y="1781" width="0.4" height="15.0" fill="rgb(243,104,31)" rx="2" ry="2" />
<text  x="105.89" y="1791.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (8 samples, 0.05%)</title><rect x="483.2" y="1749" width="0.6" height="15.0" fill="rgb(238,114,46)" rx="2" ry="2" />
<text  x="486.24" y="1759.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (6 samples, 0.04%)</title><rect x="65.4" y="1797" width="0.5" height="15.0" fill="rgb(236,152,9)" rx="2" ry="2" />
<text  x="68.43" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::Mirror (2 samples, 0.01%)</title><rect x="283.7" y="1861" width="0.1" height="15.0" fill="rgb(226,9,38)" rx="2" ry="2" />
<text  x="286.66" y="1871.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::Hash (3 samples, 0.02%)</title><rect x="95.4" y="1733" width="0.2" height="15.0" fill="rgb(211,124,34)" rx="2" ry="2" />
<text  x="98.43" y="1743.5" ></text>
</g>
<g >
<title>[unknown] (209 samples, 1.32%)</title><rect x="963.0" y="1349" width="15.6" height="15.0" fill="rgb(218,84,49)" rx="2" ry="2" />
<text  x="965.97" y="1359.5" ></text>
</g>
<g >
<title>std::array&lt;int, 64ul&gt;::operator[] (9 samples, 0.06%)</title><rect x="86.8" y="1813" width="0.7" height="15.0" fill="rgb(211,103,26)" rx="2" ry="2" />
<text  x="89.85" y="1823.5" ></text>
</g>
<g >
<title>lczero::Position::Position (4 samples, 0.03%)</title><rect x="500.1" y="1717" width="0.3" height="15.0" fill="rgb(207,123,18)" rx="2" ry="2" />
<text  x="503.10" y="1727.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (43 samples, 0.27%)</title><rect x="519.7" y="1717" width="3.2" height="15.0" fill="rgb(223,161,42)" rx="2" ry="2" />
<text  x="522.72" y="1727.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (2 samples, 0.01%)</title><rect x="31.3" y="1845" width="0.2" height="15.0" fill="rgb(224,124,30)" rx="2" ry="2" />
<text  x="34.34" y="1855.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (4 samples, 0.03%)</title><rect x="27.8" y="1861" width="0.3" height="15.0" fill="rgb(224,76,41)" rx="2" ry="2" />
<text  x="30.76" y="1871.5" ></text>
</g>
<g >
<title>lczero::Position::Position (7 samples, 0.04%)</title><rect x="146.8" y="1829" width="0.5" height="15.0" fill="rgb(248,222,40)" rx="2" ry="2" />
<text  x="149.76" y="1839.5" ></text>
</g>
<g >
<title>[unknown] (162 samples, 1.02%)</title><rect x="963.0" y="917" width="12.1" height="15.0" fill="rgb(209,102,0)" rx="2" ry="2" />
<text  x="965.97" y="927.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (145 samples, 0.92%)</title><rect x="173.5" y="1845" width="10.9" height="15.0" fill="rgb(224,102,2)" rx="2" ry="2" />
<text  x="176.54" y="1855.5" ></text>
</g>
<g >
<title>[unknown] (200 samples, 1.26%)</title><rect x="963.0" y="1221" width="14.9" height="15.0" fill="rgb(219,23,30)" rx="2" ry="2" />
<text  x="965.97" y="1231.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (8 samples, 0.05%)</title><rect x="47.8" y="1797" width="0.5" height="15.0" fill="rgb(206,118,39)" rx="2" ry="2" />
<text  x="50.75" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsUnderAttack (2 samples, 0.01%)</title><rect x="249.6" y="1813" width="0.1" height="15.0" fill="rgb(224,34,53)" rx="2" ry="2" />
<text  x="252.57" y="1823.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (16 samples, 0.10%)</title><rect x="576.3" y="1781" width="1.2" height="15.0" fill="rgb(230,43,36)" rx="2" ry="2" />
<text  x="579.35" y="1791.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetRookAttacks (3 samples, 0.02%)</title><rect x="48.1" y="1781" width="0.2" height="15.0" fill="rgb(227,195,7)" rx="2" ry="2" />
<text  x="51.05" y="1791.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (23 samples, 0.15%)</title><rect x="483.2" y="1781" width="1.8" height="15.0" fill="rgb(211,228,28)" rx="2" ry="2" />
<text  x="486.24" y="1791.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (6 samples, 0.04%)</title><rect x="506.8" y="1701" width="0.5" height="15.0" fill="rgb(217,163,31)" rx="2" ry="2" />
<text  x="509.81" y="1711.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (2 samples, 0.01%)</title><rect x="357.7" y="1685" width="0.2" height="15.0" fill="rgb(229,223,48)" rx="2" ry="2" />
<text  x="360.75" y="1695.5" ></text>
</g>
<g >
<title>lczero::Position::Position (3 samples, 0.02%)</title><rect x="353.6" y="1797" width="0.3" height="15.0" fill="rgb(245,206,1)" rx="2" ry="2" />
<text  x="356.64" y="1807.5" ></text>
</g>
<g >
<title>__asan::GetCurrentThread (2 samples, 0.01%)</title><rect x="813.3" y="1781" width="0.2" height="15.0" fill="rgb(206,16,45)" rx="2" ry="2" />
<text  x="816.30" y="1791.5" ></text>
</g>
<g >
<title>custom_epd::test_method (780 samples, 4.93%)</title><rect x="233.4" y="2005" width="58.2" height="15.0" fill="rgb(250,99,22)" rx="2" ry="2" />
<text  x="236.38" y="2015.5" >custom..</text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (19 samples, 0.12%)</title><rect x="268.0" y="1813" width="1.4" height="15.0" fill="rgb(248,25,2)" rx="2" ry="2" />
<text  x="270.99" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (9 samples, 0.06%)</title><rect x="526.4" y="1669" width="0.7" height="15.0" fill="rgb(235,163,37)" rx="2" ry="2" />
<text  x="529.44" y="1679.5" ></text>
</g>
<g >
<title>__asan_memcpy (12 samples, 0.08%)</title><rect x="885.9" y="1829" width="0.9" height="15.0" fill="rgb(225,36,4)" rx="2" ry="2" />
<text  x="888.90" y="1839.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (34 samples, 0.21%)</title><rect x="71.8" y="1829" width="2.5" height="15.0" fill="rgb(243,205,40)" rx="2" ry="2" />
<text  x="74.78" y="1839.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (79 samples, 0.50%)</title><rect x="16.0" y="2037" width="5.9" height="15.0" fill="rgb(212,23,44)" rx="2" ry="2" />
<text  x="18.97" y="2047.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare&gt; (2 samples, 0.01%)</title><rect x="25.5" y="1877" width="0.2" height="15.0" fill="rgb(216,179,37)" rx="2" ry="2" />
<text  x="28.52" y="1887.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (7 samples, 0.04%)</title><rect x="111.9" y="1765" width="0.5" height="15.0" fill="rgb(218,190,15)" rx="2" ry="2" />
<text  x="114.91" y="1775.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (32 samples, 0.20%)</title><rect x="33.2" y="1877" width="2.4" height="15.0" fill="rgb(233,9,10)" rx="2" ry="2" />
<text  x="36.20" y="1887.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (2 samples, 0.01%)</title><rect x="732.7" y="1813" width="0.1" height="15.0" fill="rgb(215,92,11)" rx="2" ry="2" />
<text  x="735.65" y="1823.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (4 samples, 0.03%)</title><rect x="231.1" y="1877" width="0.3" height="15.0" fill="rgb(220,221,44)" rx="2" ry="2" />
<text  x="234.06" y="1887.5" ></text>
</g>
<g >
<title>[unknown] (269 samples, 1.70%)</title><rect x="963.0" y="1973" width="20.0" height="15.0" fill="rgb(250,111,40)" rx="2" ry="2" />
<text  x="965.97" y="1983.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::find_node_impl&lt;lczero::Position, TTranspositionTable::TPositionEqualFn&gt; (19 samples, 0.12%)</title><rect x="349.7" y="1797" width="1.4" height="15.0" fill="rgb(237,88,19)" rx="2" ry="2" />
<text  x="352.69" y="1807.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::find_node (8 samples, 0.05%)</title><rect x="32.1" y="1829" width="0.6" height="15.0" fill="rgb(207,200,40)" rx="2" ry="2" />
<text  x="35.08" y="1839.5" ></text>
</g>
<g >
<title>std::array&lt;int, 64ul&gt;::operator[] (2 samples, 0.01%)</title><rect x="148.1" y="1829" width="0.1" height="15.0" fill="rgb(231,121,21)" rx="2" ry="2" />
<text  x="151.10" y="1839.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (18 samples, 0.11%)</title><rect x="263.0" y="1797" width="1.3" height="15.0" fill="rgb(233,1,30)" rx="2" ry="2" />
<text  x="266.00" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsUnderAttack (3 samples, 0.02%)</title><rect x="286.3" y="1861" width="0.3" height="15.0" fill="rgb(206,151,47)" rx="2" ry="2" />
<text  x="289.35" y="1871.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::find_node (65 samples, 0.41%)</title><rect x="344.8" y="1797" width="4.9" height="15.0" fill="rgb(206,151,47)" rx="2" ry="2" />
<text  x="347.84" y="1807.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (3 samples, 0.02%)</title><rect x="111.5" y="1717" width="0.2" height="15.0" fill="rgb(205,50,18)" rx="2" ry="2" />
<text  x="114.47" y="1727.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetRookAttacks (3 samples, 0.02%)</title><rect x="249.3" y="1813" width="0.3" height="15.0" fill="rgb(212,7,18)" rx="2" ry="2" />
<text  x="252.34" y="1823.5" ></text>
</g>
<g >
<title>lczero::BitBoard::get (20 samples, 0.13%)</title><rect x="571.1" y="1813" width="1.5" height="15.0" fill="rgb(248,72,34)" rx="2" ry="2" />
<text  x="574.13" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (3 samples, 0.02%)</title><rect x="471.6" y="1765" width="0.2" height="15.0" fill="rgb(246,34,53)" rx="2" ry="2" />
<text  x="474.60" y="1775.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::begin (2 samples, 0.01%)</title><rect x="507.6" y="1669" width="0.2" height="15.0" fill="rgb(252,10,49)" rx="2" ry="2" />
<text  x="510.64" y="1679.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (4 samples, 0.03%)</title><rect x="110.3" y="1701" width="0.3" height="15.0" fill="rgb(243,77,14)" rx="2" ry="2" />
<text  x="113.35" y="1711.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::insert_or_assign_unique&lt;lczero::Position const&amp;, TTranspositionTable::TNode&gt; (22 samples, 0.14%)</title><rect x="170.6" y="1845" width="1.6" height="15.0" fill="rgb(205,108,46)" rx="2" ry="2" />
<text  x="173.56" y="1855.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::begin (2 samples, 0.01%)</title><rect x="28.8" y="1829" width="0.2" height="15.0" fill="rgb(222,182,32)" rx="2" ry="2" />
<text  x="31.80" y="1839.5" ></text>
</g>
<g >
<title>lczero::Position::Position (6 samples, 0.04%)</title><rect x="484.5" y="1765" width="0.5" height="15.0" fill="rgb(241,160,47)" rx="2" ry="2" />
<text  x="487.51" y="1775.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (9 samples, 0.06%)</title><rect x="952.9" y="1877" width="0.7" height="15.0" fill="rgb(247,24,51)" rx="2" ry="2" />
<text  x="955.90" y="1887.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (2 samples, 0.01%)</title><rect x="232.4" y="1893" width="0.2" height="15.0" fill="rgb(213,37,54)" rx="2" ry="2" />
<text  x="235.41" y="1903.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (1,758 samples, 11.12%)</title><rect x="572.6" y="1813" width="131.2" height="15.0" fill="rgb(213,166,26)" rx="2" ry="2" />
<text  x="575.62" y="1823.5" >lczero::ChessBoa..</text>
</g>
<g >
<title>lczero::Position::Hash (2 samples, 0.01%)</title><rect x="472.7" y="1733" width="0.2" height="15.0" fill="rgb(216,200,7)" rx="2" ry="2" />
<text  x="475.72" y="1743.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (6 samples, 0.04%)</title><rect x="267.5" y="1813" width="0.5" height="15.0" fill="rgb(251,10,42)" rx="2" ry="2" />
<text  x="270.55" y="1823.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (3 samples, 0.02%)</title><rect x="234.0" y="1893" width="0.3" height="15.0" fill="rgb(239,140,29)" rx="2" ry="2" />
<text  x="237.05" y="1903.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_create_node&lt;int&amp;, TSearchNode&gt; (3 samples, 0.02%)</title><rect x="550.2" y="1765" width="0.2" height="15.0" fill="rgb(233,83,1)" rx="2" ry="2" />
<text  x="553.16" y="1775.5" ></text>
</g>
<g >
<title>lczero::Position::Hash (2 samples, 0.01%)</title><rect x="28.5" y="1813" width="0.2" height="15.0" fill="rgb(205,9,45)" rx="2" ry="2" />
<text  x="31.50" y="1823.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetRookAttacks (4 samples, 0.03%)</title><rect x="266.4" y="1797" width="0.3" height="15.0" fill="rgb(211,219,14)" rx="2" ry="2" />
<text  x="269.35" y="1807.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (4 samples, 0.03%)</title><rect x="980.6" y="1701" width="0.3" height="15.0" fill="rgb(254,215,25)" rx="2" ry="2" />
<text  x="983.65" y="1711.5" ></text>
</g>
<g >
<title>lczero::BitBoard::get (3 samples, 0.02%)</title><rect x="502.2" y="1733" width="0.2" height="15.0" fill="rgb(207,98,47)" rx="2" ry="2" />
<text  x="505.19" y="1743.5" ></text>
</g>
<g >
<title>[unknown] (170 samples, 1.07%)</title><rect x="963.0" y="965" width="12.7" height="15.0" fill="rgb(230,49,29)" rx="2" ry="2" />
<text  x="965.97" y="975.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (2 samples, 0.01%)</title><rect x="90.6" y="1781" width="0.1" height="15.0" fill="rgb(210,111,22)" rx="2" ry="2" />
<text  x="93.58" y="1791.5" ></text>
</g>
<g >
<title>__asan::AsanThread::stack_bottom (4 samples, 0.03%)</title><rect x="894.9" y="1813" width="0.2" height="15.0" fill="rgb(239,166,38)" rx="2" ry="2" />
<text  x="897.85" y="1823.5" ></text>
</g>
<g >
<title>TTranspositionTable::Find (9 samples, 0.06%)</title><rect x="493.3" y="1765" width="0.7" height="15.0" fill="rgb(230,85,40)" rx="2" ry="2" />
<text  x="496.31" y="1775.5" ></text>
</g>
<g >
<title>__sanitizer::mem_is_zero (3 samples, 0.02%)</title><rect x="151.4" y="1845" width="0.2" height="15.0" fill="rgb(206,221,44)" rx="2" ry="2" />
<text  x="154.38" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (2 samples, 0.01%)</title><rect x="358.3" y="1765" width="0.2" height="15.0" fill="rgb(231,185,1)" rx="2" ry="2" />
<text  x="361.34" y="1775.5" ></text>
</g>
<g >
<title>GetPieceType (2 samples, 0.01%)</title><rect x="318.2" y="1829" width="0.2" height="15.0" fill="rgb(237,88,18)" rx="2" ry="2" />
<text  x="321.21" y="1839.5" ></text>
</g>
<g >
<title>[unknown] (115 samples, 0.73%)</title><rect x="963.0" y="341" width="8.5" height="15.0" fill="rgb(209,70,10)" rx="2" ry="2" />
<text  x="965.97" y="351.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_emplace_equal&lt;int&amp;, TSearchNode&gt; (18 samples, 0.11%)</title><rect x="283.8" y="1877" width="1.4" height="15.0" fill="rgb(216,146,47)" rx="2" ry="2" />
<text  x="286.81" y="1887.5" ></text>
</g>
<g >
<title>__asan_region_is_poisoned (3 samples, 0.02%)</title><rect x="223.7" y="1829" width="0.2" height="15.0" fill="rgb(240,43,52)" rx="2" ry="2" />
<text  x="226.68" y="1839.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_construct_node&lt;int&amp;, TSearchNode&gt; (13 samples, 0.08%)</title><rect x="278.6" y="1829" width="1.0" height="15.0" fill="rgb(250,62,15)" rx="2" ry="2" />
<text  x="281.59" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (2 samples, 0.01%)</title><rect x="500.0" y="1717" width="0.1" height="15.0" fill="rgb(208,4,37)" rx="2" ry="2" />
<text  x="502.95" y="1727.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (2 samples, 0.01%)</title><rect x="497.2" y="1717" width="0.1" height="15.0" fill="rgb(232,113,46)" rx="2" ry="2" />
<text  x="500.19" y="1727.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (44 samples, 0.28%)</title><rect x="270.8" y="1845" width="3.3" height="15.0" fill="rgb(232,147,42)" rx="2" ry="2" />
<text  x="273.83" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::HasMatingMaterial (2 samples, 0.01%)</title><rect x="415.9" y="1813" width="0.2" height="15.0" fill="rgb(225,196,12)" rx="2" ry="2" />
<text  x="418.94" y="1823.5" ></text>
</g>
<g >
<title>std::array&lt;int, 2ul&gt;::operator[] (2 samples, 0.01%)</title><rect x="254.2" y="1829" width="0.1" height="15.0" fill="rgb(246,127,25)" rx="2" ry="2" />
<text  x="257.19" y="1839.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::~_Rb_tree (2 samples, 0.01%)</title><rect x="285.2" y="1877" width="0.2" height="15.0" fill="rgb(233,92,39)" rx="2" ry="2" />
<text  x="288.23" y="1887.5" ></text>
</g>
<g >
<title>__asan::AsanThread::stack_bottom (2 samples, 0.01%)</title><rect x="201.9" y="1829" width="0.1" height="15.0" fill="rgb(224,118,38)" rx="2" ry="2" />
<text  x="204.89" y="1839.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetRookAttacks (5 samples, 0.03%)</title><rect x="69.6" y="1813" width="0.4" height="15.0" fill="rgb(229,30,26)" rx="2" ry="2" />
<text  x="72.61" y="1823.5" ></text>
</g>
<g >
<title>CalcPSTScore (3 samples, 0.02%)</title><rect x="513.2" y="1669" width="0.3" height="15.0" fill="rgb(236,8,28)" rx="2" ry="2" />
<text  x="516.23" y="1679.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ApplyMove (3 samples, 0.02%)</title><rect x="484.7" y="1749" width="0.2" height="15.0" fill="rgb(205,134,18)" rx="2" ry="2" />
<text  x="487.66" y="1759.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetRookAttacks (3 samples, 0.02%)</title><rect x="90.1" y="1781" width="0.2" height="15.0" fill="rgb(206,224,8)" rx="2" ry="2" />
<text  x="93.05" y="1791.5" ></text>
</g>
<g >
<title>[unknown] (267 samples, 1.69%)</title><rect x="963.0" y="1957" width="19.9" height="15.0" fill="rgb(243,72,7)" rx="2" ry="2" />
<text  x="965.97" y="1967.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (17 samples, 0.11%)</title><rect x="884.6" y="1829" width="1.3" height="15.0" fill="rgb(210,32,40)" rx="2" ry="2" />
<text  x="887.63" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateKingAttackInfo (2 samples, 0.01%)</title><rect x="363.4" y="1813" width="0.2" height="15.0" fill="rgb(242,199,6)" rx="2" ry="2" />
<text  x="366.42" y="1823.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (4 samples, 0.03%)</title><rect x="529.3" y="1717" width="0.3" height="15.0" fill="rgb(229,115,48)" rx="2" ry="2" />
<text  x="532.27" y="1727.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_create_node&lt;int&amp;, TSearchNode&gt; (2 samples, 0.01%)</title><rect x="264.4" y="1813" width="0.2" height="15.0" fill="rgb(223,208,39)" rx="2" ry="2" />
<text  x="267.41" y="1823.5" ></text>
</g>
<g >
<title>__lsan::DisabledInThisThread (4 samples, 0.03%)</title><rect x="1140.2" y="2053" width="0.3" height="15.0" fill="rgb(212,153,29)" rx="2" ry="2" />
<text  x="1143.16" y="2063.5" ></text>
</g>
<g >
<title>TTranspositionTable::Find (23 samples, 0.15%)</title><rect x="867.0" y="1845" width="1.7" height="15.0" fill="rgb(237,62,10)" rx="2" ry="2" />
<text  x="870.02" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (7 samples, 0.04%)</title><rect x="366.8" y="1765" width="0.5" height="15.0" fill="rgb(225,214,30)" rx="2" ry="2" />
<text  x="369.78" y="1775.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (6 samples, 0.04%)</title><rect x="957.1" y="1877" width="0.4" height="15.0" fill="rgb(206,42,16)" rx="2" ry="2" />
<text  x="960.07" y="1887.5" ></text>
</g>
<g >
<title>lczero::Position::Hash (3 samples, 0.02%)</title><rect x="168.7" y="1797" width="0.2" height="15.0" fill="rgb(219,161,22)" rx="2" ry="2" />
<text  x="171.69" y="1807.5" ></text>
</g>
<g >
<title>lczero::Position::Hash (7 samples, 0.04%)</title><rect x="148.5" y="1781" width="0.6" height="15.0" fill="rgb(235,216,38)" rx="2" ry="2" />
<text  x="151.55" y="1791.5" ></text>
</g>
<g >
<title>bratko_kopec_invoker (2,783 samples, 17.60%)</title><rect x="25.7" y="2021" width="207.7" height="15.0" fill="rgb(236,110,3)" rx="2" ry="2" />
<text  x="28.74" y="2031.5" >bratko_kopec_invoker</text>
</g>
<g >
<title>lczero::BitBoard::get (5 samples, 0.03%)</title><rect x="508.5" y="1701" width="0.3" height="15.0" fill="rgb(209,120,46)" rx="2" ry="2" />
<text  x="511.46" y="1711.5" ></text>
</g>
<g >
<title>boost::unordered::unordered_map&lt;lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt; &gt;::find (6 samples, 0.04%)</title><rect x="292.5" y="1861" width="0.5" height="15.0" fill="rgb(244,102,46)" rx="2" ry="2" />
<text  x="295.54" y="1871.5" ></text>
</g>
<g >
<title>__asan_memcpy (9 samples, 0.06%)</title><rect x="899.3" y="1797" width="0.6" height="15.0" fill="rgb(236,60,1)" rx="2" ry="2" />
<text  x="902.25" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (27 samples, 0.17%)</title><rect x="218.9" y="1877" width="2.0" height="15.0" fill="rgb(235,49,5)" rx="2" ry="2" />
<text  x="221.90" y="1887.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::insert_or_assign_unique&lt;lczero::Position const&amp;, TTranspositionTable::TNode&gt; (7 samples, 0.04%)</title><rect x="269.9" y="1845" width="0.5" height="15.0" fill="rgb(243,201,47)" rx="2" ry="2" />
<text  x="272.86" y="1855.5" ></text>
</g>
<g >
<title>TTranspositionTable::Find (6 samples, 0.04%)</title><rect x="500.8" y="1749" width="0.4" height="15.0" fill="rgb(215,75,45)" rx="2" ry="2" />
<text  x="503.77" y="1759.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::Hash (39 samples, 0.25%)</title><rect x="346.7" y="1749" width="2.9" height="15.0" fill="rgb(238,167,9)" rx="2" ry="2" />
<text  x="349.71" y="1759.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (5 samples, 0.03%)</title><rect x="247.1" y="1813" width="0.4" height="15.0" fill="rgb(248,203,44)" rx="2" ry="2" />
<text  x="250.10" y="1823.5" ></text>
</g>
<g >
<title>IsCapture (2 samples, 0.01%)</title><rect x="499.5" y="1765" width="0.2" height="15.0" fill="rgb(225,166,47)" rx="2" ry="2" />
<text  x="502.50" y="1775.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::begin (10 samples, 0.06%)</title><rect x="916.6" y="1813" width="0.8" height="15.0" fill="rgb(223,57,12)" rx="2" ry="2" />
<text  x="919.64" y="1823.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::back (96 samples, 0.61%)</title><rect x="644.1" y="1765" width="7.2" height="15.0" fill="rgb(224,203,28)" rx="2" ry="2" />
<text  x="647.09" y="1775.5" ></text>
</g>
<g >
<title>lczero::BitBoard::get (15 samples, 0.09%)</title><rect x="99.6" y="1797" width="1.1" height="15.0" fill="rgb(228,3,49)" rx="2" ry="2" />
<text  x="102.60" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (2 samples, 0.01%)</title><rect x="483.3" y="1717" width="0.2" height="15.0" fill="rgb(240,50,41)" rx="2" ry="2" />
<text  x="486.31" y="1727.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (4 samples, 0.03%)</title><rect x="111.4" y="1733" width="0.3" height="15.0" fill="rgb(229,101,18)" rx="2" ry="2" />
<text  x="114.39" y="1743.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (3 samples, 0.02%)</title><rect x="287.4" y="1829" width="0.2" height="15.0" fill="rgb(213,155,26)" rx="2" ry="2" />
<text  x="290.39" y="1839.5" ></text>
</g>
<g >
<title>CalcPSTScore (7 samples, 0.04%)</title><rect x="511.3" y="1701" width="0.5" height="15.0" fill="rgb(228,217,36)" rx="2" ry="2" />
<text  x="514.29" y="1711.5" ></text>
</g>
<g >
<title>std::array&lt;int, 2ul&gt;::operator[] (3 samples, 0.02%)</title><rect x="477.6" y="1781" width="0.3" height="15.0" fill="rgb(235,65,1)" rx="2" ry="2" />
<text  x="480.64" y="1791.5" ></text>
</g>
<g >
<title>TSearchStrategy::CalcMoveOrder (4 samples, 0.03%)</title><rect x="319.0" y="1845" width="0.3" height="15.0" fill="rgb(209,67,27)" rx="2" ry="2" />
<text  x="322.03" y="1855.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (3 samples, 0.02%)</title><rect x="953.3" y="1845" width="0.3" height="15.0" fill="rgb(245,182,51)" rx="2" ry="2" />
<text  x="956.34" y="1855.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (223 samples, 1.41%)</title><rect x="351.1" y="1845" width="16.6" height="15.0" fill="rgb(222,143,4)" rx="2" ry="2" />
<text  x="354.11" y="1855.5" ></text>
</g>
<g >
<title>[unknown] (151 samples, 0.95%)</title><rect x="963.0" y="789" width="11.2" height="15.0" fill="rgb(239,73,2)" rx="2" ry="2" />
<text  x="965.97" y="799.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::back (4 samples, 0.03%)</title><rect x="121.8" y="1781" width="0.3" height="15.0" fill="rgb(213,27,1)" rx="2" ry="2" />
<text  x="124.76" y="1791.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (65 samples, 0.41%)</title><rect x="87.5" y="1829" width="4.9" height="15.0" fill="rgb(223,105,24)" rx="2" ry="2" />
<text  x="90.52" y="1839.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_emplace_equal&lt;int&amp;, TSearchNode&gt; (4 samples, 0.03%)</title><rect x="527.3" y="1733" width="0.3" height="15.0" fill="rgb(229,115,47)" rx="2" ry="2" />
<text  x="530.26" y="1743.5" ></text>
</g>
<g >
<title>std::array&lt;int, 64ul&gt;::operator[] (2 samples, 0.01%)</title><rect x="331.6" y="1829" width="0.2" height="15.0" fill="rgb(229,53,26)" rx="2" ry="2" />
<text  x="334.64" y="1839.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (2 samples, 0.01%)</title><rect x="259.2" y="1829" width="0.1" height="15.0" fill="rgb(210,181,2)" rx="2" ry="2" />
<text  x="262.19" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (53 samples, 0.34%)</title><rect x="363.4" y="1829" width="4.0" height="15.0" fill="rgb(246,105,17)" rx="2" ry="2" />
<text  x="366.42" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateKingAttackInfo (6 samples, 0.04%)</title><rect x="541.4" y="1765" width="0.4" height="15.0" fill="rgb(215,115,25)" rx="2" ry="2" />
<text  x="544.36" y="1775.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::back (6 samples, 0.04%)</title><rect x="924.7" y="1813" width="0.4" height="15.0" fill="rgb(249,1,1)" rx="2" ry="2" />
<text  x="927.69" y="1823.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (32 samples, 0.20%)</title><rect x="497.1" y="1765" width="2.4" height="15.0" fill="rgb(224,134,54)" rx="2" ry="2" />
<text  x="500.12" y="1775.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (141 samples, 0.89%)</title><rect x="918.7" y="1861" width="10.5" height="15.0" fill="rgb(238,164,11)" rx="2" ry="2" />
<text  x="921.73" y="1871.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::hash (3 samples, 0.02%)</title><rect x="915.5" y="1813" width="0.2" height="15.0" fill="rgb(205,138,42)" rx="2" ry="2" />
<text  x="918.52" y="1823.5" ></text>
</g>
<g >
<title>lczero::Position::Position (8 samples, 0.05%)</title><rect x="481.8" y="1781" width="0.6" height="15.0" fill="rgb(223,136,35)" rx="2" ry="2" />
<text  x="484.82" y="1791.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (4 samples, 0.03%)</title><rect x="516.1" y="1637" width="0.3" height="15.0" fill="rgb(244,49,8)" rx="2" ry="2" />
<text  x="519.14" y="1647.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (12 samples, 0.08%)</title><rect x="362.1" y="1797" width="0.9" height="15.0" fill="rgb(250,171,29)" rx="2" ry="2" />
<text  x="365.15" y="1807.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (36 samples, 0.23%)</title><rect x="926.1" y="1813" width="2.7" height="15.0" fill="rgb(238,135,25)" rx="2" ry="2" />
<text  x="929.11" y="1823.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (9 samples, 0.06%)</title><rect x="29.0" y="1893" width="0.7" height="15.0" fill="rgb(229,94,53)" rx="2" ry="2" />
<text  x="32.03" y="1903.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::delete_buckets (10 samples, 0.06%)</title><rect x="232.6" y="1973" width="0.8" height="15.0" fill="rgb(217,148,32)" rx="2" ry="2" />
<text  x="235.63" y="1983.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::find_node_impl&lt;lczero::Position, TTranspositionTable::TPositionEqualFn&gt; (26 samples, 0.16%)</title><rect x="315.6" y="1813" width="1.9" height="15.0" fill="rgb(229,44,18)" rx="2" ry="2" />
<text  x="318.59" y="1823.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (2 samples, 0.01%)</title><rect x="108.6" y="1717" width="0.2" height="15.0" fill="rgb(216,167,22)" rx="2" ry="2" />
<text  x="111.63" y="1727.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (5 samples, 0.03%)</title><rect x="29.2" y="1861" width="0.4" height="15.0" fill="rgb(205,187,2)" rx="2" ry="2" />
<text  x="32.25" y="1871.5" ></text>
</g>
<g >
<title>TTranspositionTable::TPositionEqualFn::operator (2 samples, 0.01%)</title><rect x="485.1" y="1733" width="0.2" height="15.0" fill="rgb(230,37,7)" rx="2" ry="2" />
<text  x="488.10" y="1743.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;boost::unordered::detail::ptr_node&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt; &gt;::construct&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;lczero::Position const&amp;&gt;, std::tuple&lt;TTranspositionTable::TNode&amp;&amp;&gt; &gt; (3 samples, 0.02%)</title><rect x="917.5" y="1813" width="0.3" height="15.0" fill="rgb(210,29,27)" rx="2" ry="2" />
<text  x="920.53" y="1823.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::~_Rb_tree (4 samples, 0.03%)</title><rect x="955.5" y="1877" width="0.3" height="15.0" fill="rgb(232,19,39)" rx="2" ry="2" />
<text  x="958.51" y="1887.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_construct_node&lt;int&amp;, TSearchNode&gt; (3 samples, 0.02%)</title><rect x="147.4" y="1797" width="0.3" height="15.0" fill="rgb(254,31,24)" rx="2" ry="2" />
<text  x="150.43" y="1807.5" ></text>
</g>
<g >
<title>std::array&lt;int, 2ul&gt;::operator[] (4 samples, 0.03%)</title><rect x="80.1" y="1829" width="0.3" height="15.0" fill="rgb(247,73,9)" rx="2" ry="2" />
<text  x="83.13" y="1839.5" ></text>
</g>
<g >
<title>lczero::BitBoard::get (2 samples, 0.01%)</title><rect x="30.4" y="1861" width="0.1" height="15.0" fill="rgb(220,142,33)" rx="2" ry="2" />
<text  x="33.37" y="1871.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (2 samples, 0.01%)</title><rect x="289.9" y="1861" width="0.1" height="15.0" fill="rgb(244,71,7)" rx="2" ry="2" />
<text  x="292.85" y="1871.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::find_node (10 samples, 0.06%)</title><rect x="243.7" y="1813" width="0.7" height="15.0" fill="rgb(227,140,42)" rx="2" ry="2" />
<text  x="246.67" y="1823.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (6 samples, 0.04%)</title><rect x="335.7" y="1781" width="0.4" height="15.0" fill="rgb(214,201,2)" rx="2" ry="2" />
<text  x="338.66" y="1791.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::Hash (2 samples, 0.01%)</title><rect x="28.5" y="1797" width="0.2" height="15.0" fill="rgb(215,0,15)" rx="2" ry="2" />
<text  x="31.50" y="1807.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (1,267 samples, 8.01%)</title><rect x="472.9" y="1813" width="94.6" height="15.0" fill="rgb(216,117,51)" rx="2" ry="2" />
<text  x="475.94" y="1823.5" >TSearchStra..</text>
</g>
<g >
<title>__sanitizer::mem_is_zero (3 samples, 0.02%)</title><rect x="223.9" y="1829" width="0.2" height="15.0" fill="rgb(205,6,20)" rx="2" ry="2" />
<text  x="226.90" y="1839.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::begin (8 samples, 0.05%)</title><rect x="867.8" y="1797" width="0.6" height="15.0" fill="rgb(220,175,8)" rx="2" ry="2" />
<text  x="870.77" y="1807.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::begin (4 samples, 0.03%)</title><rect x="485.3" y="1733" width="0.3" height="15.0" fill="rgb(207,165,2)" rx="2" ry="2" />
<text  x="488.25" y="1743.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetRookAttacks (2 samples, 0.01%)</title><rect x="733.0" y="1813" width="0.1" height="15.0" fill="rgb(221,166,31)" rx="2" ry="2" />
<text  x="735.95" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (14 samples, 0.09%)</title><rect x="73.2" y="1781" width="1.0" height="15.0" fill="rgb(213,125,14)" rx="2" ry="2" />
<text  x="76.19" y="1791.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (36 samples, 0.23%)</title><rect x="47.2" y="1829" width="2.6" height="15.0" fill="rgb(250,107,49)" rx="2" ry="2" />
<text  x="50.15" y="1839.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (8 samples, 0.05%)</title><rect x="65.3" y="1813" width="0.6" height="15.0" fill="rgb(254,151,6)" rx="2" ry="2" />
<text  x="68.28" y="1823.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::find_node (4 samples, 0.03%)</title><rect x="235.4" y="1845" width="0.3" height="15.0" fill="rgb(223,149,46)" rx="2" ry="2" />
<text  x="238.39" y="1855.5" ></text>
</g>
<g >
<title>std::array&lt;lczero::Move, 64ul&gt;::at (3 samples, 0.02%)</title><rect x="311.3" y="1829" width="0.3" height="15.0" fill="rgb(232,148,32)" rx="2" ry="2" />
<text  x="314.34" y="1839.5" ></text>
</g>
<g >
<title>TTranspositionTable::Find (6 samples, 0.04%)</title><rect x="269.4" y="1861" width="0.5" height="15.0" fill="rgb(208,4,23)" rx="2" ry="2" />
<text  x="272.41" y="1871.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (12 samples, 0.08%)</title><rect x="861.1" y="1781" width="0.8" height="15.0" fill="rgb(252,12,54)" rx="2" ry="2" />
<text  x="864.05" y="1791.5" ></text>
</g>
<g >
<title>boost::unordered::detail::node_constructor&lt;std::allocator&lt;boost::unordered::detail::ptr_node&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt; &gt; &gt;::create_node (3 samples, 0.02%)</title><rect x="170.7" y="1813" width="0.2" height="15.0" fill="rgb(221,72,20)" rx="2" ry="2" />
<text  x="173.71" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (34 samples, 0.21%)</title><rect x="359.6" y="1797" width="2.5" height="15.0" fill="rgb(227,161,20)" rx="2" ry="2" />
<text  x="362.61" y="1807.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (297 samples, 1.88%)</title><rect x="788.7" y="1797" width="22.1" height="15.0" fill="rgb(251,5,42)" rx="2" ry="2" />
<text  x="791.68" y="1807.5" >s..</text>
</g>
<g >
<title>__asan::AsanTSDGet (3 samples, 0.02%)</title><rect x="218.0" y="1797" width="0.2" height="15.0" fill="rgb(247,205,47)" rx="2" ry="2" />
<text  x="221.01" y="1807.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (2 samples, 0.01%)</title><rect x="63.9" y="1813" width="0.2" height="15.0" fill="rgb(250,208,5)" rx="2" ry="2" />
<text  x="66.94" y="1823.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare&gt; (6 samples, 0.04%)</title><rect x="183.8" y="1829" width="0.4" height="15.0" fill="rgb(234,52,11)" rx="2" ry="2" />
<text  x="186.76" y="1839.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (2 samples, 0.01%)</title><rect x="64.2" y="1813" width="0.1" height="15.0" fill="rgb(252,5,18)" rx="2" ry="2" />
<text  x="67.17" y="1823.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (7 samples, 0.04%)</title><rect x="236.8" y="1845" width="0.5" height="15.0" fill="rgb(214,98,35)" rx="2" ry="2" />
<text  x="239.81" y="1855.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (5 samples, 0.03%)</title><rect x="516.1" y="1653" width="0.3" height="15.0" fill="rgb(232,1,26)" rx="2" ry="2" />
<text  x="519.07" y="1663.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (178 samples, 1.13%)</title><rect x="103.3" y="1813" width="13.3" height="15.0" fill="rgb(218,83,39)" rx="2" ry="2" />
<text  x="106.33" y="1823.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_get_insert_equal_pos (4 samples, 0.03%)</title><rect x="566.6" y="1781" width="0.3" height="15.0" fill="rgb(240,114,25)" rx="2" ry="2" />
<text  x="569.58" y="1791.5" ></text>
</g>
<g >
<title>__pthread_getspecific (3 samples, 0.02%)</title><rect x="217.3" y="1813" width="0.3" height="15.0" fill="rgb(219,25,9)" rx="2" ry="2" />
<text  x="220.34" y="1823.5" ></text>
</g>
<g >
<title>GetPieceType (2 samples, 0.01%)</title><rect x="337.9" y="1781" width="0.2" height="15.0" fill="rgb(208,20,9)" rx="2" ry="2" />
<text  x="340.90" y="1791.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::find_node_impl&lt;lczero::Position, TTranspositionTable::TPositionEqualFn&gt; (2 samples, 0.01%)</title><rect x="105.8" y="1749" width="0.1" height="15.0" fill="rgb(228,78,48)" rx="2" ry="2" />
<text  x="108.80" y="1759.5" ></text>
</g>
<g >
<title>TTranspositionTable::Find (26 samples, 0.16%)</title><rect x="168.6" y="1861" width="2.0" height="15.0" fill="rgb(253,108,18)" rx="2" ry="2" />
<text  x="171.62" y="1871.5" ></text>
</g>
<g >
<title>lczero::BitBoard::get (6 samples, 0.04%)</title><rect x="299.4" y="1845" width="0.5" height="15.0" fill="rgb(205,83,13)" rx="2" ry="2" />
<text  x="302.40" y="1855.5" ></text>
</g>
<g >
<title>[unknown] (191 samples, 1.21%)</title><rect x="963.0" y="1093" width="14.2" height="15.0" fill="rgb(250,139,39)" rx="2" ry="2" />
<text  x="965.97" y="1103.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (3 samples, 0.02%)</title><rect x="65.0" y="1797" width="0.2" height="15.0" fill="rgb(206,212,25)" rx="2" ry="2" />
<text  x="67.99" y="1807.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::reserve (2 samples, 0.01%)</title><rect x="184.2" y="1829" width="0.2" height="15.0" fill="rgb(214,119,34)" rx="2" ry="2" />
<text  x="187.21" y="1839.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (2 samples, 0.01%)</title><rect x="526.0" y="1701" width="0.1" height="15.0" fill="rgb(241,207,26)" rx="2" ry="2" />
<text  x="528.99" y="1711.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::reserve_for_insert (2 samples, 0.01%)</title><rect x="270.2" y="1813" width="0.2" height="15.0" fill="rgb(233,171,35)" rx="2" ry="2" />
<text  x="273.23" y="1823.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (3 samples, 0.02%)</title><rect x="256.4" y="1797" width="0.2" height="15.0" fill="rgb(210,38,26)" rx="2" ry="2" />
<text  x="259.36" y="1807.5" ></text>
</g>
<g >
<title>[unknown] (101 samples, 0.64%)</title><rect x="963.0" y="165" width="7.5" height="15.0" fill="rgb(230,39,13)" rx="2" ry="2" />
<text  x="965.97" y="175.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::Mirror (2 samples, 0.01%)</title><rect x="288.5" y="1877" width="0.2" height="15.0" fill="rgb(230,213,30)" rx="2" ry="2" />
<text  x="291.51" y="1887.5" ></text>
</g>
<g >
<title>TTranspositionTable::Find (5 samples, 0.03%)</title><rect x="295.1" y="1861" width="0.4" height="15.0" fill="rgb(224,158,44)" rx="2" ry="2" />
<text  x="298.08" y="1871.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (4 samples, 0.03%)</title><rect x="109.5" y="1733" width="0.3" height="15.0" fill="rgb(225,6,36)" rx="2" ry="2" />
<text  x="112.45" y="1743.5" ></text>
</g>
<g >
<title>TTranspositionTable::TPositionEqualFn::operator (11 samples, 0.07%)</title><rect x="316.0" y="1797" width="0.9" height="15.0" fill="rgb(230,208,9)" rx="2" ry="2" />
<text  x="319.04" y="1807.5" ></text>
</g>
<g >
<title>__asan::GetCurrentThread (12 samples, 0.08%)</title><rect x="1107.8" y="2053" width="0.9" height="15.0" fill="rgb(207,135,31)" rx="2" ry="2" />
<text  x="1110.78" y="2063.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::find_node_impl&lt;lczero::Position, TTranspositionTable::TPositionEqualFn&gt; (7 samples, 0.04%)</title><rect x="244.4" y="1813" width="0.5" height="15.0" fill="rgb(241,47,3)" rx="2" ry="2" />
<text  x="247.42" y="1823.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::~_Rb_tree (2 samples, 0.01%)</title><rect x="74.8" y="1845" width="0.2" height="15.0" fill="rgb(226,228,4)" rx="2" ry="2" />
<text  x="77.83" y="1855.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (74 samples, 0.47%)</title><rect x="140.8" y="1797" width="5.5" height="15.0" fill="rgb(223,119,31)" rx="2" ry="2" />
<text  x="143.79" y="1807.5" ></text>
</g>
<g >
<title>TSearchStrategy::Search (8,923 samples, 56.42%)</title><rect x="291.8" y="1909" width="665.7" height="15.0" fill="rgb(246,163,51)" rx="2" ry="2" />
<text  x="294.79" y="1919.5" >TSearchStrategy::Search</text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (7 samples, 0.04%)</title><rect x="88.6" y="1781" width="0.6" height="15.0" fill="rgb(212,161,6)" rx="2" ry="2" />
<text  x="91.64" y="1791.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ChessBoard (2 samples, 0.01%)</title><rect x="499.4" y="1733" width="0.1" height="15.0" fill="rgb(235,83,1)" rx="2" ry="2" />
<text  x="502.35" y="1743.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_get_insert_equal_pos (43 samples, 0.27%)</title><rect x="209.4" y="1845" width="3.2" height="15.0" fill="rgb(227,148,15)" rx="2" ry="2" />
<text  x="212.43" y="1855.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (304 samples, 1.92%)</title><rect x="504.9" y="1749" width="22.7" height="15.0" fill="rgb(232,14,8)" rx="2" ry="2" />
<text  x="507.95" y="1759.5" >T..</text>
</g>
<g >
<title>TSearchStrategy::CalcMoveOrder (16 samples, 0.10%)</title><rect x="234.9" y="1893" width="1.2" height="15.0" fill="rgb(205,22,20)" rx="2" ry="2" />
<text  x="237.87" y="1903.5" ></text>
</g>
<g >
<title>__asan_region_is_poisoned (2 samples, 0.01%)</title><rect x="284.3" y="1829" width="0.2" height="15.0" fill="rgb(235,113,53)" rx="2" ry="2" />
<text  x="287.33" y="1839.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (2 samples, 0.01%)</title><rect x="502.6" y="1701" width="0.2" height="15.0" fill="rgb(234,163,8)" rx="2" ry="2" />
<text  x="505.64" y="1711.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::find_node_impl&lt;lczero::Position, TTranspositionTable::TPositionEqualFn&gt; (10 samples, 0.06%)</title><rect x="485.1" y="1749" width="0.7" height="15.0" fill="rgb(239,33,44)" rx="2" ry="2" />
<text  x="488.10" y="1759.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (3 samples, 0.02%)</title><rect x="304.7" y="1781" width="0.2" height="15.0" fill="rgb(251,44,40)" rx="2" ry="2" />
<text  x="307.70" y="1791.5" ></text>
</g>
<g >
<title>TTranspositionTable::TPositionEqualFn::operator (55 samples, 0.35%)</title><rect x="710.0" y="1781" width="4.2" height="15.0" fill="rgb(244,124,35)" rx="2" ry="2" />
<text  x="713.05" y="1791.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ApplyMove (2 samples, 0.01%)</title><rect x="471.9" y="1749" width="0.1" height="15.0" fill="rgb(249,3,39)" rx="2" ry="2" />
<text  x="474.90" y="1759.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (4 samples, 0.03%)</title><rect x="925.3" y="1829" width="0.3" height="15.0" fill="rgb(232,101,18)" rx="2" ry="2" />
<text  x="928.29" y="1839.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (2 samples, 0.01%)</title><rect x="251.3" y="1813" width="0.1" height="15.0" fill="rgb(234,93,12)" rx="2" ry="2" />
<text  x="254.28" y="1823.5" ></text>
</g>
<g >
<title>__sanitizer::Quarantine&lt;__asan::QuarantineCallback, __asan::AsanChunk&gt;::DoRecycle (2 samples, 0.01%)</title><rect x="983.1" y="1973" width="0.2" height="15.0" fill="rgb(241,22,9)" rx="2" ry="2" />
<text  x="986.11" y="1983.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (2 samples, 0.01%)</title><rect x="284.2" y="1829" width="0.1" height="15.0" fill="rgb(249,65,4)" rx="2" ry="2" />
<text  x="287.18" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (5 samples, 0.03%)</title><rect x="239.3" y="1861" width="0.4" height="15.0" fill="rgb(252,140,35)" rx="2" ry="2" />
<text  x="242.34" y="1871.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (4 samples, 0.03%)</title><rect x="513.5" y="1653" width="0.3" height="15.0" fill="rgb(245,78,36)" rx="2" ry="2" />
<text  x="516.45" y="1663.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::rehash_impl (2 samples, 0.01%)</title><rect x="270.2" y="1797" width="0.2" height="15.0" fill="rgb(210,27,0)" rx="2" ry="2" />
<text  x="273.23" y="1807.5" ></text>
</g>
<g >
<title>TTranspositionTable::Find (80 samples, 0.51%)</title><rect x="311.6" y="1845" width="6.0" height="15.0" fill="rgb(241,38,31)" rx="2" ry="2" />
<text  x="314.64" y="1855.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::~_Rb_tree (2 samples, 0.01%)</title><rect x="232.4" y="1925" width="0.2" height="15.0" fill="rgb(242,136,46)" rx="2" ry="2" />
<text  x="235.41" y="1935.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetBishopAttacks (3 samples, 0.02%)</title><rect x="121.0" y="1781" width="0.2" height="15.0" fill="rgb(221,85,43)" rx="2" ry="2" />
<text  x="124.02" y="1791.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (10 samples, 0.06%)</title><rect x="220.0" y="1845" width="0.8" height="15.0" fill="rgb(226,0,23)" rx="2" ry="2" />
<text  x="223.02" y="1855.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (4 samples, 0.03%)</title><rect x="292.0" y="1861" width="0.3" height="15.0" fill="rgb(223,95,50)" rx="2" ry="2" />
<text  x="295.02" y="1871.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (3 samples, 0.02%)</title><rect x="356.6" y="1781" width="0.3" height="15.0" fill="rgb(250,192,14)" rx="2" ry="2" />
<text  x="359.63" y="1791.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_emplace_equal&lt;int&amp;, TSearchNode&gt; (3 samples, 0.02%)</title><rect x="127.9" y="1813" width="0.2" height="15.0" fill="rgb(209,132,10)" rx="2" ry="2" />
<text  x="130.88" y="1823.5" ></text>
</g>
<g >
<title>CalcPSTScore (2 samples, 0.01%)</title><rect x="34.0" y="1829" width="0.2" height="15.0" fill="rgb(253,218,51)" rx="2" ry="2" />
<text  x="37.02" y="1839.5" ></text>
</g>
<g >
<title>std::array&lt;std::array&lt;int, 64ul&gt;, 6ul&gt;::at (2 samples, 0.01%)</title><rect x="52.5" y="1829" width="0.2" height="15.0" fill="rgb(212,89,11)" rx="2" ry="2" />
<text  x="55.53" y="1839.5" ></text>
</g>
<g >
<title>[unknown] (244 samples, 1.54%)</title><rect x="963.0" y="1733" width="18.2" height="15.0" fill="rgb(222,106,4)" rx="2" ry="2" />
<text  x="965.97" y="1743.5" ></text>
</g>
<g >
<title>GetPieceType (8 samples, 0.05%)</title><rect x="298.8" y="1845" width="0.6" height="15.0" fill="rgb(253,28,50)" rx="2" ry="2" />
<text  x="301.81" y="1855.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::back (2 samples, 0.01%)</title><rect x="521.4" y="1669" width="0.1" height="15.0" fill="rgb(252,58,41)" rx="2" ry="2" />
<text  x="524.36" y="1679.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::hash (56 samples, 0.35%)</title><rect x="53.8" y="1797" width="4.2" height="15.0" fill="rgb(217,107,9)" rx="2" ry="2" />
<text  x="56.79" y="1807.5" ></text>
</g>
<g >
<title>[unknown] (133 samples, 0.84%)</title><rect x="963.0" y="549" width="9.9" height="15.0" fill="rgb(230,6,31)" rx="2" ry="2" />
<text  x="965.97" y="559.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::~_Rb_tree (11 samples, 0.07%)</title><rect x="225.0" y="1877" width="0.8" height="15.0" fill="rgb(251,185,46)" rx="2" ry="2" />
<text  x="228.02" y="1887.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (2 samples, 0.01%)</title><rect x="319.0" y="1797" width="0.2" height="15.0" fill="rgb(231,219,15)" rx="2" ry="2" />
<text  x="322.03" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ApplyMove (5 samples, 0.03%)</title><rect x="499.0" y="1733" width="0.4" height="15.0" fill="rgb(216,2,51)" rx="2" ry="2" />
<text  x="501.98" y="1743.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetBishopAttacks (4 samples, 0.03%)</title><rect x="480.6" y="1749" width="0.3" height="15.0" fill="rgb(220,84,29)" rx="2" ry="2" />
<text  x="483.55" y="1759.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (2 samples, 0.01%)</title><rect x="239.5" y="1829" width="0.1" height="15.0" fill="rgb(225,162,12)" rx="2" ry="2" />
<text  x="242.49" y="1839.5" ></text>
</g>
<g >
<title>[unknown] (142 samples, 0.90%)</title><rect x="963.0" y="661" width="10.6" height="15.0" fill="rgb(212,178,10)" rx="2" ry="2" />
<text  x="965.97" y="671.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (2 samples, 0.01%)</title><rect x="414.6" y="1829" width="0.1" height="15.0" fill="rgb(222,195,53)" rx="2" ry="2" />
<text  x="417.60" y="1839.5" ></text>
</g>
<g >
<title>CalcPSTScore (2 samples, 0.01%)</title><rect x="319.8" y="1797" width="0.2" height="15.0" fill="rgb(221,205,20)" rx="2" ry="2" />
<text  x="322.85" y="1807.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetBishopAttacks (2 samples, 0.01%)</title><rect x="179.5" y="1829" width="0.2" height="15.0" fill="rgb(208,200,18)" rx="2" ry="2" />
<text  x="182.51" y="1839.5" ></text>
</g>
<g >
<title>[unknown] (108 samples, 0.68%)</title><rect x="963.0" y="261" width="8.0" height="15.0" fill="rgb(231,152,4)" rx="2" ry="2" />
<text  x="965.97" y="271.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (19 samples, 0.12%)</title><rect x="470.7" y="1781" width="1.4" height="15.0" fill="rgb(254,127,18)" rx="2" ry="2" />
<text  x="473.70" y="1791.5" ></text>
</g>
<g >
<title>lczero::Position::Position (22 samples, 0.14%)</title><rect x="220.9" y="1877" width="1.7" height="15.0" fill="rgb(253,210,17)" rx="2" ry="2" />
<text  x="223.92" y="1887.5" ></text>
</g>
<g >
<title>__asan::GetCurrentThread (4 samples, 0.03%)</title><rect x="569.9" y="1813" width="0.3" height="15.0" fill="rgb(249,30,6)" rx="2" ry="2" />
<text  x="572.86" y="1823.5" ></text>
</g>
<g >
<title>__asan_memcpy (3 samples, 0.02%)</title><rect x="221.3" y="1861" width="0.2" height="15.0" fill="rgb(207,78,30)" rx="2" ry="2" />
<text  x="224.29" y="1871.5" ></text>
</g>
<g >
<title>lczero::Position::Position (4 samples, 0.03%)</title><rect x="953.6" y="1877" width="0.3" height="15.0" fill="rgb(248,101,20)" rx="2" ry="2" />
<text  x="956.64" y="1887.5" ></text>
</g>
<g >
<title>[unknown] (273 samples, 1.73%)</title><rect x="963.0" y="2005" width="20.3" height="15.0" fill="rgb(218,105,44)" rx="2" ry="2" />
<text  x="965.97" y="2015.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (25 samples, 0.16%)</title><rect x="125.7" y="1749" width="1.9" height="15.0" fill="rgb(252,212,47)" rx="2" ry="2" />
<text  x="128.72" y="1759.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::back (3 samples, 0.02%)</title><rect x="535.3" y="1733" width="0.2" height="15.0" fill="rgb(250,211,16)" rx="2" ry="2" />
<text  x="538.31" y="1743.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (221 samples, 1.40%)</title><rect x="151.9" y="1845" width="16.5" height="15.0" fill="rgb(210,112,40)" rx="2" ry="2" />
<text  x="154.90" y="1855.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_construct_node&lt;int&amp;, TSearchNode&gt; (7 samples, 0.04%)</title><rect x="284.2" y="1845" width="0.5" height="15.0" fill="rgb(236,60,50)" rx="2" ry="2" />
<text  x="287.18" y="1855.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.01%)</title><rect x="973.0" y="565" width="0.2" height="15.0" fill="rgb(230,75,20)" rx="2" ry="2" />
<text  x="976.04" y="575.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (3 samples, 0.02%)</title><rect x="25.4" y="1893" width="0.3" height="15.0" fill="rgb(225,3,29)" rx="2" ry="2" />
<text  x="28.44" y="1903.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (3 samples, 0.02%)</title><rect x="358.5" y="1781" width="0.2" height="15.0" fill="rgb(248,56,41)" rx="2" ry="2" />
<text  x="361.49" y="1791.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (5 samples, 0.03%)</title><rect x="112.4" y="1733" width="0.4" height="15.0" fill="rgb(230,191,0)" rx="2" ry="2" />
<text  x="115.44" y="1743.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (2 samples, 0.01%)</title><rect x="239.2" y="1813" width="0.1" height="15.0" fill="rgb(226,8,25)" rx="2" ry="2" />
<text  x="242.20" y="1823.5" ></text>
</g>
<g >
<title>boost::unordered::unordered_map&lt;lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt; &gt;::find (3 samples, 0.02%)</title><rect x="172.2" y="1845" width="0.2" height="15.0" fill="rgb(226,174,23)" rx="2" ry="2" />
<text  x="175.20" y="1855.5" ></text>
</g>
<g >
<title>boost::unordered::unordered_map&lt;lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt; &gt;::find (2 samples, 0.01%)</title><rect x="233.9" y="1877" width="0.1" height="15.0" fill="rgb(247,134,25)" rx="2" ry="2" />
<text  x="236.90" y="1887.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_create_node&lt;int&amp;, TSearchNode&gt; (17 samples, 0.11%)</title><rect x="228.7" y="1877" width="1.2" height="15.0" fill="rgb(207,108,33)" rx="2" ry="2" />
<text  x="231.68" y="1887.5" ></text>
</g>
<g >
<title>[unknown] (116 samples, 0.73%)</title><rect x="963.0" y="357" width="8.6" height="15.0" fill="rgb(242,51,49)" rx="2" ry="2" />
<text  x="965.97" y="367.5" ></text>
</g>
<g >
<title>boost::unordered::unordered_map&lt;lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt; &gt;::find (9 samples, 0.06%)</title><rect x="493.3" y="1749" width="0.7" height="15.0" fill="rgb(207,223,13)" rx="2" ry="2" />
<text  x="496.31" y="1759.5" ></text>
</g>
<g >
<title>lczero::Position::Position (19 samples, 0.12%)</title><rect x="468.0" y="1797" width="1.4" height="15.0" fill="rgb(228,13,7)" rx="2" ry="2" />
<text  x="471.02" y="1807.5" ></text>
</g>
<g >
<title>CalcPSTScore (2 samples, 0.01%)</title><rect x="514.3" y="1637" width="0.1" height="15.0" fill="rgb(226,130,18)" rx="2" ry="2" />
<text  x="517.28" y="1647.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::knights (4 samples, 0.03%)</title><rect x="341.7" y="1813" width="0.3" height="15.0" fill="rgb(238,210,16)" rx="2" ry="2" />
<text  x="344.71" y="1823.5" ></text>
</g>
<g >
<title>std::array&lt;int, 64ul&gt;::operator[] (5 samples, 0.03%)</title><rect x="477.9" y="1781" width="0.3" height="15.0" fill="rgb(247,109,49)" rx="2" ry="2" />
<text  x="480.87" y="1791.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetBishopAttacks (3 samples, 0.02%)</title><rect x="337.1" y="1765" width="0.2" height="15.0" fill="rgb(225,99,17)" rx="2" ry="2" />
<text  x="340.08" y="1775.5" ></text>
</g>
<g >
<title>boost::unordered::detail::func::construct_node_pair&lt;std::allocator&lt;boost::unordered::detail::ptr_node&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt; &gt;, lczero::Position const&amp;, TTranspositionTable::TNode&gt; (4 samples, 0.03%)</title><rect x="170.6" y="1829" width="0.3" height="15.0" fill="rgb(228,122,17)" rx="2" ry="2" />
<text  x="173.63" y="1839.5" ></text>
</g>
<g >
<title>__sanitizer::SizeClassAllocator64&lt;__asan::AP64&gt;::ReturnToAllocator (2 samples, 0.01%)</title><rect x="1150.5" y="2053" width="0.1" height="15.0" fill="rgb(247,217,50)" rx="2" ry="2" />
<text  x="1153.46" y="2063.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (2 samples, 0.01%)</title><rect x="356.6" y="1765" width="0.2" height="15.0" fill="rgb(216,71,21)" rx="2" ry="2" />
<text  x="359.63" y="1775.5" ></text>
</g>
<g >
<title>[unknown] (232 samples, 1.47%)</title><rect x="963.0" y="1605" width="17.3" height="15.0" fill="rgb(232,77,6)" rx="2" ry="2" />
<text  x="965.97" y="1615.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::begin (10 samples, 0.06%)</title><rect x="169.4" y="1813" width="0.8" height="15.0" fill="rgb(237,69,52)" rx="2" ry="2" />
<text  x="172.44" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (3 samples, 0.02%)</title><rect x="320.6" y="1829" width="0.2" height="15.0" fill="rgb(250,89,33)" rx="2" ry="2" />
<text  x="323.59" y="1839.5" ></text>
</g>
<g >
<title>[unknown] (112 samples, 0.71%)</title><rect x="963.0" y="309" width="8.3" height="15.0" fill="rgb(244,206,47)" rx="2" ry="2" />
<text  x="965.97" y="319.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_emplace_equal&lt;int&amp;, TSearchNode&gt; (4 samples, 0.03%)</title><rect x="116.1" y="1797" width="0.3" height="15.0" fill="rgb(228,91,11)" rx="2" ry="2" />
<text  x="119.09" y="1807.5" ></text>
</g>
<g >
<title>lczero::Position::Position (4 samples, 0.03%)</title><rect x="353.9" y="1813" width="0.3" height="15.0" fill="rgb(243,87,10)" rx="2" ry="2" />
<text  x="356.94" y="1823.5" ></text>
</g>
<g >
<title>[unknown] (265 samples, 1.68%)</title><rect x="963.0" y="1893" width="19.7" height="15.0" fill="rgb(212,202,39)" rx="2" ry="2" />
<text  x="965.97" y="1903.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (3 samples, 0.02%)</title><rect x="25.4" y="1909" width="0.3" height="15.0" fill="rgb(218,228,7)" rx="2" ry="2" />
<text  x="28.44" y="1919.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (56 samples, 0.35%)</title><rect x="478.2" y="1797" width="4.2" height="15.0" fill="rgb(237,105,53)" rx="2" ry="2" />
<text  x="481.24" y="1807.5" ></text>
</g>
<g >
<title>std::array&lt;int, 2ul&gt;::operator[] (8 samples, 0.05%)</title><rect x="865.6" y="1829" width="0.6" height="15.0" fill="rgb(246,72,34)" rx="2" ry="2" />
<text  x="868.60" y="1839.5" ></text>
</g>
<g >
<title>std::array&lt;lczero::Move, 64ul&gt;::at (2 samples, 0.01%)</title><rect x="294.9" y="1845" width="0.2" height="15.0" fill="rgb(216,161,37)" rx="2" ry="2" />
<text  x="297.93" y="1855.5" ></text>
</g>
<g >
<title>GetPieceValue (3 samples, 0.02%)</title><rect x="481.4" y="1781" width="0.3" height="15.0" fill="rgb(244,217,19)" rx="2" ry="2" />
<text  x="484.45" y="1791.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetRookAttacks (3 samples, 0.02%)</title><rect x="922.5" y="1829" width="0.3" height="15.0" fill="rgb(250,160,37)" rx="2" ry="2" />
<text  x="925.53" y="1839.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::resize_and_add_node_unique (14 samples, 0.09%)</title><rect x="171.1" y="1829" width="1.0" height="15.0" fill="rgb(230,149,43)" rx="2" ry="2" />
<text  x="174.08" y="1839.5" ></text>
</g>
<g >
<title>[unknown] (256 samples, 1.62%)</title><rect x="963.0" y="1845" width="19.1" height="15.0" fill="rgb(205,107,42)" rx="2" ry="2" />
<text  x="965.97" y="1855.5" ></text>
</g>
<g >
<title>GetPieceType (16 samples, 0.10%)</title><rect x="77.7" y="1829" width="1.2" height="15.0" fill="rgb(239,21,40)" rx="2" ry="2" />
<text  x="80.74" y="1839.5" ></text>
</g>
<g >
<title>operator new (9 samples, 0.06%)</title><rect x="896.2" y="1813" width="0.7" height="15.0" fill="rgb(249,223,6)" rx="2" ry="2" />
<text  x="899.19" y="1823.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (2 samples, 0.01%)</title><rect x="878.2" y="1813" width="0.2" height="15.0" fill="rgb(253,142,28)" rx="2" ry="2" />
<text  x="881.21" y="1823.5" ></text>
</g>
<g >
<title>lczero::Position::Position (4 samples, 0.03%)</title><rect x="49.5" y="1813" width="0.3" height="15.0" fill="rgb(217,143,52)" rx="2" ry="2" />
<text  x="52.54" y="1823.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_create_node&lt;int&amp;, TSearchNode&gt; (2 samples, 0.01%)</title><rect x="232.0" y="1893" width="0.1" height="15.0" fill="rgb(242,185,23)" rx="2" ry="2" />
<text  x="234.96" y="1903.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::begin (2 samples, 0.01%)</title><rect x="103.0" y="1749" width="0.2" height="15.0" fill="rgb(250,215,1)" rx="2" ry="2" />
<text  x="106.04" y="1759.5" ></text>
</g>
<g >
<title>boost::unordered::unordered_map&lt;lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt; &gt;::find (8 samples, 0.05%)</title><rect x="235.4" y="1861" width="0.6" height="15.0" fill="rgb(220,99,20)" rx="2" ry="2" />
<text  x="238.39" y="1871.5" ></text>
</g>
<g >
<title>__sanitizer::mem_is_zero (2 samples, 0.01%)</title><rect x="284.5" y="1829" width="0.1" height="15.0" fill="rgb(234,214,0)" rx="2" ry="2" />
<text  x="287.48" y="1839.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (7 samples, 0.04%)</title><rect x="238.8" y="1861" width="0.5" height="15.0" fill="rgb(248,221,38)" rx="2" ry="2" />
<text  x="241.82" y="1871.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (3 samples, 0.02%)</title><rect x="970.2" y="133" width="0.2" height="15.0" fill="rgb(252,64,35)" rx="2" ry="2" />
<text  x="973.20" y="143.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_insert_node (5 samples, 0.03%)</title><rect x="280.0" y="1845" width="0.4" height="15.0" fill="rgb(235,155,33)" rx="2" ry="2" />
<text  x="283.01" y="1855.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (63 samples, 0.40%)</title><rect x="878.4" y="1813" width="4.7" height="15.0" fill="rgb(212,60,42)" rx="2" ry="2" />
<text  x="881.36" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateKingAttackInfo (2 samples, 0.01%)</title><rect x="270.7" y="1845" width="0.1" height="15.0" fill="rgb(233,69,36)" rx="2" ry="2" />
<text  x="273.68" y="1855.5" ></text>
</g>
<g >
<title>[unknown] (126 samples, 0.80%)</title><rect x="998.0" y="2021" width="9.4" height="15.0" fill="rgb(250,198,13)" rx="2" ry="2" />
<text  x="1001.03" y="2031.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (2 samples, 0.01%)</title><rect x="358.2" y="1749" width="0.1" height="15.0" fill="rgb(221,80,35)" rx="2" ry="2" />
<text  x="361.20" y="1759.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (69 samples, 0.44%)</title><rect x="163.0" y="1797" width="5.2" height="15.0" fill="rgb(225,140,40)" rx="2" ry="2" />
<text  x="166.02" y="1807.5" ></text>
</g>
<g >
<title>__asan_memset (2 samples, 0.01%)</title><rect x="570.5" y="1813" width="0.2" height="15.0" fill="rgb(216,107,18)" rx="2" ry="2" />
<text  x="573.53" y="1823.5" ></text>
</g>
<g >
<title>time_benchmark::test_method (8,940 samples, 56.53%)</title><rect x="291.6" y="2005" width="667.0" height="15.0" fill="rgb(219,142,53)" rx="2" ry="2" />
<text  x="294.57" y="2015.5" >time_benchmark::test_method</text>
</g>
<g >
<title>lczero::BitBoard::get (13 samples, 0.08%)</title><rect x="85.3" y="1813" width="0.9" height="15.0" fill="rgb(235,124,41)" rx="2" ry="2" />
<text  x="88.28" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (325 samples, 2.05%)</title><rect x="675.9" y="1749" width="24.2" height="15.0" fill="rgb(226,197,25)" rx="2" ry="2" />
<text  x="678.88" y="1759.5" >l..</text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (7 samples, 0.04%)</title><rect x="517.3" y="1653" width="0.5" height="15.0" fill="rgb(247,101,39)" rx="2" ry="2" />
<text  x="520.26" y="1663.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (2 samples, 0.01%)</title><rect x="490.4" y="1733" width="0.2" height="15.0" fill="rgb(247,141,37)" rx="2" ry="2" />
<text  x="493.40" y="1743.5" ></text>
</g>
<g >
<title>TTranspositionTable::Find (3 samples, 0.02%)</title><rect x="226.1" y="1893" width="0.2" height="15.0" fill="rgb(221,125,42)" rx="2" ry="2" />
<text  x="229.06" y="1903.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare&gt; (5 samples, 0.03%)</title><rect x="140.0" y="1797" width="0.3" height="15.0" fill="rgb(230,75,23)" rx="2" ry="2" />
<text  x="142.97" y="1807.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::begin (4 samples, 0.03%)</title><rect x="350.6" y="1781" width="0.3" height="15.0" fill="rgb(246,201,7)" rx="2" ry="2" />
<text  x="353.59" y="1791.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (4 samples, 0.03%)</title><rect x="957.2" y="1845" width="0.3" height="15.0" fill="rgb(248,3,5)" rx="2" ry="2" />
<text  x="960.22" y="1855.5" ></text>
</g>
<g >
<title>[unknown] (177 samples, 1.12%)</title><rect x="963.0" y="1029" width="13.2" height="15.0" fill="rgb(208,90,14)" rx="2" ry="2" />
<text  x="965.97" y="1039.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (7 samples, 0.04%)</title><rect x="242.8" y="1829" width="0.5" height="15.0" fill="rgb(229,48,44)" rx="2" ry="2" />
<text  x="245.78" y="1839.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (3 samples, 0.02%)</title><rect x="939.6" y="1813" width="0.2" height="15.0" fill="rgb(251,136,40)" rx="2" ry="2" />
<text  x="942.62" y="1823.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (2 samples, 0.01%)</title><rect x="295.7" y="1845" width="0.1" height="15.0" fill="rgb(228,28,38)" rx="2" ry="2" />
<text  x="298.67" y="1855.5" ></text>
</g>
<g >
<title>std::array&lt;int, 2ul&gt;::operator[] (2 samples, 0.01%)</title><rect x="106.6" y="1765" width="0.2" height="15.0" fill="rgb(253,183,43)" rx="2" ry="2" />
<text  x="109.62" y="1775.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (2 samples, 0.01%)</title><rect x="232.4" y="1909" width="0.2" height="15.0" fill="rgb(252,50,42)" rx="2" ry="2" />
<text  x="235.41" y="1919.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (6 samples, 0.04%)</title><rect x="516.7" y="1669" width="0.5" height="15.0" fill="rgb(225,162,18)" rx="2" ry="2" />
<text  x="519.74" y="1679.5" ></text>
</g>
<g >
<title>lczero::Position::Position (3 samples, 0.02%)</title><rect x="243.1" y="1813" width="0.2" height="15.0" fill="rgb(212,18,13)" rx="2" ry="2" />
<text  x="246.08" y="1823.5" ></text>
</g>
<g >
<title>[unknown] (215 samples, 1.36%)</title><rect x="963.0" y="1413" width="16.0" height="15.0" fill="rgb(249,198,53)" rx="2" ry="2" />
<text  x="965.97" y="1423.5" ></text>
</g>
<g >
<title>__asan_region_is_poisoned (20 samples, 0.13%)</title><rect x="899.9" y="1797" width="1.5" height="15.0" fill="rgb(247,48,27)" rx="2" ry="2" />
<text  x="902.92" y="1807.5" ></text>
</g>
<g >
<title>std::array&lt;int, 64ul&gt;::operator[] (2 samples, 0.01%)</title><rect x="128.2" y="1813" width="0.1" height="15.0" fill="rgb(207,73,41)" rx="2" ry="2" />
<text  x="131.18" y="1823.5" ></text>
</g>
<g >
<title>lczero::Position::Position (9 samples, 0.06%)</title><rect x="50.1" y="1829" width="0.7" height="15.0" fill="rgb(218,172,31)" rx="2" ry="2" />
<text  x="53.14" y="1839.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::insert_or_assign_unique&lt;lczero::Position const&amp;, TTranspositionTable::TNode&gt; (19 samples, 0.12%)</title><rect x="868.7" y="1829" width="1.5" height="15.0" fill="rgb(242,18,21)" rx="2" ry="2" />
<text  x="871.74" y="1839.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (14 samples, 0.09%)</title><rect x="492.2" y="1765" width="1.0" height="15.0" fill="rgb(208,118,48)" rx="2" ry="2" />
<text  x="495.19" y="1775.5" ></text>
</g>
<g >
<title>__sanitizer::StackDepotBase&lt;__sanitizer::StackDepotNode, 1, 20&gt;::Put (3 samples, 0.02%)</title><rect x="66.3" y="1845" width="0.2" height="15.0" fill="rgb(218,137,1)" rx="2" ry="2" />
<text  x="69.25" y="1855.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (3 samples, 0.02%)</title><rect x="114.5" y="1765" width="0.2" height="15.0" fill="rgb(224,112,44)" rx="2" ry="2" />
<text  x="117.53" y="1775.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (7 samples, 0.04%)</title><rect x="227.3" y="1861" width="0.5" height="15.0" fill="rgb(229,74,14)" rx="2" ry="2" />
<text  x="230.26" y="1871.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::hash (7 samples, 0.04%)</title><rect x="148.5" y="1797" width="0.6" height="15.0" fill="rgb(227,152,35)" rx="2" ry="2" />
<text  x="151.55" y="1807.5" ></text>
</g>
<g >
<title>__asan_region_is_poisoned (2 samples, 0.01%)</title><rect x="550.2" y="1733" width="0.2" height="15.0" fill="rgb(211,129,49)" rx="2" ry="2" />
<text  x="553.24" y="1743.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsUnderAttack (12 samples, 0.08%)</title><rect x="136.2" y="1797" width="0.9" height="15.0" fill="rgb(235,153,17)" rx="2" ry="2" />
<text  x="139.24" y="1807.5" ></text>
</g>
<g >
<title>std::array&lt;int, 64ul&gt;::operator[] (9 samples, 0.06%)</title><rect x="707.3" y="1813" width="0.7" height="15.0" fill="rgb(247,23,44)" rx="2" ry="2" />
<text  x="710.29" y="1823.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::reserve_for_insert (9 samples, 0.06%)</title><rect x="869.3" y="1797" width="0.7" height="15.0" fill="rgb(252,78,23)" rx="2" ry="2" />
<text  x="872.33" y="1807.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::~_Rb_tree (2 samples, 0.01%)</title><rect x="706.2" y="1813" width="0.1" height="15.0" fill="rgb(216,7,48)" rx="2" ry="2" />
<text  x="709.17" y="1823.5" ></text>
</g>
<g >
<title>std::array&lt;int, 64ul&gt;::operator[] (7 samples, 0.04%)</title><rect x="44.0" y="1845" width="0.5" height="15.0" fill="rgb(221,228,36)" rx="2" ry="2" />
<text  x="47.02" y="1855.5" ></text>
</g>
<g >
<title>std::array&lt;int, 2ul&gt;::operator[] (2 samples, 0.01%)</title><rect x="567.2" y="1797" width="0.2" height="15.0" fill="rgb(242,120,43)" rx="2" ry="2" />
<text  x="570.25" y="1807.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (2 samples, 0.01%)</title><rect x="358.0" y="1717" width="0.2" height="15.0" fill="rgb(250,212,14)" rx="2" ry="2" />
<text  x="361.05" y="1727.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::_M_erase (8 samples, 0.05%)</title><rect x="703.1" y="1781" width="0.6" height="15.0" fill="rgb(215,143,10)" rx="2" ry="2" />
<text  x="706.11" y="1791.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetRookAttacks (2 samples, 0.01%)</title><rect x="535.2" y="1717" width="0.1" height="15.0" fill="rgb(236,172,32)" rx="2" ry="2" />
<text  x="538.17" y="1727.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetRookAttacks (2 samples, 0.01%)</title><rect x="544.3" y="1733" width="0.2" height="15.0" fill="rgb(229,36,39)" rx="2" ry="2" />
<text  x="547.34" y="1743.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetRookAttacks (2 samples, 0.01%)</title><rect x="305.4" y="1781" width="0.2" height="15.0" fill="rgb(236,5,45)" rx="2" ry="2" />
<text  x="308.45" y="1791.5" ></text>
</g>
<g >
<title>lczero::BitBoard::get (5 samples, 0.03%)</title><rect x="253.8" y="1829" width="0.4" height="15.0" fill="rgb(210,171,10)" rx="2" ry="2" />
<text  x="256.82" y="1839.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (27 samples, 0.17%)</title><rect x="216.3" y="1845" width="2.0" height="15.0" fill="rgb(234,147,18)" rx="2" ry="2" />
<text  x="219.29" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (15 samples, 0.09%)</title><rect x="111.8" y="1781" width="1.2" height="15.0" fill="rgb(214,76,7)" rx="2" ry="2" />
<text  x="114.84" y="1791.5" ></text>
</g>
<g >
<title>CalcPSTScore (86 samples, 0.54%)</title><rect x="38.1" y="1861" width="6.4" height="15.0" fill="rgb(252,15,50)" rx="2" ry="2" />
<text  x="41.13" y="1871.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (4 samples, 0.03%)</title><rect x="140.5" y="1797" width="0.3" height="15.0" fill="rgb(252,55,3)" rx="2" ry="2" />
<text  x="143.49" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (4 samples, 0.03%)</title><rect x="258.9" y="1749" width="0.3" height="15.0" fill="rgb(228,14,6)" rx="2" ry="2" />
<text  x="261.89" y="1759.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsUnderAttack (8 samples, 0.05%)</title><rect x="364.6" y="1797" width="0.6" height="15.0" fill="rgb(205,135,26)" rx="2" ry="2" />
<text  x="367.61" y="1807.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (72 samples, 0.46%)</title><rect x="512.4" y="1701" width="5.4" height="15.0" fill="rgb(243,83,41)" rx="2" ry="2" />
<text  x="515.41" y="1711.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::resize_and_add_node_unique (10 samples, 0.06%)</title><rect x="869.3" y="1813" width="0.7" height="15.0" fill="rgb(232,138,49)" rx="2" ry="2" />
<text  x="872.26" y="1823.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_emplace_equal&lt;int&amp;, TSearchNode&gt; (3 samples, 0.02%)</title><rect x="232.0" y="1909" width="0.2" height="15.0" fill="rgb(235,8,44)" rx="2" ry="2" />
<text  x="234.96" y="1919.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::find_node (60 samples, 0.38%)</title><rect x="53.5" y="1813" width="4.5" height="15.0" fill="rgb(246,69,43)" rx="2" ry="2" />
<text  x="56.50" y="1823.5" ></text>
</g>
<g >
<title>std::array&lt;std::array&lt;std::array&lt;int, 64ul&gt;, 6ul&gt;, 2ul&gt;::at (2 samples, 0.01%)</title><rect x="52.7" y="1829" width="0.1" height="15.0" fill="rgb(230,0,24)" rx="2" ry="2" />
<text  x="55.68" y="1839.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_emplace_equal&lt;int&amp;, TSearchNode&gt; (3 samples, 0.02%)</title><rect x="540.2" y="1765" width="0.2" height="15.0" fill="rgb(245,6,44)" rx="2" ry="2" />
<text  x="543.16" y="1775.5" ></text>
</g>
<g >
<title>std::array&lt;int, 2ul&gt;::fill (3 samples, 0.02%)</title><rect x="79.9" y="1829" width="0.2" height="15.0" fill="rgb(205,89,43)" rx="2" ry="2" />
<text  x="82.91" y="1839.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_create_node&lt;int&amp;, TSearchNode&gt; (18 samples, 0.11%)</title><rect x="222.8" y="1861" width="1.3" height="15.0" fill="rgb(244,129,39)" rx="2" ry="2" />
<text  x="225.78" y="1871.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::~_Rb_tree (13 samples, 0.08%)</title><rect x="1019.1" y="2037" width="0.9" height="15.0" fill="rgb(240,69,35)" rx="2" ry="2" />
<text  x="1022.07" y="2047.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (54 samples, 0.34%)</title><rect x="561.7" y="1749" width="4.0" height="15.0" fill="rgb(237,225,3)" rx="2" ry="2" />
<text  x="564.65" y="1759.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (47 samples, 0.30%)</title><rect x="513.2" y="1685" width="3.5" height="15.0" fill="rgb(216,21,15)" rx="2" ry="2" />
<text  x="516.23" y="1695.5" ></text>
</g>
<g >
<title>lczero::Position::Hash (35 samples, 0.22%)</title><rect x="312.9" y="1781" width="2.6" height="15.0" fill="rgb(245,191,54)" rx="2" ry="2" />
<text  x="315.91" y="1791.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (11 samples, 0.07%)</title><rect x="361.3" y="1781" width="0.8" height="15.0" fill="rgb(214,131,22)" rx="2" ry="2" />
<text  x="364.33" y="1791.5" ></text>
</g>
<g >
<title>IsCapture (5 samples, 0.03%)</title><rect x="510.2" y="1717" width="0.4" height="15.0" fill="rgb(219,126,7)" rx="2" ry="2" />
<text  x="513.25" y="1727.5" ></text>
</g>
<g >
<title>lczero::Position::Position (2 samples, 0.01%)</title><rect x="497.6" y="1717" width="0.2" height="15.0" fill="rgb(228,96,27)" rx="2" ry="2" />
<text  x="500.64" y="1727.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (8 samples, 0.05%)</title><rect x="358.8" y="1797" width="0.6" height="15.0" fill="rgb(231,131,5)" rx="2" ry="2" />
<text  x="361.79" y="1807.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::back (2 samples, 0.01%)</title><rect x="267.2" y="1797" width="0.2" height="15.0" fill="rgb(246,178,43)" rx="2" ry="2" />
<text  x="270.25" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (2 samples, 0.01%)</title><rect x="320.4" y="1813" width="0.2" height="15.0" fill="rgb(240,156,29)" rx="2" ry="2" />
<text  x="323.44" y="1823.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (16 samples, 0.10%)</title><rect x="114.7" y="1781" width="1.2" height="15.0" fill="rgb(213,186,50)" rx="2" ry="2" />
<text  x="117.75" y="1791.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (3 samples, 0.02%)</title><rect x="492.4" y="1717" width="0.2" height="15.0" fill="rgb(230,70,22)" rx="2" ry="2" />
<text  x="495.42" y="1727.5" ></text>
</g>
<g >
<title>__pthread_getspecific (5 samples, 0.03%)</title><rect x="813.6" y="1781" width="0.4" height="15.0" fill="rgb(235,199,17)" rx="2" ry="2" />
<text  x="816.60" y="1791.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (4 samples, 0.03%)</title><rect x="356.6" y="1797" width="0.3" height="15.0" fill="rgb(214,101,36)" rx="2" ry="2" />
<text  x="359.63" y="1807.5" ></text>
</g>
<g >
<title>[unknown] (179 samples, 1.13%)</title><rect x="963.0" y="1045" width="13.3" height="15.0" fill="rgb(214,92,44)" rx="2" ry="2" />
<text  x="965.97" y="1055.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::begin (9 samples, 0.06%)</title><rect x="58.9" y="1797" width="0.7" height="15.0" fill="rgb(221,28,25)" rx="2" ry="2" />
<text  x="61.94" y="1807.5" ></text>
</g>
<g >
<title>lczero::Position::Position (8 samples, 0.05%)</title><rect x="90.6" y="1797" width="0.6" height="15.0" fill="rgb(249,203,4)" rx="2" ry="2" />
<text  x="93.58" y="1807.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.01%)</title><rect x="223.0" y="1845" width="0.2" height="15.0" fill="rgb(253,224,13)" rx="2" ry="2" />
<text  x="226.01" y="1855.5" ></text>
</g>
<g >
<title>CalcPSTScore (19 samples, 0.12%)</title><rect x="351.5" y="1829" width="1.4" height="15.0" fill="rgb(252,55,14)" rx="2" ry="2" />
<text  x="354.48" y="1839.5" ></text>
</g>
<g >
<title>[unknown] (140 samples, 0.89%)</title><rect x="963.0" y="629" width="10.4" height="15.0" fill="rgb(208,88,1)" rx="2" ry="2" />
<text  x="965.97" y="639.5" ></text>
</g>
<g >
<title>GetPieceValue (5 samples, 0.03%)</title><rect x="337.7" y="1797" width="0.4" height="15.0" fill="rgb(207,13,19)" rx="2" ry="2" />
<text  x="340.68" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::kings (3 samples, 0.02%)</title><rect x="395.4" y="1797" width="0.2" height="15.0" fill="rgb(232,58,46)" rx="2" ry="2" />
<text  x="398.35" y="1807.5" ></text>
</g>
<g >
<title>boost::unordered::unordered_map&lt;lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt; &gt;::find (4 samples, 0.03%)</title><rect x="295.2" y="1845" width="0.3" height="15.0" fill="rgb(236,88,33)" rx="2" ry="2" />
<text  x="298.15" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (2 samples, 0.01%)</title><rect x="358.0" y="1733" width="0.2" height="15.0" fill="rgb(214,128,2)" rx="2" ry="2" />
<text  x="361.05" y="1743.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.01%)</title><rect x="974.9" y="901" width="0.2" height="15.0" fill="rgb(245,90,47)" rx="2" ry="2" />
<text  x="977.91" y="911.5" ></text>
</g>
<g >
<title>TSearchStrategy::Search (8 samples, 0.05%)</title><rect x="25.1" y="1941" width="0.6" height="15.0" fill="rgb(242,114,14)" rx="2" ry="2" />
<text  x="28.07" y="1951.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (7 samples, 0.04%)</title><rect x="34.8" y="1845" width="0.5" height="15.0" fill="rgb(218,190,25)" rx="2" ry="2" />
<text  x="37.77" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (10 samples, 0.06%)</title><rect x="109.9" y="1749" width="0.7" height="15.0" fill="rgb(233,190,42)" rx="2" ry="2" />
<text  x="112.90" y="1759.5" ></text>
</g>
<g >
<title>[unknown] (176 samples, 1.11%)</title><rect x="963.0" y="1013" width="13.1" height="15.0" fill="rgb(212,131,8)" rx="2" ry="2" />
<text  x="965.97" y="1023.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsUnderAttack (4 samples, 0.03%)</title><rect x="272.8" y="1829" width="0.3" height="15.0" fill="rgb(224,229,24)" rx="2" ry="2" />
<text  x="275.84" y="1839.5" ></text>
</g>
<g >
<title>[unknown] (13,584 samples, 85.89%)</title><rect x="16.0" y="2053" width="1013.4" height="15.0" fill="rgb(224,34,19)" rx="2" ry="2" />
<text  x="18.97" y="2063.5" >[unknown]</text>
</g>
<g >
<title>operator delete (11 samples, 0.07%)</title><rect x="864.6" y="1829" width="0.9" height="15.0" fill="rgb(217,123,16)" rx="2" ry="2" />
<text  x="867.63" y="1839.5" ></text>
</g>
<g >
<title>__asan_memcpy (7 samples, 0.04%)</title><rect x="206.1" y="1813" width="0.6" height="15.0" fill="rgb(215,87,0)" rx="2" ry="2" />
<text  x="209.14" y="1823.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (30 samples, 0.19%)</title><rect x="274.1" y="1845" width="2.3" height="15.0" fill="rgb(231,114,6)" rx="2" ry="2" />
<text  x="277.11" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (197 samples, 1.25%)</title><rect x="551.1" y="1797" width="14.7" height="15.0" fill="rgb(208,179,10)" rx="2" ry="2" />
<text  x="554.13" y="1807.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_get_insert_equal_pos (4 samples, 0.03%)</title><rect x="224.7" y="1877" width="0.3" height="15.0" fill="rgb(251,216,6)" rx="2" ry="2" />
<text  x="227.72" y="1887.5" ></text>
</g>
<g >
<title>__asan::PoisonShadow (70 samples, 0.44%)</title><rect x="1109.5" y="2053" width="5.2" height="15.0" fill="rgb(251,10,25)" rx="2" ry="2" />
<text  x="1112.50" y="2063.5" ></text>
</g>
<g >
<title>[unknown] (206 samples, 1.30%)</title><rect x="963.0" y="1317" width="15.3" height="15.0" fill="rgb(231,164,44)" rx="2" ry="2" />
<text  x="965.97" y="1327.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (42 samples, 0.27%)</title><rect x="356.3" y="1813" width="3.1" height="15.0" fill="rgb(221,47,19)" rx="2" ry="2" />
<text  x="359.26" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::Mirror (3 samples, 0.02%)</title><rect x="469.2" y="1781" width="0.2" height="15.0" fill="rgb(254,13,16)" rx="2" ry="2" />
<text  x="472.21" y="1791.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (60 samples, 0.38%)</title><rect x="107.3" y="1781" width="4.5" height="15.0" fill="rgb(214,8,37)" rx="2" ry="2" />
<text  x="110.29" y="1791.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::hash (4 samples, 0.03%)</title><rect x="95.4" y="1765" width="0.2" height="15.0" fill="rgb(241,58,5)" rx="2" ry="2" />
<text  x="98.35" y="1775.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (36 samples, 0.23%)</title><rect x="537.1" y="1733" width="2.7" height="15.0" fill="rgb(222,41,47)" rx="2" ry="2" />
<text  x="540.11" y="1743.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::begin (3 samples, 0.02%)</title><rect x="269.5" y="1813" width="0.2" height="15.0" fill="rgb(241,56,33)" rx="2" ry="2" />
<text  x="272.49" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (3 samples, 0.02%)</title><rect x="293.1" y="1861" width="0.3" height="15.0" fill="rgb(227,109,41)" rx="2" ry="2" />
<text  x="296.14" y="1871.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare&gt; (2 samples, 0.01%)</title><rect x="282.8" y="1845" width="0.1" height="15.0" fill="rgb(235,15,49)" rx="2" ry="2" />
<text  x="285.77" y="1855.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare&gt; (2 samples, 0.01%)</title><rect x="529.6" y="1717" width="0.1" height="15.0" fill="rgb(207,54,40)" rx="2" ry="2" />
<text  x="532.57" y="1727.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_create_node&lt;int&amp;, TSearchNode&gt; (101 samples, 0.64%)</title><rect x="201.9" y="1845" width="7.5" height="15.0" fill="rgb(251,8,9)" rx="2" ry="2" />
<text  x="204.89" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (41 samples, 0.26%)</title><rect x="320.8" y="1845" width="3.1" height="15.0" fill="rgb(232,223,5)" rx="2" ry="2" />
<text  x="323.82" y="1855.5" ></text>
</g>
<g >
<title>GetPieceType (9 samples, 0.06%)</title><rect x="308.8" y="1845" width="0.7" height="15.0" fill="rgb(249,84,27)" rx="2" ry="2" />
<text  x="311.81" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ApplyMove (3 samples, 0.02%)</title><rect x="704.1" y="1797" width="0.2" height="15.0" fill="rgb(247,215,12)" rx="2" ry="2" />
<text  x="707.08" y="1807.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_create_node&lt;int&amp;, TSearchNode&gt; (3 samples, 0.02%)</title><rect x="956.7" y="1877" width="0.2" height="15.0" fill="rgb(227,165,52)" rx="2" ry="2" />
<text  x="959.70" y="1887.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::next_for_find (8 samples, 0.05%)</title><rect x="150.6" y="1797" width="0.6" height="15.0" fill="rgb(221,205,31)" rx="2" ry="2" />
<text  x="153.56" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (52 samples, 0.33%)</title><rect x="523.3" y="1733" width="3.9" height="15.0" fill="rgb(210,79,37)" rx="2" ry="2" />
<text  x="526.30" y="1743.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::reserve (2 samples, 0.01%)</title><rect x="71.6" y="1813" width="0.2" height="15.0" fill="rgb(223,98,45)" rx="2" ry="2" />
<text  x="74.63" y="1823.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (2 samples, 0.01%)</title><rect x="71.8" y="1813" width="0.1" height="15.0" fill="rgb(207,117,50)" rx="2" ry="2" />
<text  x="74.78" y="1823.5" ></text>
</g>
<g >
<title>boost::unordered::unordered_map&lt;lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt; &gt;::find (11 samples, 0.07%)</title><rect x="485.0" y="1765" width="0.8" height="15.0" fill="rgb(243,8,23)" rx="2" ry="2" />
<text  x="488.03" y="1775.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare&gt; (2 samples, 0.01%)</title><rect x="162.3" y="1813" width="0.1" height="15.0" fill="rgb(252,61,44)" rx="2" ry="2" />
<text  x="165.27" y="1823.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::find_node_impl&lt;lczero::Position, TTranspositionTable::TPositionEqualFn&gt; (6 samples, 0.04%)</title><rect x="264.6" y="1813" width="0.4" height="15.0" fill="rgb(240,153,7)" rx="2" ry="2" />
<text  x="267.56" y="1823.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetRookAttacks (2 samples, 0.01%)</title><rect x="338.6" y="1781" width="0.2" height="15.0" fill="rgb(252,14,24)" rx="2" ry="2" />
<text  x="341.65" y="1791.5" ></text>
</g>
<g >
<title>lczero::Position::Position (14 samples, 0.09%)</title><rect x="287.6" y="1893" width="1.1" height="15.0" fill="rgb(211,109,27)" rx="2" ry="2" />
<text  x="290.62" y="1903.5" ></text>
</g>
<g >
<title>[unknown] (95 samples, 0.60%)</title><rect x="963.0" y="85" width="7.1" height="15.0" fill="rgb(251,33,10)" rx="2" ry="2" />
<text  x="965.97" y="95.5" ></text>
</g>
<g >
<title>__asan_memcpy (4 samples, 0.03%)</title><rect x="340.4" y="1797" width="0.3" height="15.0" fill="rgb(216,53,25)" rx="2" ry="2" />
<text  x="343.36" y="1807.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_construct_node&lt;int&amp;, TSearchNode&gt; (3 samples, 0.02%)</title><rect x="550.2" y="1749" width="0.2" height="15.0" fill="rgb(244,108,31)" rx="2" ry="2" />
<text  x="553.16" y="1759.5" ></text>
</g>
<g >
<title>GetPieceType (4 samples, 0.03%)</title><rect x="469.4" y="1813" width="0.3" height="15.0" fill="rgb(228,69,54)" rx="2" ry="2" />
<text  x="472.44" y="1823.5" ></text>
</g>
<g >
<title>std::array&lt;int, 64ul&gt;::at (2 samples, 0.01%)</title><rect x="310.4" y="1829" width="0.1" height="15.0" fill="rgb(224,60,5)" rx="2" ry="2" />
<text  x="313.37" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ApplyMove (7 samples, 0.04%)</title><rect x="307.2" y="1797" width="0.6" height="15.0" fill="rgb(229,193,6)" rx="2" ry="2" />
<text  x="310.24" y="1807.5" ></text>
</g>
<g >
<title>__sanitizer::SizeClassAllocator64LocalCache&lt;__sanitizer::SizeClassAllocator64&lt;__asan::AP64&gt; &gt;::Refill (2 samples, 0.01%)</title><rect x="1150.6" y="2053" width="0.2" height="15.0" fill="rgb(217,163,10)" rx="2" ry="2" />
<text  x="1153.61" y="2063.5" ></text>
</g>
<g >
<title>CalcPSTScore (11 samples, 0.07%)</title><rect x="505.2" y="1733" width="0.8" height="15.0" fill="rgb(221,42,27)" rx="2" ry="2" />
<text  x="508.17" y="1743.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (32 samples, 0.20%)</title><rect x="71.9" y="1813" width="2.4" height="15.0" fill="rgb(227,164,45)" rx="2" ry="2" />
<text  x="74.92" y="1823.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_create_node&lt;int&amp;, TSearchNode&gt; (2 samples, 0.01%)</title><rect x="127.9" y="1797" width="0.1" height="15.0" fill="rgb(236,224,30)" rx="2" ry="2" />
<text  x="130.88" y="1807.5" ></text>
</g>
<g >
<title>__sanitizer::mem_is_zero (2 samples, 0.01%)</title><rect x="229.8" y="1845" width="0.1" height="15.0" fill="rgb(240,217,31)" rx="2" ry="2" />
<text  x="232.80" y="1855.5" ></text>
</g>
<g >
<title>__asan::Allocator::QuarantineChunk (34 samples, 0.21%)</title><rect x="987.0" y="2037" width="2.5" height="15.0" fill="rgb(230,22,11)" rx="2" ry="2" />
<text  x="989.99" y="2047.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetRookAttacks (2 samples, 0.01%)</title><rect x="818.1" y="1749" width="0.1" height="15.0" fill="rgb(225,59,4)" rx="2" ry="2" />
<text  x="821.08" y="1759.5" ></text>
</g>
<g >
<title>THistoryHeuristics::Get (2 samples, 0.01%)</title><rect x="28.1" y="1877" width="0.2" height="15.0" fill="rgb(208,136,52)" rx="2" ry="2" />
<text  x="31.13" y="1887.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsUnderAttack (3 samples, 0.02%)</title><rect x="922.8" y="1829" width="0.2" height="15.0" fill="rgb(219,74,32)" rx="2" ry="2" />
<text  x="925.75" y="1839.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::~_Rb_tree (4 samples, 0.03%)</title><rect x="566.9" y="1797" width="0.3" height="15.0" fill="rgb(226,52,5)" rx="2" ry="2" />
<text  x="569.95" y="1807.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (83 samples, 0.52%)</title><rect x="463.2" y="1813" width="6.2" height="15.0" fill="rgb(229,177,46)" rx="2" ry="2" />
<text  x="466.24" y="1823.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (2 samples, 0.01%)</title><rect x="233.6" y="1925" width="0.1" height="15.0" fill="rgb(210,197,19)" rx="2" ry="2" />
<text  x="236.60" y="1935.5" ></text>
</g>
<g >
<title>__asan::AsanTSDGet (6 samples, 0.04%)</title><rect x="991.1" y="2037" width="0.4" height="15.0" fill="rgb(248,134,42)" rx="2" ry="2" />
<text  x="994.10" y="2047.5" ></text>
</g>
<g >
<title>__asan_region_is_poisoned (4 samples, 0.03%)</title><rect x="229.5" y="1845" width="0.3" height="15.0" fill="rgb(222,0,12)" rx="2" ry="2" />
<text  x="232.50" y="1855.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (7 samples, 0.04%)</title><rect x="513.5" y="1669" width="0.5" height="15.0" fill="rgb(249,134,42)" rx="2" ry="2" />
<text  x="516.45" y="1679.5" ></text>
</g>
<g >
<title>TSearchStrategy::CalcMoveOrder (5 samples, 0.03%)</title><rect x="105.6" y="1797" width="0.3" height="15.0" fill="rgb(248,171,45)" rx="2" ry="2" />
<text  x="108.57" y="1807.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (2 samples, 0.01%)</title><rect x="929.9" y="1845" width="0.2" height="15.0" fill="rgb(247,77,0)" rx="2" ry="2" />
<text  x="932.92" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (11 samples, 0.07%)</title><rect x="236.5" y="1877" width="0.8" height="15.0" fill="rgb(239,32,33)" rx="2" ry="2" />
<text  x="239.51" y="1887.5" ></text>
</g>
<g >
<title>std::pair&lt;std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&gt;::pair&lt;std::_Rb_tree_node&lt;std::pair&lt;int const, TSearchNode&gt; &gt;*&amp;, std::_Rb_tree_node_base*&amp;, true&gt; (5 samples, 0.03%)</title><rect x="945.1" y="1829" width="0.4" height="15.0" fill="rgb(212,157,21)" rx="2" ry="2" />
<text  x="948.14" y="1839.5" ></text>
</g>
<g >
<title>__asan::AsanThread::stack_bottom (2 samples, 0.01%)</title><rect x="949.9" y="1797" width="0.2" height="15.0" fill="rgb(230,149,51)" rx="2" ry="2" />
<text  x="952.91" y="1807.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (16 samples, 0.10%)</title><rect x="535.5" y="1733" width="1.2" height="15.0" fill="rgb(228,93,41)" rx="2" ry="2" />
<text  x="538.54" y="1743.5" ></text>
</g>
<g >
<title>std::array&lt;int, 2ul&gt;::operator[] (2 samples, 0.01%)</title><rect x="62.8" y="1829" width="0.2" height="15.0" fill="rgb(236,76,18)" rx="2" ry="2" />
<text  x="65.82" y="1839.5" ></text>
</g>
<g >
<title>boost::unordered::unordered_map&lt;lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt; &gt;::find (3 samples, 0.02%)</title><rect x="238.2" y="1845" width="0.2" height="15.0" fill="rgb(222,38,44)" rx="2" ry="2" />
<text  x="241.15" y="1855.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::reserve (124 samples, 0.78%)</title><rect x="1020.1" y="2037" width="9.3" height="15.0" fill="rgb(245,99,15)" rx="2" ry="2" />
<text  x="1023.12" y="2047.5" ></text>
</g>
<g >
<title>__sanitizer::mem_is_zero (2 samples, 0.01%)</title><rect x="291.3" y="1877" width="0.1" height="15.0" fill="rgb(245,199,38)" rx="2" ry="2" />
<text  x="294.27" y="1887.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (11 samples, 0.07%)</title><rect x="362.2" y="1781" width="0.8" height="15.0" fill="rgb(208,203,1)" rx="2" ry="2" />
<text  x="365.22" y="1791.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (64 samples, 0.40%)</title><rect x="541.8" y="1765" width="4.8" height="15.0" fill="rgb(229,221,20)" rx="2" ry="2" />
<text  x="544.81" y="1775.5" ></text>
</g>
<g >
<title>[unknown] (234 samples, 1.48%)</title><rect x="963.0" y="1637" width="17.4" height="15.0" fill="rgb(249,91,36)" rx="2" ry="2" />
<text  x="965.97" y="1647.5" ></text>
</g>
<g >
<title>TSearchStrategy::CalcMoveOrder (3 samples, 0.02%)</title><rect x="512.2" y="1701" width="0.2" height="15.0" fill="rgb(239,136,48)" rx="2" ry="2" />
<text  x="515.19" y="1711.5" ></text>
</g>
<g >
<title>CalcPSTScore (4 samples, 0.03%)</title><rect x="33.3" y="1861" width="0.3" height="15.0" fill="rgb(240,57,51)" rx="2" ry="2" />
<text  x="36.28" y="1871.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetBishopAttacks (2 samples, 0.01%)</title><rect x="465.0" y="1749" width="0.1" height="15.0" fill="rgb(220,209,7)" rx="2" ry="2" />
<text  x="467.96" y="1759.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::find_node (4 samples, 0.03%)</title><rect x="95.4" y="1781" width="0.2" height="15.0" fill="rgb(254,19,28)" rx="2" ry="2" />
<text  x="98.35" y="1791.5" ></text>
</g>
<g >
<title>TSearchStrategy::CalcMoveOrder (45 samples, 0.28%)</title><rect x="241.7" y="1861" width="3.3" height="15.0" fill="rgb(205,183,11)" rx="2" ry="2" />
<text  x="244.66" y="1871.5" ></text>
</g>
<g >
<title>boost::unordered::unordered_map&lt;lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt; &gt;::find (2 samples, 0.01%)</title><rect x="510.8" y="1685" width="0.2" height="15.0" fill="rgb(225,101,36)" rx="2" ry="2" />
<text  x="513.84" y="1695.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (50 samples, 0.32%)</title><rect x="47.1" y="1845" width="3.7" height="15.0" fill="rgb(237,7,11)" rx="2" ry="2" />
<text  x="50.08" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (2 samples, 0.01%)</title><rect x="957.5" y="1909" width="0.2" height="15.0" fill="rgb(245,82,41)" rx="2" ry="2" />
<text  x="960.52" y="1919.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::find_node_impl&lt;lczero::Position, TTranspositionTable::TPositionEqualFn&gt; (5 samples, 0.03%)</title><rect x="269.5" y="1829" width="0.4" height="15.0" fill="rgb(226,66,13)" rx="2" ry="2" />
<text  x="272.49" y="1839.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_construct_node&lt;int&amp;, TSearchNode&gt; (2 samples, 0.01%)</title><rect x="527.3" y="1701" width="0.1" height="15.0" fill="rgb(230,118,34)" rx="2" ry="2" />
<text  x="530.26" y="1711.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::find_node_impl&lt;lczero::Position, TTranspositionTable::TPositionEqualFn&gt; (2 samples, 0.01%)</title><rect x="504.8" y="1701" width="0.1" height="15.0" fill="rgb(251,32,10)" rx="2" ry="2" />
<text  x="507.80" y="1711.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::Mirror (18 samples, 0.11%)</title><rect x="198.7" y="1845" width="1.3" height="15.0" fill="rgb(248,12,51)" rx="2" ry="2" />
<text  x="201.68" y="1855.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_emplace_equal&lt;int&amp;, TSearchNode&gt; (4 samples, 0.03%)</title><rect x="956.7" y="1893" width="0.3" height="15.0" fill="rgb(239,60,3)" rx="2" ry="2" />
<text  x="959.70" y="1903.5" ></text>
</g>
<g >
<title>lczero::Position::Position (11 samples, 0.07%)</title><rect x="703.9" y="1813" width="0.8" height="15.0" fill="rgb(209,69,16)" rx="2" ry="2" />
<text  x="706.85" y="1823.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_get_insert_equal_pos (2 samples, 0.01%)</title><rect x="540.2" y="1749" width="0.2" height="15.0" fill="rgb(245,177,52)" rx="2" ry="2" />
<text  x="543.24" y="1759.5" ></text>
</g>
<g >
<title>[unknown] (254 samples, 1.61%)</title><rect x="963.0" y="1813" width="18.9" height="15.0" fill="rgb(216,19,13)" rx="2" ry="2" />
<text  x="965.97" y="1823.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.01%)</title><rect x="978.6" y="1349" width="0.1" height="15.0" fill="rgb(238,92,31)" rx="2" ry="2" />
<text  x="981.56" y="1359.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (2 samples, 0.01%)</title><rect x="481.9" y="1765" width="0.1" height="15.0" fill="rgb(216,14,54)" rx="2" ry="2" />
<text  x="484.90" y="1775.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (18 samples, 0.11%)</title><rect x="281.6" y="1861" width="1.3" height="15.0" fill="rgb(215,161,4)" rx="2" ry="2" />
<text  x="284.57" y="1871.5" ></text>
</g>
<g >
<title>[unknown] (204 samples, 1.29%)</title><rect x="963.0" y="1285" width="15.2" height="15.0" fill="rgb(215,133,32)" rx="2" ry="2" />
<text  x="965.97" y="1295.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.01%)</title><rect x="983.3" y="2005" width="0.2" height="15.0" fill="rgb(243,10,53)" rx="2" ry="2" />
<text  x="986.34" y="2015.5" ></text>
</g>
<g >
<title>lczero::Position::Position (5 samples, 0.03%)</title><rect x="565.9" y="1797" width="0.4" height="15.0" fill="rgb(238,191,23)" rx="2" ry="2" />
<text  x="568.90" y="1807.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::begin (13 samples, 0.08%)</title><rect x="149.6" y="1797" width="1.0" height="15.0" fill="rgb(205,93,39)" rx="2" ry="2" />
<text  x="152.59" y="1807.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_create_node&lt;int&amp;, TSearchNode&gt; (3 samples, 0.02%)</title><rect x="116.1" y="1781" width="0.2" height="15.0" fill="rgb(212,123,25)" rx="2" ry="2" />
<text  x="119.09" y="1791.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::next_for_find (77 samples, 0.49%)</title><rect x="721.2" y="1781" width="5.8" height="15.0" fill="rgb(236,8,48)" rx="2" ry="2" />
<text  x="724.24" y="1791.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (9 samples, 0.06%)</title><rect x="362.3" y="1749" width="0.7" height="15.0" fill="rgb(216,203,32)" rx="2" ry="2" />
<text  x="365.30" y="1759.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (72 samples, 0.46%)</title><rect x="247.6" y="1845" width="5.3" height="15.0" fill="rgb(231,115,1)" rx="2" ry="2" />
<text  x="250.55" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (37 samples, 0.23%)</title><rect x="562.9" y="1733" width="2.8" height="15.0" fill="rgb(218,72,34)" rx="2" ry="2" />
<text  x="565.92" y="1743.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetBishopAttacks (2 samples, 0.01%)</title><rect x="338.5" y="1781" width="0.1" height="15.0" fill="rgb(237,83,38)" rx="2" ry="2" />
<text  x="341.50" y="1791.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (3 samples, 0.02%)</title><rect x="515.3" y="1621" width="0.2" height="15.0" fill="rgb(238,183,2)" rx="2" ry="2" />
<text  x="518.32" y="1631.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_insert_node (10 samples, 0.06%)</title><rect x="212.6" y="1845" width="0.8" height="15.0" fill="rgb(243,209,33)" rx="2" ry="2" />
<text  x="215.64" y="1855.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (2 samples, 0.01%)</title><rect x="109.1" y="1701" width="0.1" height="15.0" fill="rgb(229,176,28)" rx="2" ry="2" />
<text  x="112.08" y="1711.5" ></text>
</g>
<g >
<title>[unknown] (212 samples, 1.34%)</title><rect x="963.0" y="1365" width="15.8" height="15.0" fill="rgb(222,226,21)" rx="2" ry="2" />
<text  x="965.97" y="1375.5" ></text>
</g>
<g >
<title>std::multimap&lt;int, TSearchNode, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::emplace&lt;int&amp;, TSearchNode&gt; (4 samples, 0.03%)</title><rect x="914.9" y="1845" width="0.3" height="15.0" fill="rgb(236,53,15)" rx="2" ry="2" />
<text  x="917.92" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ChessBoard (14 samples, 0.09%)</title><rect x="933.9" y="1845" width="1.1" height="15.0" fill="rgb(253,69,53)" rx="2" ry="2" />
<text  x="936.95" y="1855.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (36 samples, 0.23%)</title><rect x="546.9" y="1749" width="2.7" height="15.0" fill="rgb(234,189,1)" rx="2" ry="2" />
<text  x="549.88" y="1759.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_insert_node (2 samples, 0.01%)</title><rect x="285.0" y="1861" width="0.2" height="15.0" fill="rgb(215,123,20)" rx="2" ry="2" />
<text  x="288.01" y="1871.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::_M_erase (3 samples, 0.02%)</title><rect x="127.7" y="1781" width="0.2" height="15.0" fill="rgb(241,87,5)" rx="2" ry="2" />
<text  x="130.66" y="1791.5" ></text>
</g>
<g >
<title>TSearchStrategy::Search (8 samples, 0.05%)</title><rect x="25.1" y="1957" width="0.6" height="15.0" fill="rgb(231,152,41)" rx="2" ry="2" />
<text  x="28.07" y="1967.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (28 samples, 0.18%)</title><rect x="463.6" y="1781" width="2.1" height="15.0" fill="rgb(235,132,47)" rx="2" ry="2" />
<text  x="466.62" y="1791.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (13 samples, 0.08%)</title><rect x="530.1" y="1685" width="1.0" height="15.0" fill="rgb(245,219,46)" rx="2" ry="2" />
<text  x="533.09" y="1695.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (3 samples, 0.02%)</title><rect x="982.4" y="1877" width="0.3" height="15.0" fill="rgb(241,4,6)" rx="2" ry="2" />
<text  x="985.44" y="1887.5" ></text>
</g>
<g >
<title>[unknown] (287 samples, 1.81%)</title><rect x="963.0" y="2037" width="21.4" height="15.0" fill="rgb(253,185,37)" rx="2" ry="2" />
<text  x="965.97" y="2047.5" >[..</text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (13 samples, 0.08%)</title><rect x="526.1" y="1701" width="1.0" height="15.0" fill="rgb(249,22,54)" rx="2" ry="2" />
<text  x="529.14" y="1711.5" ></text>
</g>
<g >
<title>[unknown] (128 samples, 0.81%)</title><rect x="963.0" y="485" width="9.5" height="15.0" fill="rgb(212,184,50)" rx="2" ry="2" />
<text  x="965.97" y="495.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (9 samples, 0.06%)</title><rect x="898.3" y="1797" width="0.7" height="15.0" fill="rgb(226,192,15)" rx="2" ry="2" />
<text  x="901.28" y="1807.5" ></text>
</g>
<g >
<title>__asan_memset (2 samples, 0.01%)</title><rect x="777.6" y="1797" width="0.1" height="15.0" fill="rgb(237,135,38)" rx="2" ry="2" />
<text  x="780.57" y="1807.5" ></text>
</g>
<g >
<title>IsTerminal (9 samples, 0.06%)</title><rect x="415.4" y="1829" width="0.7" height="15.0" fill="rgb(251,30,8)" rx="2" ry="2" />
<text  x="418.42" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (129 samples, 0.82%)</title><rect x="551.4" y="1781" width="9.7" height="15.0" fill="rgb(245,188,18)" rx="2" ry="2" />
<text  x="554.43" y="1791.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::reserve (2 samples, 0.01%)</title><rect x="546.4" y="1749" width="0.2" height="15.0" fill="rgb(235,27,10)" rx="2" ry="2" />
<text  x="549.43" y="1759.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (2 samples, 0.01%)</title><rect x="63.2" y="1813" width="0.1" height="15.0" fill="rgb(254,95,42)" rx="2" ry="2" />
<text  x="66.20" y="1823.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (77 samples, 0.49%)</title><rect x="184.9" y="1829" width="5.7" height="15.0" fill="rgb(245,27,20)" rx="2" ry="2" />
<text  x="187.88" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateKingAttackInfo (2 samples, 0.01%)</title><rect x="218.9" y="1861" width="0.2" height="15.0" fill="rgb(236,15,54)" rx="2" ry="2" />
<text  x="221.90" y="1871.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (8 samples, 0.05%)</title><rect x="497.2" y="1733" width="0.6" height="15.0" fill="rgb(213,58,10)" rx="2" ry="2" />
<text  x="500.19" y="1743.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (368 samples, 2.33%)</title><rect x="833.6" y="1765" width="27.5" height="15.0" fill="rgb(213,196,0)" rx="2" ry="2" />
<text  x="836.60" y="1775.5" >l..</text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (28 samples, 0.18%)</title><rect x="274.3" y="1829" width="2.1" height="15.0" fill="rgb(227,73,7)" rx="2" ry="2" />
<text  x="277.26" y="1839.5" ></text>
</g>
<g >
<title>GetFenBestMove (2,783 samples, 17.60%)</title><rect x="25.7" y="1989" width="207.7" height="15.0" fill="rgb(242,227,46)" rx="2" ry="2" />
<text  x="28.74" y="1999.5" >GetFenBestMove</text>
</g>
<g >
<title>std::array&lt;int, 64ul&gt;::operator[] (3 samples, 0.02%)</title><rect x="914.7" y="1845" width="0.2" height="15.0" fill="rgb(232,152,52)" rx="2" ry="2" />
<text  x="917.70" y="1855.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (3 samples, 0.02%)</title><rect x="35.4" y="1813" width="0.2" height="15.0" fill="rgb(243,86,28)" rx="2" ry="2" />
<text  x="38.37" y="1823.5" ></text>
</g>
<g >
<title>CalcPSTScore (72 samples, 0.46%)</title><rect x="82.1" y="1829" width="5.4" height="15.0" fill="rgb(218,36,9)" rx="2" ry="2" />
<text  x="85.15" y="1839.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (2 samples, 0.01%)</title><rect x="231.7" y="1877" width="0.2" height="15.0" fill="rgb(222,207,3)" rx="2" ry="2" />
<text  x="234.73" y="1887.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::~vector (2 samples, 0.01%)</title><rect x="915.2" y="1845" width="0.2" height="15.0" fill="rgb(249,64,15)" rx="2" ry="2" />
<text  x="918.22" y="1855.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.02%)</title><rect x="877.7" y="1797" width="0.2" height="15.0" fill="rgb(247,5,4)" rx="2" ry="2" />
<text  x="880.69" y="1807.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::reserve (2 samples, 0.01%)</title><rect x="140.3" y="1797" width="0.2" height="15.0" fill="rgb(235,54,21)" rx="2" ry="2" />
<text  x="143.34" y="1807.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (5 samples, 0.03%)</title><rect x="258.8" y="1781" width="0.4" height="15.0" fill="rgb(218,84,50)" rx="2" ry="2" />
<text  x="261.82" y="1791.5" ></text>
</g>
<g >
<title>GetPieceType (9 samples, 0.06%)</title><rect x="414.7" y="1829" width="0.7" height="15.0" fill="rgb(232,165,25)" rx="2" ry="2" />
<text  x="417.75" y="1839.5" ></text>
</g>
<g >
<title>[unknown] (232 samples, 1.47%)</title><rect x="963.0" y="1621" width="17.3" height="15.0" fill="rgb(220,134,27)" rx="2" ry="2" />
<text  x="965.97" y="1631.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (4 samples, 0.03%)</title><rect x="319.0" y="1829" width="0.3" height="15.0" fill="rgb(234,104,12)" rx="2" ry="2" />
<text  x="322.03" y="1839.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (30 samples, 0.19%)</title><rect x="160.0" y="1813" width="2.3" height="15.0" fill="rgb(205,98,34)" rx="2" ry="2" />
<text  x="163.04" y="1823.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (5 samples, 0.03%)</title><rect x="573.9" y="1797" width="0.4" height="15.0" fill="rgb(229,87,34)" rx="2" ry="2" />
<text  x="576.89" y="1807.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::reserve (5 samples, 0.03%)</title><rect x="877.6" y="1813" width="0.4" height="15.0" fill="rgb(233,88,27)" rx="2" ry="2" />
<text  x="880.62" y="1823.5" ></text>
</g>
<g >
<title>std::array&lt;int, 2ul&gt;::operator[] (6 samples, 0.04%)</title><rect x="331.2" y="1829" width="0.4" height="15.0" fill="rgb(209,186,39)" rx="2" ry="2" />
<text  x="334.19" y="1839.5" ></text>
</g>
<g >
<title>GetPieceType (14 samples, 0.09%)</title><rect x="84.2" y="1813" width="1.1" height="15.0" fill="rgb(245,181,1)" rx="2" ry="2" />
<text  x="87.23" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (2 samples, 0.01%)</title><rect x="64.5" y="1749" width="0.1" height="15.0" fill="rgb(207,104,20)" rx="2" ry="2" />
<text  x="67.46" y="1759.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (2 samples, 0.01%)</title><rect x="706.5" y="1813" width="0.1" height="15.0" fill="rgb(219,203,34)" rx="2" ry="2" />
<text  x="709.47" y="1823.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (2 samples, 0.01%)</title><rect x="546.7" y="1749" width="0.2" height="15.0" fill="rgb(251,78,38)" rx="2" ry="2" />
<text  x="549.73" y="1759.5" ></text>
</g>
<g >
<title>__sanitizer::mem_is_zero (3 samples, 0.02%)</title><rect x="954.3" y="1829" width="0.2" height="15.0" fill="rgb(222,172,29)" rx="2" ry="2" />
<text  x="957.31" y="1839.5" ></text>
</g>
<g >
<title>[unknown] (251 samples, 1.59%)</title><rect x="963.0" y="1797" width="18.7" height="15.0" fill="rgb(211,7,3)" rx="2" ry="2" />
<text  x="965.97" y="1807.5" ></text>
</g>
<g >
<title>lczero::BitBoard::get (12 samples, 0.08%)</title><rect x="476.6" y="1781" width="0.9" height="15.0" fill="rgb(251,59,32)" rx="2" ry="2" />
<text  x="479.60" y="1791.5" ></text>
</g>
<g >
<title>lczero::Position::Position (2 samples, 0.01%)</title><rect x="102.1" y="1797" width="0.2" height="15.0" fill="rgb(216,39,28)" rx="2" ry="2" />
<text  x="105.14" y="1807.5" ></text>
</g>
<g >
<title>[libboost_unit_test_framework.so.1.71.0] (12,512 samples, 79.11%)</title><rect x="25.1" y="2037" width="933.5" height="15.0" fill="rgb(247,4,49)" rx="2" ry="2" />
<text  x="28.07" y="2047.5" >[libboost_unit_test_framework.so.1.71.0]</text>
</g>
<g >
<title>CalcPSTScore (3 samples, 0.02%)</title><rect x="236.1" y="1877" width="0.2" height="15.0" fill="rgb(230,160,3)" rx="2" ry="2" />
<text  x="239.06" y="1887.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (4 samples, 0.03%)</title><rect x="359.1" y="1781" width="0.3" height="15.0" fill="rgb(224,81,25)" rx="2" ry="2" />
<text  x="362.09" y="1791.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (3 samples, 0.02%)</title><rect x="74.3" y="1829" width="0.2" height="15.0" fill="rgb(229,219,45)" rx="2" ry="2" />
<text  x="77.31" y="1839.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.01%)</title><rect x="972.1" y="437" width="0.1" height="15.0" fill="rgb(250,163,2)" rx="2" ry="2" />
<text  x="975.07" y="447.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (3 samples, 0.02%)</title><rect x="483.2" y="1733" width="0.3" height="15.0" fill="rgb(206,92,20)" rx="2" ry="2" />
<text  x="486.24" y="1743.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare&gt; (4 samples, 0.03%)</title><rect x="123.9" y="1781" width="0.3" height="15.0" fill="rgb(252,48,17)" rx="2" ry="2" />
<text  x="126.85" y="1791.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (2 samples, 0.01%)</title><rect x="506.8" y="1653" width="0.2" height="15.0" fill="rgb(235,213,54)" rx="2" ry="2" />
<text  x="509.81" y="1663.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::erase (4 samples, 0.03%)</title><rect x="127.6" y="1797" width="0.3" height="15.0" fill="rgb(218,89,28)" rx="2" ry="2" />
<text  x="130.58" y="1807.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (51 samples, 0.32%)</title><rect x="304.1" y="1829" width="3.8" height="15.0" fill="rgb(240,224,34)" rx="2" ry="2" />
<text  x="307.10" y="1839.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (4 samples, 0.03%)</title><rect x="294.2" y="1829" width="0.3" height="15.0" fill="rgb(219,200,22)" rx="2" ry="2" />
<text  x="297.18" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::Hash (14 samples, 0.09%)</title><rect x="708.8" y="1749" width="1.0" height="15.0" fill="rgb(254,6,33)" rx="2" ry="2" />
<text  x="711.78" y="1759.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (6 samples, 0.04%)</title><rect x="294.1" y="1861" width="0.5" height="15.0" fill="rgb(230,118,16)" rx="2" ry="2" />
<text  x="297.11" y="1871.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::next_for_find (4 samples, 0.03%)</title><rect x="485.6" y="1733" width="0.2" height="15.0" fill="rgb(245,63,30)" rx="2" ry="2" />
<text  x="488.55" y="1743.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::find_node (38 samples, 0.24%)</title><rect x="312.8" y="1813" width="2.8" height="15.0" fill="rgb(236,44,15)" rx="2" ry="2" />
<text  x="315.76" y="1823.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::erase (2 samples, 0.01%)</title><rect x="220.8" y="1861" width="0.1" height="15.0" fill="rgb(229,14,4)" rx="2" ry="2" />
<text  x="223.77" y="1871.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_construct_node&lt;int&amp;, TSearchNode&gt; (3 samples, 0.02%)</title><rect x="116.1" y="1765" width="0.2" height="15.0" fill="rgb(240,0,18)" rx="2" ry="2" />
<text  x="119.09" y="1775.5" ></text>
</g>
<g >
<title>boost::unordered::unordered_map&lt;lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt; &gt;::find (89 samples, 0.56%)</title><rect x="53.3" y="1829" width="6.7" height="15.0" fill="rgb(236,69,35)" rx="2" ry="2" />
<text  x="56.35" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (2 samples, 0.01%)</title><rect x="514.9" y="1621" width="0.1" height="15.0" fill="rgb(236,32,18)" rx="2" ry="2" />
<text  x="517.87" y="1631.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_emplace_equal&lt;int&amp;, TSearchNode&gt; (27 samples, 0.17%)</title><rect x="228.6" y="1893" width="2.0" height="15.0" fill="rgb(244,22,19)" rx="2" ry="2" />
<text  x="231.60" y="1903.5" ></text>
</g>
<g >
<title>lczero::Position::Position (8 samples, 0.05%)</title><rect x="283.2" y="1877" width="0.6" height="15.0" fill="rgb(207,94,38)" rx="2" ry="2" />
<text  x="286.21" y="1887.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::operator== (2 samples, 0.01%)</title><rect x="235.8" y="1813" width="0.1" height="15.0" fill="rgb(233,167,30)" rx="2" ry="2" />
<text  x="238.76" y="1823.5" ></text>
</g>
<g >
<title>lczero::Position::Position (121 samples, 0.77%)</title><rect x="191.1" y="1861" width="9.0" height="15.0" fill="rgb(237,9,25)" rx="2" ry="2" />
<text  x="194.07" y="1871.5" ></text>
</g>
<g >
<title>std::array&lt;int, 64ul&gt;::operator[] (6 samples, 0.04%)</title><rect x="300.4" y="1845" width="0.5" height="15.0" fill="rgb(232,139,5)" rx="2" ry="2" />
<text  x="303.45" y="1855.5" ></text>
</g>
<g >
<title>CalcPSTScore (38 samples, 0.24%)</title><rect x="494.3" y="1765" width="2.8" height="15.0" fill="rgb(212,69,43)" rx="2" ry="2" />
<text  x="497.28" y="1775.5" ></text>
</g>
<g >
<title>std::array&lt;int, 64ul&gt;::operator[] (2 samples, 0.01%)</title><rect x="952.1" y="1861" width="0.2" height="15.0" fill="rgb(208,139,5)" rx="2" ry="2" />
<text  x="955.15" y="1871.5" ></text>
</g>
<g >
<title>TSearchStrategy::CalcMoveOrder (9 samples, 0.06%)</title><rect x="237.7" y="1877" width="0.7" height="15.0" fill="rgb(212,60,3)" rx="2" ry="2" />
<text  x="240.70" y="1887.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::rehash_impl (12 samples, 0.08%)</title><rect x="171.2" y="1797" width="0.9" height="15.0" fill="rgb(209,211,21)" rx="2" ry="2" />
<text  x="174.23" y="1807.5" ></text>
</g>
<g >
<title>lczero::Position::Position (5 samples, 0.03%)</title><rect x="480.9" y="1765" width="0.3" height="15.0" fill="rgb(241,45,25)" rx="2" ry="2" />
<text  x="483.85" y="1775.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.01%)</title><rect x="975.8" y="981" width="0.1" height="15.0" fill="rgb(210,127,24)" rx="2" ry="2" />
<text  x="978.80" y="991.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (3 samples, 0.02%)</title><rect x="870.5" y="1845" width="0.3" height="15.0" fill="rgb(247,12,19)" rx="2" ry="2" />
<text  x="873.53" y="1855.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (11 samples, 0.07%)</title><rect x="509.1" y="1701" width="0.8" height="15.0" fill="rgb(239,181,30)" rx="2" ry="2" />
<text  x="512.13" y="1711.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (12 samples, 0.08%)</title><rect x="34.7" y="1861" width="0.9" height="15.0" fill="rgb(213,24,53)" rx="2" ry="2" />
<text  x="37.70" y="1871.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (2 samples, 0.01%)</title><rect x="283.0" y="1813" width="0.1" height="15.0" fill="rgb(223,84,48)" rx="2" ry="2" />
<text  x="285.99" y="1823.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_construct_node&lt;int&amp;, TSearchNode&gt; (11 samples, 0.07%)</title><rect x="893.9" y="1829" width="0.8" height="15.0" fill="rgb(243,6,51)" rx="2" ry="2" />
<text  x="896.88" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (2 samples, 0.01%)</title><rect x="357.7" y="1669" width="0.2" height="15.0" fill="rgb(223,141,40)" rx="2" ry="2" />
<text  x="360.75" y="1679.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ChessBoard (5 samples, 0.03%)</title><rect x="704.3" y="1797" width="0.4" height="15.0" fill="rgb(214,159,18)" rx="2" ry="2" />
<text  x="707.30" y="1807.5" ></text>
</g>
<g >
<title>TSearchStrategy::CalcMoveOrder (21 samples, 0.13%)</title><rect x="499.7" y="1765" width="1.5" height="15.0" fill="rgb(218,144,51)" rx="2" ry="2" />
<text  x="502.65" y="1775.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (2 samples, 0.01%)</title><rect x="540.8" y="1781" width="0.1" height="15.0" fill="rgb(241,205,34)" rx="2" ry="2" />
<text  x="543.76" y="1791.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (6 samples, 0.04%)</title><rect x="518.8" y="1669" width="0.4" height="15.0" fill="rgb(238,164,22)" rx="2" ry="2" />
<text  x="521.75" y="1679.5" ></text>
</g>
<g >
<title>std::multimap&lt;int, TSearchNode, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::emplace&lt;int&amp;, TSearchNode&gt; (4 samples, 0.03%)</title><rect x="952.3" y="1861" width="0.3" height="15.0" fill="rgb(211,212,18)" rx="2" ry="2" />
<text  x="955.30" y="1871.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (241 samples, 1.52%)</title><rect x="128.8" y="1829" width="18.0" height="15.0" fill="rgb(221,4,7)" rx="2" ry="2" />
<text  x="131.78" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (8 samples, 0.05%)</title><rect x="110.8" y="1749" width="0.6" height="15.0" fill="rgb(209,66,11)" rx="2" ry="2" />
<text  x="113.80" y="1759.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (6 samples, 0.04%)</title><rect x="323.4" y="1781" width="0.5" height="15.0" fill="rgb(220,103,46)" rx="2" ry="2" />
<text  x="326.43" y="1791.5" ></text>
</g>
<g >
<title>GetPieceType (2 samples, 0.01%)</title><rect x="81.3" y="1845" width="0.1" height="15.0" fill="rgb(252,80,29)" rx="2" ry="2" />
<text  x="84.25" y="1855.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (5 samples, 0.03%)</title><rect x="27.8" y="1877" width="0.3" height="15.0" fill="rgb(205,105,54)" rx="2" ry="2" />
<text  x="30.76" y="1887.5" ></text>
</g>
<g >
<title>GetPieceValue (2 samples, 0.01%)</title><rect x="483.5" y="1733" width="0.1" height="15.0" fill="rgb(218,147,30)" rx="2" ry="2" />
<text  x="486.46" y="1743.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (3 samples, 0.02%)</title><rect x="358.5" y="1765" width="0.2" height="15.0" fill="rgb(233,18,40)" rx="2" ry="2" />
<text  x="361.49" y="1775.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (4 samples, 0.03%)</title><rect x="492.7" y="1733" width="0.3" height="15.0" fill="rgb(239,71,38)" rx="2" ry="2" />
<text  x="495.71" y="1743.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (39 samples, 0.25%)</title><rect x="546.7" y="1765" width="2.9" height="15.0" fill="rgb(254,190,31)" rx="2" ry="2" />
<text  x="549.66" y="1775.5" ></text>
</g>
<g >
<title>__asan::asan_memalign (3 samples, 0.02%)</title><rect x="937.2" y="1829" width="0.2" height="15.0" fill="rgb(216,212,28)" rx="2" ry="2" />
<text  x="940.15" y="1839.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (18 samples, 0.11%)</title><rect x="521.6" y="1701" width="1.3" height="15.0" fill="rgb(208,194,26)" rx="2" ry="2" />
<text  x="524.59" y="1711.5" ></text>
</g>
<g >
<title>boost::unordered::detail::func::construct_node_pair&lt;std::allocator&lt;boost::unordered::detail::ptr_node&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt; &gt;, lczero::Position const&amp;, TTranspositionTable::TNode&gt; (4 samples, 0.03%)</title><rect x="917.5" y="1829" width="0.3" height="15.0" fill="rgb(222,121,1)" rx="2" ry="2" />
<text  x="920.53" y="1839.5" ></text>
</g>
<g >
<title>CalcPSTScore (2 samples, 0.01%)</title><rect x="238.5" y="1861" width="0.2" height="15.0" fill="rgb(239,153,28)" rx="2" ry="2" />
<text  x="241.52" y="1871.5" ></text>
</g>
<g >
<title>custom_epd_invoker (780 samples, 4.93%)</title><rect x="233.4" y="2021" width="58.2" height="15.0" fill="rgb(245,108,5)" rx="2" ry="2" />
<text  x="236.38" y="2031.5" >custom..</text>
</g>
<g >
<title>[unknown] (265 samples, 1.68%)</title><rect x="963.0" y="1909" width="19.7" height="15.0" fill="rgb(209,189,8)" rx="2" ry="2" />
<text  x="965.97" y="1919.5" ></text>
</g>
<g >
<title>TSearchStrategy::Search (6,692 samples, 42.31%)</title><rect x="367.7" y="1845" width="499.3" height="15.0" fill="rgb(229,98,26)" rx="2" ry="2" />
<text  x="370.75" y="1855.5" >TSearchStrategy::Search</text>
</g>
<g >
<title>lczero::Position::Position (2 samples, 0.01%)</title><rect x="531.1" y="1749" width="0.1" height="15.0" fill="rgb(231,88,15)" rx="2" ry="2" />
<text  x="534.06" y="1759.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (42 samples, 0.27%)</title><rect x="948.0" y="1845" width="3.2" height="15.0" fill="rgb(242,83,12)" rx="2" ry="2" />
<text  x="951.05" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsUnderAttack (2 samples, 0.01%)</title><rect x="361.2" y="1781" width="0.1" height="15.0" fill="rgb(227,103,13)" rx="2" ry="2" />
<text  x="364.18" y="1791.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsUnderAttack (2 samples, 0.01%)</title><rect x="219.5" y="1845" width="0.1" height="15.0" fill="rgb(233,123,43)" rx="2" ry="2" />
<text  x="222.50" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (2 samples, 0.01%)</title><rect x="27.8" y="1829" width="0.2" height="15.0" fill="rgb(225,158,4)" rx="2" ry="2" />
<text  x="30.83" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (7 samples, 0.04%)</title><rect x="515.0" y="1637" width="0.5" height="15.0" fill="rgb(245,25,43)" rx="2" ry="2" />
<text  x="518.02" y="1647.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetRookAttacks (2 samples, 0.01%)</title><rect x="503.1" y="1685" width="0.1" height="15.0" fill="rgb(237,198,11)" rx="2" ry="2" />
<text  x="506.08" y="1695.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::begin (95 samples, 0.60%)</title><rect x="714.2" y="1781" width="7.0" height="15.0" fill="rgb(234,137,43)" rx="2" ry="2" />
<text  x="717.15" y="1791.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::next_for_find (5 samples, 0.03%)</title><rect x="868.4" y="1797" width="0.3" height="15.0" fill="rgb(246,97,26)" rx="2" ry="2" />
<text  x="871.36" y="1807.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetBishopAttacks (4 samples, 0.03%)</title><rect x="159.4" y="1797" width="0.3" height="15.0" fill="rgb(233,209,35)" rx="2" ry="2" />
<text  x="162.37" y="1807.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (54 samples, 0.34%)</title><rect x="879.0" y="1797" width="4.0" height="15.0" fill="rgb(211,208,23)" rx="2" ry="2" />
<text  x="881.96" y="1807.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (28 samples, 0.18%)</title><rect x="488.9" y="1765" width="2.1" height="15.0" fill="rgb(216,113,26)" rx="2" ry="2" />
<text  x="491.91" y="1775.5" ></text>
</g>
<g >
<title>CalcPSTScore (49 samples, 0.31%)</title><rect x="297.2" y="1861" width="3.7" height="15.0" fill="rgb(210,215,8)" rx="2" ry="2" />
<text  x="300.24" y="1871.5" ></text>
</g>
<g >
<title>CalcPSTScore (5 samples, 0.03%)</title><rect x="234.5" y="1893" width="0.4" height="15.0" fill="rgb(232,66,20)" rx="2" ry="2" />
<text  x="237.50" y="1903.5" ></text>
</g>
<g >
<title>operator new (12 samples, 0.08%)</title><rect x="814.3" y="1781" width="0.9" height="15.0" fill="rgb(240,107,30)" rx="2" ry="2" />
<text  x="817.27" y="1791.5" ></text>
</g>
<g >
<title>__sanitizer::RunMallocHooks (8 samples, 0.05%)</title><rect x="1149.0" y="2053" width="0.6" height="15.0" fill="rgb(219,156,2)" rx="2" ry="2" />
<text  x="1151.97" y="2063.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ApplyMove (9 samples, 0.06%)</title><rect x="276.8" y="1845" width="0.7" height="15.0" fill="rgb(253,128,12)" rx="2" ry="2" />
<text  x="279.80" y="1855.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (80 samples, 0.51%)</title><rect x="10.0" y="2053" width="6.0" height="15.0" fill="rgb(225,194,49)" rx="2" ry="2" />
<text  x="13.00" y="2063.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (19 samples, 0.12%)</title><rect x="502.4" y="1733" width="1.4" height="15.0" fill="rgb(215,209,7)" rx="2" ry="2" />
<text  x="505.41" y="1743.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (20 samples, 0.13%)</title><rect x="108.4" y="1749" width="1.5" height="15.0" fill="rgb(249,125,26)" rx="2" ry="2" />
<text  x="111.41" y="1759.5" ></text>
</g>
<g >
<title>TSearchStrategy::Search (2,773 samples, 17.53%)</title><rect x="25.7" y="1957" width="206.9" height="15.0" fill="rgb(236,144,20)" rx="2" ry="2" />
<text  x="28.74" y="1967.5" >TSearchStrategy::Search</text>
</g>
<g >
<title>lczero::ChessBoard::knights (3 samples, 0.02%)</title><rect x="78.7" y="1813" width="0.2" height="15.0" fill="rgb(220,23,1)" rx="2" ry="2" />
<text  x="81.71" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (4 samples, 0.03%)</title><rect x="231.6" y="1909" width="0.3" height="15.0" fill="rgb(228,17,19)" rx="2" ry="2" />
<text  x="234.59" y="1919.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (18 samples, 0.11%)</title><rect x="352.9" y="1829" width="1.3" height="15.0" fill="rgb(249,135,7)" rx="2" ry="2" />
<text  x="355.90" y="1839.5" ></text>
</g>
<g >
<title>[unknown] (249 samples, 1.57%)</title><rect x="963.0" y="1781" width="18.5" height="15.0" fill="rgb(254,122,9)" rx="2" ry="2" />
<text  x="965.97" y="1791.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetRookAttacks (3 samples, 0.02%)</title><rect x="337.3" y="1765" width="0.2" height="15.0" fill="rgb(237,149,3)" rx="2" ry="2" />
<text  x="340.31" y="1775.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::find_node (2 samples, 0.01%)</title><rect x="472.7" y="1765" width="0.2" height="15.0" fill="rgb(218,15,34)" rx="2" ry="2" />
<text  x="475.72" y="1775.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::hash (36 samples, 0.23%)</title><rect x="312.8" y="1797" width="2.7" height="15.0" fill="rgb(217,98,53)" rx="2" ry="2" />
<text  x="315.83" y="1807.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::next_for_find (5 samples, 0.03%)</title><rect x="170.2" y="1813" width="0.4" height="15.0" fill="rgb(219,195,44)" rx="2" ry="2" />
<text  x="173.18" y="1823.5" ></text>
</g>
<g >
<title>std::array&lt;int, 64ul&gt;::operator[] (2 samples, 0.01%)</title><rect x="107.6" y="1749" width="0.1" height="15.0" fill="rgb(249,97,49)" rx="2" ry="2" />
<text  x="110.59" y="1759.5" ></text>
</g>
<g >
<title>[unknown] (150 samples, 0.95%)</title><rect x="963.0" y="773" width="11.2" height="15.0" fill="rgb(214,131,9)" rx="2" ry="2" />
<text  x="965.97" y="783.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (2 samples, 0.01%)</title><rect x="537.0" y="1717" width="0.1" height="15.0" fill="rgb(252,179,15)" rx="2" ry="2" />
<text  x="539.96" y="1727.5" ></text>
</g>
<g >
<title>GetPieceType (3 samples, 0.02%)</title><rect x="467.3" y="1781" width="0.3" height="15.0" fill="rgb(222,198,24)" rx="2" ry="2" />
<text  x="470.35" y="1791.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (2 samples, 0.01%)</title><rect x="354.7" y="1765" width="0.1" height="15.0" fill="rgb(220,156,27)" rx="2" ry="2" />
<text  x="357.69" y="1775.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::knights (24 samples, 0.15%)</title><rect x="395.6" y="1797" width="1.8" height="15.0" fill="rgb(216,205,42)" rx="2" ry="2" />
<text  x="398.57" y="1807.5" ></text>
</g>
<g >
<title>[unknown] (131 samples, 0.83%)</title><rect x="963.0" y="517" width="9.7" height="15.0" fill="rgb(233,139,48)" rx="2" ry="2" />
<text  x="965.97" y="527.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (3 samples, 0.02%)</title><rect x="359.2" y="1733" width="0.2" height="15.0" fill="rgb(227,198,20)" rx="2" ry="2" />
<text  x="362.17" y="1743.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::find_node (2 samples, 0.01%)</title><rect x="281.3" y="1845" width="0.1" height="15.0" fill="rgb(254,117,37)" rx="2" ry="2" />
<text  x="284.27" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (9 samples, 0.06%)</title><rect x="700.1" y="1765" width="0.7" height="15.0" fill="rgb(236,65,47)" rx="2" ry="2" />
<text  x="703.12" y="1775.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (44 samples, 0.28%)</title><rect x="527.8" y="1749" width="3.3" height="15.0" fill="rgb(245,180,45)" rx="2" ry="2" />
<text  x="530.78" y="1759.5" ></text>
</g>
<g >
<title>__sanitizer::Quarantine&lt;__asan::QuarantineCallback, __asan::AsanChunk&gt;::DoRecycle (3 samples, 0.02%)</title><rect x="969.8" y="69" width="0.3" height="15.0" fill="rgb(252,72,19)" rx="2" ry="2" />
<text  x="972.83" y="79.5" ></text>
</g>
<g >
<title>__asan_memcpy (2 samples, 0.01%)</title><rect x="468.2" y="1781" width="0.1" height="15.0" fill="rgb(253,34,8)" rx="2" ry="2" />
<text  x="471.17" y="1791.5" ></text>
</g>
<g >
<title>[unknown] (183 samples, 1.16%)</title><rect x="963.0" y="1061" width="13.6" height="15.0" fill="rgb(241,15,47)" rx="2" ry="2" />
<text  x="965.97" y="1071.5" ></text>
</g>
<g >
<title>TTranspositionTable::Find (2 samples, 0.01%)</title><rect x="281.3" y="1877" width="0.1" height="15.0" fill="rgb(205,80,44)" rx="2" ry="2" />
<text  x="284.27" y="1887.5" ></text>
</g>
<g >
<title>lczero::Position::Position (2 samples, 0.01%)</title><rect x="484.2" y="1749" width="0.2" height="15.0" fill="rgb(230,111,39)" rx="2" ry="2" />
<text  x="487.21" y="1759.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (13 samples, 0.08%)</title><rect x="700.9" y="1797" width="0.9" height="15.0" fill="rgb(222,72,7)" rx="2" ry="2" />
<text  x="703.87" y="1807.5" ></text>
</g>
<g >
<title>Evaluate (3 samples, 0.02%)</title><rect x="463.0" y="1813" width="0.2" height="15.0" fill="rgb(238,41,35)" rx="2" ry="2" />
<text  x="466.02" y="1823.5" ></text>
</g>
<g >
<title>[unknown] (148 samples, 0.94%)</title><rect x="963.0" y="757" width="11.0" height="15.0" fill="rgb(223,53,32)" rx="2" ry="2" />
<text  x="965.97" y="767.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (4 samples, 0.03%)</title><rect x="290.8" y="1909" width="0.3" height="15.0" fill="rgb(239,47,46)" rx="2" ry="2" />
<text  x="293.82" y="1919.5" ></text>
</g>
<g >
<title>[unknown] (110 samples, 0.70%)</title><rect x="963.0" y="293" width="8.2" height="15.0" fill="rgb(251,95,28)" rx="2" ry="2" />
<text  x="965.97" y="303.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::find_node (2 samples, 0.01%)</title><rect x="238.2" y="1829" width="0.1" height="15.0" fill="rgb(227,229,10)" rx="2" ry="2" />
<text  x="241.15" y="1839.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_construct_node&lt;int&amp;, TSearchNode&gt; (16 samples, 0.10%)</title><rect x="200.7" y="1845" width="1.2" height="15.0" fill="rgb(210,25,37)" rx="2" ry="2" />
<text  x="203.70" y="1855.5" ></text>
</g>
<g >
<title>lczero::Position::Position (3 samples, 0.02%)</title><rect x="105.3" y="1781" width="0.2" height="15.0" fill="rgb(244,38,44)" rx="2" ry="2" />
<text  x="108.27" y="1791.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (8 samples, 0.05%)</title><rect x="246.9" y="1845" width="0.6" height="15.0" fill="rgb(246,39,20)" rx="2" ry="2" />
<text  x="249.88" y="1855.5" ></text>
</g>
<g >
<title>__sanitizer::Quarantine&lt;__asan::QuarantineCallback, __asan::AsanChunk&gt;::DoRecycle (25 samples, 0.16%)</title><rect x="967.8" y="37" width="1.9" height="15.0" fill="rgb(229,182,43)" rx="2" ry="2" />
<text  x="970.82" y="47.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (4 samples, 0.03%)</title><rect x="94.3" y="1765" width="0.3" height="15.0" fill="rgb(240,103,24)" rx="2" ry="2" />
<text  x="97.31" y="1775.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.01%)</title><rect x="980.5" y="1685" width="0.1" height="15.0" fill="rgb(227,144,26)" rx="2" ry="2" />
<text  x="983.50" y="1695.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsUnderAttack (5 samples, 0.03%)</title><rect x="121.4" y="1781" width="0.4" height="15.0" fill="rgb(225,87,46)" rx="2" ry="2" />
<text  x="124.39" y="1791.5" ></text>
</g>
<g >
<title>[unknown] (110 samples, 0.70%)</title><rect x="963.0" y="277" width="8.2" height="15.0" fill="rgb(227,74,13)" rx="2" ry="2" />
<text  x="965.97" y="287.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (3 samples, 0.02%)</title><rect x="282.9" y="1829" width="0.2" height="15.0" fill="rgb(240,45,1)" rx="2" ry="2" />
<text  x="285.92" y="1839.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (10 samples, 0.06%)</title><rect x="266.7" y="1813" width="0.7" height="15.0" fill="rgb(232,168,28)" rx="2" ry="2" />
<text  x="269.65" y="1823.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (20 samples, 0.13%)</title><rect x="357.0" y="1781" width="1.5" height="15.0" fill="rgb(245,21,51)" rx="2" ry="2" />
<text  x="360.00" y="1791.5" ></text>
</g>
<g >
<title>CalcPSTScore (4 samples, 0.03%)</title><rect x="356.3" y="1797" width="0.3" height="15.0" fill="rgb(249,155,42)" rx="2" ry="2" />
<text  x="359.33" y="1807.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (3 samples, 0.02%)</title><rect x="282.5" y="1845" width="0.3" height="15.0" fill="rgb(206,220,22)" rx="2" ry="2" />
<text  x="285.54" y="1855.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (13 samples, 0.08%)</title><rect x="319.6" y="1829" width="1.0" height="15.0" fill="rgb(251,155,27)" rx="2" ry="2" />
<text  x="322.62" y="1839.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetRookAttacks (2 samples, 0.01%)</title><rect x="262.0" y="1781" width="0.1" height="15.0" fill="rgb(228,15,27)" rx="2" ry="2" />
<text  x="264.95" y="1791.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsUnderAttack (2 samples, 0.01%)</title><rect x="818.1" y="1765" width="0.1" height="15.0" fill="rgb(243,205,1)" rx="2" ry="2" />
<text  x="821.08" y="1775.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (2 samples, 0.01%)</title><rect x="242.8" y="1813" width="0.1" height="15.0" fill="rgb(210,147,44)" rx="2" ry="2" />
<text  x="245.78" y="1823.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (10 samples, 0.06%)</title><rect x="362.2" y="1765" width="0.8" height="15.0" fill="rgb(229,213,26)" rx="2" ry="2" />
<text  x="365.22" y="1775.5" ></text>
</g>
<g >
<title>TSearchStrategy::Search (219 samples, 1.38%)</title><rect x="253.1" y="1861" width="16.3" height="15.0" fill="rgb(235,67,16)" rx="2" ry="2" />
<text  x="256.07" y="1871.5" ></text>
</g>
<g >
<title>__asan_memcpy (2 samples, 0.01%)</title><rect x="276.6" y="1845" width="0.2" height="15.0" fill="rgb(249,29,40)" rx="2" ry="2" />
<text  x="279.65" y="1855.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::find_node_impl&lt;lczero::Position, TTranspositionTable::TPositionEqualFn&gt; (25 samples, 0.16%)</title><rect x="58.0" y="1813" width="1.8" height="15.0" fill="rgb(236,131,16)" rx="2" ry="2" />
<text  x="60.97" y="1823.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (6 samples, 0.04%)</title><rect x="31.3" y="1861" width="0.5" height="15.0" fill="rgb(234,72,35)" rx="2" ry="2" />
<text  x="34.34" y="1871.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ChessBoard (3 samples, 0.02%)</title><rect x="92.1" y="1797" width="0.2" height="15.0" fill="rgb(217,91,17)" rx="2" ry="2" />
<text  x="95.07" y="1807.5" ></text>
</g>
<g >
<title>__asan::asan_delete (2 samples, 0.01%)</title><rect x="570.4" y="1813" width="0.1" height="15.0" fill="rgb(250,65,1)" rx="2" ry="2" />
<text  x="573.38" y="1823.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (8 samples, 0.05%)</title><rect x="499.8" y="1733" width="0.6" height="15.0" fill="rgb(251,81,20)" rx="2" ry="2" />
<text  x="502.80" y="1743.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsUnderAttack (14 samples, 0.09%)</title><rect x="158.9" y="1813" width="1.1" height="15.0" fill="rgb(239,170,17)" rx="2" ry="2" />
<text  x="161.92" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ChessBoard (2 samples, 0.01%)</title><rect x="566.1" y="1781" width="0.1" height="15.0" fill="rgb(230,59,41)" rx="2" ry="2" />
<text  x="569.05" y="1791.5" ></text>
</g>
<g >
<title>boost::unordered::unordered_map&lt;lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt; &gt;::find (3 samples, 0.02%)</title><rect x="472.7" y="1781" width="0.2" height="15.0" fill="rgb(239,19,35)" rx="2" ry="2" />
<text  x="475.72" y="1791.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_begin (2 samples, 0.01%)</title><rect x="945.0" y="1829" width="0.1" height="15.0" fill="rgb(234,122,34)" rx="2" ry="2" />
<text  x="947.99" y="1839.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::hash (2 samples, 0.01%)</title><rect x="472.7" y="1749" width="0.2" height="15.0" fill="rgb(247,190,20)" rx="2" ry="2" />
<text  x="475.72" y="1759.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (2 samples, 0.01%)</title><rect x="504.4" y="1685" width="0.1" height="15.0" fill="rgb(232,175,39)" rx="2" ry="2" />
<text  x="507.35" y="1695.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (2 samples, 0.01%)</title><rect x="190.5" y="1813" width="0.1" height="15.0" fill="rgb(207,187,51)" rx="2" ry="2" />
<text  x="193.48" y="1823.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetRookAttacks (25 samples, 0.16%)</title><rect x="620.0" y="1781" width="1.9" height="15.0" fill="rgb(248,61,4)" rx="2" ry="2" />
<text  x="622.99" y="1791.5" ></text>
</g>
<g >
<title>TTranspositionTable::Insert (7 samples, 0.04%)</title><rect x="269.9" y="1861" width="0.5" height="15.0" fill="rgb(252,11,34)" rx="2" ry="2" />
<text  x="272.86" y="1871.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_get_insert_equal_pos (46 samples, 0.29%)</title><rect x="942.1" y="1845" width="3.4" height="15.0" fill="rgb(220,84,53)" rx="2" ry="2" />
<text  x="945.08" y="1855.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.01%)</title><rect x="979.1" y="1429" width="0.1" height="15.0" fill="rgb(220,19,15)" rx="2" ry="2" />
<text  x="982.08" y="1439.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (41 samples, 0.26%)</title><rect x="113.0" y="1797" width="3.0" height="15.0" fill="rgb(221,81,14)" rx="2" ry="2" />
<text  x="115.96" y="1807.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_create_node&lt;int&amp;, TSearchNode&gt; (71 samples, 0.45%)</title><rect x="936.8" y="1845" width="5.3" height="15.0" fill="rgb(250,213,5)" rx="2" ry="2" />
<text  x="939.78" y="1855.5" ></text>
</g>
<g >
<title>TTranspositionTable::TPositionEqualFn::operator (7 samples, 0.04%)</title><rect x="168.9" y="1813" width="0.5" height="15.0" fill="rgb(217,3,14)" rx="2" ry="2" />
<text  x="171.92" y="1823.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (198 samples, 1.25%)</title><rect x="60.4" y="1861" width="14.7" height="15.0" fill="rgb(236,78,40)" rx="2" ry="2" />
<text  x="63.36" y="1871.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (2 samples, 0.01%)</title><rect x="506.8" y="1669" width="0.2" height="15.0" fill="rgb(246,14,22)" rx="2" ry="2" />
<text  x="509.81" y="1679.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::hash (7 samples, 0.04%)</title><rect x="32.2" y="1813" width="0.5" height="15.0" fill="rgb(216,91,2)" rx="2" ry="2" />
<text  x="35.16" y="1823.5" ></text>
</g>
<g >
<title>THistoryHeuristics::GetCounterMove (12 samples, 0.08%)</title><rect x="310.7" y="1845" width="0.9" height="15.0" fill="rgb(237,164,22)" rx="2" ry="2" />
<text  x="313.74" y="1855.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_get_insert_equal_pos (6 samples, 0.04%)</title><rect x="230.6" y="1893" width="0.5" height="15.0" fill="rgb(250,41,22)" rx="2" ry="2" />
<text  x="233.62" y="1903.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (2 samples, 0.01%)</title><rect x="64.5" y="1765" width="0.1" height="15.0" fill="rgb(208,94,32)" rx="2" ry="2" />
<text  x="67.46" y="1775.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (83 samples, 0.52%)</title><rect x="317.8" y="1861" width="6.2" height="15.0" fill="rgb(252,70,42)" rx="2" ry="2" />
<text  x="320.76" y="1871.5" ></text>
</g>
<g >
<title>lczero::BitBoard::get (10 samples, 0.06%)</title><rect x="731.1" y="1829" width="0.7" height="15.0" fill="rgb(209,63,47)" rx="2" ry="2" />
<text  x="734.09" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (6 samples, 0.04%)</title><rect x="515.6" y="1653" width="0.5" height="15.0" fill="rgb(216,21,9)" rx="2" ry="2" />
<text  x="518.62" y="1663.5" ></text>
</g>
<g >
<title>__asan::AsanChunk::UsedSize (11 samples, 0.07%)</title><rect x="1105.9" y="2053" width="0.8" height="15.0" fill="rgb(212,92,2)" rx="2" ry="2" />
<text  x="1108.92" y="2063.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetRookAttacks (3 samples, 0.02%)</title><rect x="534.9" y="1733" width="0.2" height="15.0" fill="rgb(236,173,19)" rx="2" ry="2" />
<text  x="537.87" y="1743.5" ></text>
</g>
<g >
<title>[unknown] (160 samples, 1.01%)</title><rect x="963.0" y="901" width="11.9" height="15.0" fill="rgb(229,212,0)" rx="2" ry="2" />
<text  x="965.97" y="911.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (8 samples, 0.05%)</title><rect x="242.7" y="1845" width="0.6" height="15.0" fill="rgb(213,155,5)" rx="2" ry="2" />
<text  x="245.70" y="1855.5" ></text>
</g>
<g >
<title>std::array&lt;int, 64ul&gt;::operator[] (2 samples, 0.01%)</title><rect x="508.9" y="1701" width="0.2" height="15.0" fill="rgb(207,35,48)" rx="2" ry="2" />
<text  x="511.90" y="1711.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (2 samples, 0.01%)</title><rect x="262.8" y="1797" width="0.2" height="15.0" fill="rgb(215,213,35)" rx="2" ry="2" />
<text  x="265.85" y="1807.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (5 samples, 0.03%)</title><rect x="205.5" y="1813" width="0.4" height="15.0" fill="rgb(212,62,14)" rx="2" ry="2" />
<text  x="208.55" y="1823.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (9 samples, 0.06%)</title><rect x="322.5" y="1813" width="0.6" height="15.0" fill="rgb(210,8,50)" rx="2" ry="2" />
<text  x="325.46" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (146 samples, 0.92%)</title><rect x="129.6" y="1813" width="10.9" height="15.0" fill="rgb(241,25,47)" rx="2" ry="2" />
<text  x="132.60" y="1823.5" ></text>
</g>
<g >
<title>std::array&lt;int, 64ul&gt;::operator[] (2 samples, 0.01%)</title><rect x="254.3" y="1829" width="0.2" height="15.0" fill="rgb(205,191,31)" rx="2" ry="2" />
<text  x="257.34" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ApplyMove (2 samples, 0.01%)</title><rect x="503.7" y="1701" width="0.1" height="15.0" fill="rgb(206,112,17)" rx="2" ry="2" />
<text  x="506.68" y="1711.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetBishopAttacks (2 samples, 0.01%)</title><rect x="273.0" y="1813" width="0.1" height="15.0" fill="rgb(207,109,43)" rx="2" ry="2" />
<text  x="275.99" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ApplyMove (6 samples, 0.04%)</title><rect x="468.3" y="1781" width="0.5" height="15.0" fill="rgb(242,16,54)" rx="2" ry="2" />
<text  x="471.32" y="1791.5" ></text>
</g>
<g >
<title>boost::unordered::unordered_map&lt;lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt; &gt;::find (252 samples, 1.59%)</title><rect x="708.2" y="1813" width="18.8" height="15.0" fill="rgb(251,128,38)" rx="2" ry="2" />
<text  x="711.18" y="1823.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_construct_node&lt;int&amp;, TSearchNode&gt; (6 samples, 0.04%)</title><rect x="954.1" y="1845" width="0.4" height="15.0" fill="rgb(244,172,34)" rx="2" ry="2" />
<text  x="957.09" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (4 samples, 0.03%)</title><rect x="227.5" y="1829" width="0.3" height="15.0" fill="rgb(247,13,18)" rx="2" ry="2" />
<text  x="230.48" y="1839.5" ></text>
</g>
<g >
<title>CalcPSTScore (3 samples, 0.02%)</title><rect x="27.2" y="1893" width="0.2" height="15.0" fill="rgb(251,173,43)" rx="2" ry="2" />
<text  x="30.16" y="1903.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::reserve (32 samples, 0.20%)</title><rect x="652.4" y="1781" width="2.4" height="15.0" fill="rgb(228,205,42)" rx="2" ry="2" />
<text  x="655.45" y="1791.5" ></text>
</g>
<g >
<title>IsCapture (2 samples, 0.01%)</title><rect x="294.6" y="1861" width="0.1" height="15.0" fill="rgb(222,84,51)" rx="2" ry="2" />
<text  x="297.55" y="1871.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (14 samples, 0.09%)</title><rect x="366.3" y="1813" width="1.0" height="15.0" fill="rgb(226,165,20)" rx="2" ry="2" />
<text  x="369.25" y="1823.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (3 samples, 0.02%)</title><rect x="955.6" y="1829" width="0.2" height="15.0" fill="rgb(253,199,9)" rx="2" ry="2" />
<text  x="958.58" y="1839.5" ></text>
</g>
<g >
<title>[unknown] (159 samples, 1.01%)</title><rect x="963.0" y="885" width="11.8" height="15.0" fill="rgb(250,213,4)" rx="2" ry="2" />
<text  x="965.97" y="895.5" ></text>
</g>
<g >
<title>__asan::Allocator::QuarantineChunk (2 samples, 0.01%)</title><rect x="948.0" y="1829" width="0.2" height="15.0" fill="rgb(254,21,8)" rx="2" ry="2" />
<text  x="951.05" y="1839.5" ></text>
</g>
<g >
<title>__asan_memcpy (3 samples, 0.02%)</title><rect x="339.1" y="1781" width="0.2" height="15.0" fill="rgb(240,131,21)" rx="2" ry="2" />
<text  x="342.10" y="1791.5" ></text>
</g>
<g >
<title>std::pair&lt;std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&gt;::pair&lt;std::_Rb_tree_node&lt;std::pair&lt;int const, TSearchNode&gt; &gt;*&amp;, std::_Rb_tree_node_base*&amp;, true&gt; (4 samples, 0.03%)</title><rect x="955.0" y="1845" width="0.3" height="15.0" fill="rgb(234,99,28)" rx="2" ry="2" />
<text  x="957.98" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::operator== (5 samples, 0.03%)</title><rect x="169.1" y="1797" width="0.3" height="15.0" fill="rgb(238,60,35)" rx="2" ry="2" />
<text  x="172.06" y="1807.5" ></text>
</g>
<g >
<title>[unknown] (192 samples, 1.21%)</title><rect x="963.0" y="1125" width="14.3" height="15.0" fill="rgb(223,158,8)" rx="2" ry="2" />
<text  x="965.97" y="1135.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (22 samples, 0.14%)</title><rect x="257.5" y="1813" width="1.7" height="15.0" fill="rgb(225,77,21)" rx="2" ry="2" />
<text  x="260.55" y="1823.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_get_insert_equal_pos (17 samples, 0.11%)</title><rect x="214.9" y="1861" width="1.2" height="15.0" fill="rgb(210,63,33)" rx="2" ry="2" />
<text  x="217.87" y="1871.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (3 samples, 0.02%)</title><rect x="976.6" y="1061" width="0.2" height="15.0" fill="rgb(224,162,29)" rx="2" ry="2" />
<text  x="979.62" y="1071.5" ></text>
</g>
<g >
<title>__sanitizer::QuarantineCache&lt;__asan::QuarantineCallback&gt;::Enqueue (28 samples, 0.18%)</title><rect x="995.0" y="2037" width="2.1" height="15.0" fill="rgb(233,61,10)" rx="2" ry="2" />
<text  x="998.05" y="2047.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.01%)</title><rect x="367.4" y="1829" width="0.1" height="15.0" fill="rgb(213,204,51)" rx="2" ry="2" />
<text  x="370.37" y="1839.5" ></text>
</g>
<g >
<title>__pthread_getspecific (3 samples, 0.02%)</title><rect x="202.3" y="1829" width="0.3" height="15.0" fill="rgb(241,9,53)" rx="2" ry="2" />
<text  x="205.34" y="1839.5" ></text>
</g>
<g >
<title>TSearchStrategy::MakeMove (2,773 samples, 17.53%)</title><rect x="25.7" y="1973" width="206.9" height="15.0" fill="rgb(250,141,47)" rx="2" ry="2" />
<text  x="28.74" y="1983.5" >TSearchStrategy::MakeMove</text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (36 samples, 0.23%)</title><rect x="558.1" y="1765" width="2.7" height="15.0" fill="rgb(239,160,34)" rx="2" ry="2" />
<text  x="561.07" y="1775.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (2 samples, 0.01%)</title><rect x="516.3" y="1605" width="0.1" height="15.0" fill="rgb(236,198,12)" rx="2" ry="2" />
<text  x="519.29" y="1615.5" ></text>
</g>
<g >
<title>[unknown] (154 samples, 0.97%)</title><rect x="963.0" y="837" width="11.5" height="15.0" fill="rgb(213,35,1)" rx="2" ry="2" />
<text  x="965.97" y="847.5" ></text>
</g>
<g >
<title>GetPieceType (5 samples, 0.03%)</title><rect x="352.2" y="1813" width="0.3" height="15.0" fill="rgb(238,125,13)" rx="2" ry="2" />
<text  x="355.15" y="1823.5" ></text>
</g>
<g >
<title>GetPieceType (3 samples, 0.02%)</title><rect x="502.0" y="1733" width="0.2" height="15.0" fill="rgb(243,222,16)" rx="2" ry="2" />
<text  x="504.97" y="1743.5" ></text>
</g>
<g >
<title>GetPieceType (7 samples, 0.04%)</title><rect x="495.4" y="1749" width="0.5" height="15.0" fill="rgb(211,171,39)" rx="2" ry="2" />
<text  x="498.40" y="1759.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (7 samples, 0.04%)</title><rect x="357.4" y="1717" width="0.6" height="15.0" fill="rgb(241,119,28)" rx="2" ry="2" />
<text  x="360.45" y="1727.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (10 samples, 0.06%)</title><rect x="357.3" y="1733" width="0.7" height="15.0" fill="rgb(205,125,24)" rx="2" ry="2" />
<text  x="360.30" y="1743.5" ></text>
</g>
<g >
<title>TSearchStrategy::CalcMoveOrder (13 samples, 0.08%)</title><rect x="292.0" y="1893" width="1.0" height="15.0" fill="rgb(251,97,47)" rx="2" ry="2" />
<text  x="295.02" y="1903.5" ></text>
</g>
<g >
<title>IsPromotion (5 samples, 0.03%)</title><rect x="51.8" y="1845" width="0.4" height="15.0" fill="rgb(230,177,27)" rx="2" ry="2" />
<text  x="54.78" y="1855.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (3 samples, 0.02%)</title><rect x="239.1" y="1829" width="0.2" height="15.0" fill="rgb(233,198,44)" rx="2" ry="2" />
<text  x="242.12" y="1839.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::~_Rb_tree (4 samples, 0.03%)</title><rect x="231.1" y="1893" width="0.3" height="15.0" fill="rgb(233,210,35)" rx="2" ry="2" />
<text  x="234.06" y="1903.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (7 samples, 0.04%)</title><rect x="255.8" y="1829" width="0.5" height="15.0" fill="rgb(211,22,40)" rx="2" ry="2" />
<text  x="258.76" y="1839.5" ></text>
</g>
<g >
<title>TSearchStrategy::CalcMoveOrder (2 samples, 0.01%)</title><rect x="25.9" y="1925" width="0.1" height="15.0" fill="rgb(253,70,39)" rx="2" ry="2" />
<text  x="28.89" y="1935.5" ></text>
</g>
<g >
<title>TSearchStrategy::Search (644 samples, 4.07%)</title><rect x="237.3" y="1893" width="48.1" height="15.0" fill="rgb(213,143,5)" rx="2" ry="2" />
<text  x="240.33" y="1903.5" >TSea..</text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.01%)</title><rect x="979.6" y="1509" width="0.2" height="15.0" fill="rgb(207,128,7)" rx="2" ry="2" />
<text  x="982.61" y="1519.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (2 samples, 0.01%)</title><rect x="35.4" y="1797" width="0.2" height="15.0" fill="rgb(219,219,26)" rx="2" ry="2" />
<text  x="38.44" y="1807.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_create_node&lt;int&amp;, TSearchNode&gt; (17 samples, 0.11%)</title><rect x="278.3" y="1845" width="1.3" height="15.0" fill="rgb(241,73,28)" rx="2" ry="2" />
<text  x="281.29" y="1855.5" ></text>
</g>
<g >
<title>IsCapture (3 samples, 0.02%)</title><rect x="504.0" y="1749" width="0.2" height="15.0" fill="rgb(251,6,14)" rx="2" ry="2" />
<text  x="506.98" y="1759.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::knights (2 samples, 0.01%)</title><rect x="90.3" y="1781" width="0.1" height="15.0" fill="rgb(215,203,21)" rx="2" ry="2" />
<text  x="93.28" y="1791.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (19 samples, 0.12%)</title><rect x="497.1" y="1749" width="1.4" height="15.0" fill="rgb(245,126,32)" rx="2" ry="2" />
<text  x="500.12" y="1759.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ApplyMove (3 samples, 0.02%)</title><rect x="243.1" y="1797" width="0.2" height="15.0" fill="rgb(250,196,10)" rx="2" ry="2" />
<text  x="246.08" y="1807.5" ></text>
</g>
<g >
<title>[unknown] (234 samples, 1.48%)</title><rect x="963.0" y="1653" width="17.4" height="15.0" fill="rgb(250,177,43)" rx="2" ry="2" />
<text  x="965.97" y="1663.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::back (2 samples, 0.01%)</title><rect x="249.7" y="1813" width="0.2" height="15.0" fill="rgb(227,68,16)" rx="2" ry="2" />
<text  x="252.72" y="1823.5" ></text>
</g>
<g >
<title>GetPieceType (2 samples, 0.01%)</title><rect x="484.4" y="1765" width="0.1" height="15.0" fill="rgb(223,189,10)" rx="2" ry="2" />
<text  x="487.36" y="1775.5" ></text>
</g>
<g >
<title>lczero::Position::Position (12 samples, 0.08%)</title><rect x="307.0" y="1813" width="0.9" height="15.0" fill="rgb(246,148,0)" rx="2" ry="2" />
<text  x="310.01" y="1823.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::back (2 samples, 0.01%)</title><rect x="525.8" y="1685" width="0.1" height="15.0" fill="rgb(207,192,47)" rx="2" ry="2" />
<text  x="528.77" y="1695.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (586 samples, 3.71%)</title><rect x="818.2" y="1797" width="43.7" height="15.0" fill="rgb(219,181,41)" rx="2" ry="2" />
<text  x="821.23" y="1807.5" >std:..</text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (3 samples, 0.02%)</title><rect x="295.6" y="1861" width="0.2" height="15.0" fill="rgb(225,171,38)" rx="2" ry="2" />
<text  x="298.60" y="1871.5" ></text>
</g>
<g >
<title>IsCapture (16 samples, 0.10%)</title><rect x="92.4" y="1829" width="1.2" height="15.0" fill="rgb(232,28,14)" rx="2" ry="2" />
<text  x="95.44" y="1839.5" ></text>
</g>
<g >
<title>GetPieceType (3 samples, 0.02%)</title><rect x="481.2" y="1781" width="0.2" height="15.0" fill="rgb(205,39,36)" rx="2" ry="2" />
<text  x="484.22" y="1791.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.03%)</title><rect x="913.5" y="1781" width="0.3" height="15.0" fill="rgb(254,203,42)" rx="2" ry="2" />
<text  x="916.50" y="1791.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (2 samples, 0.01%)</title><rect x="102.7" y="1765" width="0.1" height="15.0" fill="rgb(214,134,38)" rx="2" ry="2" />
<text  x="105.66" y="1775.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (7 samples, 0.04%)</title><rect x="517.3" y="1637" width="0.5" height="15.0" fill="rgb(250,136,0)" rx="2" ry="2" />
<text  x="520.26" y="1647.5" ></text>
</g>
<g >
<title>[unknown] (95 samples, 0.60%)</title><rect x="963.0" y="101" width="7.1" height="15.0" fill="rgb(247,149,35)" rx="2" ry="2" />
<text  x="965.97" y="111.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsUnderAttack (2 samples, 0.01%)</title><rect x="258.3" y="1781" width="0.1" height="15.0" fill="rgb(240,185,48)" rx="2" ry="2" />
<text  x="261.30" y="1791.5" ></text>
</g>
<g >
<title>__asan::asan_memalign (9 samples, 0.06%)</title><rect x="1139.5" y="2053" width="0.7" height="15.0" fill="rgb(228,107,15)" rx="2" ry="2" />
<text  x="1142.49" y="2063.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (5 samples, 0.03%)</title><rect x="353.0" y="1797" width="0.4" height="15.0" fill="rgb(226,62,39)" rx="2" ry="2" />
<text  x="356.05" y="1807.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (111 samples, 0.70%)</title><rect x="355.0" y="1829" width="8.3" height="15.0" fill="rgb(244,36,48)" rx="2" ry="2" />
<text  x="357.99" y="1839.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (47 samples, 0.30%)</title><rect x="87.7" y="1813" width="3.5" height="15.0" fill="rgb(235,122,0)" rx="2" ry="2" />
<text  x="90.67" y="1823.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (17 samples, 0.11%)</title><rect x="236.1" y="1893" width="1.2" height="15.0" fill="rgb(228,84,50)" rx="2" ry="2" />
<text  x="239.06" y="1903.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (3 samples, 0.02%)</title><rect x="308.3" y="1813" width="0.2" height="15.0" fill="rgb(230,88,15)" rx="2" ry="2" />
<text  x="311.28" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (2 samples, 0.01%)</title><rect x="94.5" y="1749" width="0.1" height="15.0" fill="rgb(210,150,41)" rx="2" ry="2" />
<text  x="97.46" y="1759.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (4 samples, 0.03%)</title><rect x="293.1" y="1877" width="0.3" height="15.0" fill="rgb(243,130,18)" rx="2" ry="2" />
<text  x="296.14" y="1887.5" ></text>
</g>
<g >
<title>__asan_region_is_poisoned (5 samples, 0.03%)</title><rect x="705.4" y="1765" width="0.4" height="15.0" fill="rgb(231,25,11)" rx="2" ry="2" />
<text  x="708.42" y="1775.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (24 samples, 0.15%)</title><rect x="122.1" y="1781" width="1.8" height="15.0" fill="rgb(225,9,11)" rx="2" ry="2" />
<text  x="125.06" y="1791.5" ></text>
</g>
<g >
<title>lczero::BitBoard::get (2 samples, 0.01%)</title><rect x="108.0" y="1733" width="0.2" height="15.0" fill="rgb(224,228,50)" rx="2" ry="2" />
<text  x="111.03" y="1743.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (5 samples, 0.03%)</title><rect x="957.1" y="1861" width="0.4" height="15.0" fill="rgb(232,189,31)" rx="2" ry="2" />
<text  x="960.15" y="1871.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::operator== (9 samples, 0.06%)</title><rect x="316.2" y="1781" width="0.7" height="15.0" fill="rgb(242,31,7)" rx="2" ry="2" />
<text  x="319.19" y="1791.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (74 samples, 0.47%)</title><rect x="335.4" y="1829" width="5.5" height="15.0" fill="rgb(241,219,54)" rx="2" ry="2" />
<text  x="338.37" y="1839.5" ></text>
</g>
<g >
<title>TTranspositionTable::Find (6 samples, 0.04%)</title><rect x="264.6" y="1845" width="0.4" height="15.0" fill="rgb(209,94,35)" rx="2" ry="2" />
<text  x="267.56" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ApplyMove (3 samples, 0.02%)</title><rect x="490.6" y="1733" width="0.2" height="15.0" fill="rgb(218,86,34)" rx="2" ry="2" />
<text  x="493.62" y="1743.5" ></text>
</g>
<g >
<title>std::array&lt;int, 64ul&gt;::operator[] (57 samples, 0.36%)</title><rect x="410.0" y="1813" width="4.2" height="15.0" fill="rgb(216,180,51)" rx="2" ry="2" />
<text  x="412.97" y="1823.5" ></text>
</g>
<g >
<title>TTranspositionTable::Find (29 samples, 0.18%)</title><rect x="915.4" y="1861" width="2.1" height="15.0" fill="rgb(226,142,10)" rx="2" ry="2" />
<text  x="918.37" y="1871.5" ></text>
</g>
<g >
<title>boost::unordered::unordered_map&lt;lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt; &gt;::find (25 samples, 0.16%)</title><rect x="168.7" y="1845" width="1.9" height="15.0" fill="rgb(254,197,26)" rx="2" ry="2" />
<text  x="171.69" y="1855.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::find_node_impl&lt;lczero::Position, TTranspositionTable::TPositionEqualFn&gt; (22 samples, 0.14%)</title><rect x="867.1" y="1813" width="1.6" height="15.0" fill="rgb(220,13,31)" rx="2" ry="2" />
<text  x="870.10" y="1823.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (2 samples, 0.01%)</title><rect x="514.5" y="1605" width="0.1" height="15.0" fill="rgb(235,25,6)" rx="2" ry="2" />
<text  x="517.50" y="1615.5" ></text>
</g>
<g >
<title>std::array&lt;std::array&lt;std::array&lt;int, 64ul&gt;, 6ul&gt;, 2ul&gt;::at (2 samples, 0.01%)</title><rect x="343.3" y="1813" width="0.1" height="15.0" fill="rgb(213,92,26)" rx="2" ry="2" />
<text  x="346.27" y="1823.5" ></text>
</g>
<g >
<title>[unknown] (152 samples, 0.96%)</title><rect x="963.0" y="821" width="11.3" height="15.0" fill="rgb(236,213,2)" rx="2" ry="2" />
<text  x="965.97" y="831.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ApplyMove (2 samples, 0.01%)</title><rect x="340.7" y="1797" width="0.1" height="15.0" fill="rgb(224,69,16)" rx="2" ry="2" />
<text  x="343.66" y="1807.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (24 samples, 0.15%)</title><rect x="357.0" y="1797" width="1.8" height="15.0" fill="rgb(221,106,2)" rx="2" ry="2" />
<text  x="360.00" y="1807.5" ></text>
</g>
<g >
<title>[unknown] (225 samples, 1.42%)</title><rect x="963.0" y="1525" width="16.8" height="15.0" fill="rgb(248,64,48)" rx="2" ry="2" />
<text  x="965.97" y="1535.5" ></text>
</g>
<g >
<title>std::array&lt;int, 2ul&gt;::fill (4 samples, 0.03%)</title><rect x="406.5" y="1813" width="0.3" height="15.0" fill="rgb(219,161,20)" rx="2" ry="2" />
<text  x="409.54" y="1823.5" ></text>
</g>
<g >
<title>GetPieceType (2 samples, 0.01%)</title><rect x="240.5" y="1845" width="0.2" height="15.0" fill="rgb(249,125,3)" rx="2" ry="2" />
<text  x="243.54" y="1855.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::find_node_impl&lt;lczero::Position, TTranspositionTable::TPositionEqualFn&gt; (22 samples, 0.14%)</title><rect x="168.9" y="1829" width="1.7" height="15.0" fill="rgb(241,228,29)" rx="2" ry="2" />
<text  x="171.92" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (14 samples, 0.09%)</title><rect x="336.5" y="1781" width="1.0" height="15.0" fill="rgb(231,110,31)" rx="2" ry="2" />
<text  x="339.48" y="1791.5" ></text>
</g>
<g >
<title>__asan_memcpy (2 samples, 0.01%)</title><rect x="312.4" y="1829" width="0.1" height="15.0" fill="rgb(215,141,20)" rx="2" ry="2" />
<text  x="315.39" y="1839.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (13 samples, 0.08%)</title><rect x="499.7" y="1749" width="1.0" height="15.0" fill="rgb(216,57,23)" rx="2" ry="2" />
<text  x="502.73" y="1759.5" ></text>
</g>
<g >
<title>lczero::Position::Position (3 samples, 0.02%)</title><rect x="506.4" y="1717" width="0.3" height="15.0" fill="rgb(221,203,16)" rx="2" ry="2" />
<text  x="509.44" y="1727.5" ></text>
</g>
<g >
<title>lczero::Position::Position (21 samples, 0.13%)</title><rect x="276.4" y="1861" width="1.5" height="15.0" fill="rgb(248,178,23)" rx="2" ry="2" />
<text  x="279.35" y="1871.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (156 samples, 0.99%)</title><rect x="1007.4" y="2005" width="11.7" height="15.0" fill="rgb(232,172,21)" rx="2" ry="2" />
<text  x="1010.43" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (13 samples, 0.08%)</title><rect x="1019.1" y="2021" width="0.9" height="15.0" fill="rgb(235,36,35)" rx="2" ry="2" />
<text  x="1022.07" y="2031.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::next_for_find (3 samples, 0.02%)</title><rect x="59.6" y="1797" width="0.2" height="15.0" fill="rgb(231,142,26)" rx="2" ry="2" />
<text  x="62.61" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::kings (4 samples, 0.03%)</title><rect x="444.5" y="1781" width="0.3" height="15.0" fill="rgb(227,189,41)" rx="2" ry="2" />
<text  x="447.52" y="1791.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (2 samples, 0.01%)</title><rect x="64.5" y="1781" width="0.1" height="15.0" fill="rgb(223,224,44)" rx="2" ry="2" />
<text  x="67.46" y="1791.5" ></text>
</g>
<g >
<title>lczero::Position::Hash (4 samples, 0.03%)</title><rect x="235.4" y="1813" width="0.3" height="15.0" fill="rgb(210,36,38)" rx="2" ry="2" />
<text  x="238.39" y="1823.5" ></text>
</g>
<g >
<title>IsCapture (6 samples, 0.04%)</title><rect x="51.3" y="1845" width="0.5" height="15.0" fill="rgb(210,213,2)" rx="2" ry="2" />
<text  x="54.33" y="1855.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (3 samples, 0.02%)</title><rect x="225.6" y="1813" width="0.2" height="15.0" fill="rgb(226,195,39)" rx="2" ry="2" />
<text  x="228.62" y="1823.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::back (85 samples, 0.54%)</title><rect x="804.5" y="1781" width="6.3" height="15.0" fill="rgb(236,65,14)" rx="2" ry="2" />
<text  x="807.50" y="1791.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::back (7 samples, 0.04%)</title><rect x="273.4" y="1813" width="0.6" height="15.0" fill="rgb(233,131,41)" rx="2" ry="2" />
<text  x="276.44" y="1823.5" ></text>
</g>
<g >
<title>[unknown] (146 samples, 0.92%)</title><rect x="963.0" y="725" width="10.9" height="15.0" fill="rgb(242,221,19)" rx="2" ry="2" />
<text  x="965.97" y="735.5" ></text>
</g>
<g >
<title>TTranspositionTable::TPositionEqualFn::operator (8 samples, 0.05%)</title><rect x="867.2" y="1797" width="0.6" height="15.0" fill="rgb(254,202,29)" rx="2" ry="2" />
<text  x="870.17" y="1807.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (3 samples, 0.02%)</title><rect x="977.0" y="1077" width="0.2" height="15.0" fill="rgb(212,76,23)" rx="2" ry="2" />
<text  x="979.99" y="1087.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::back (3 samples, 0.02%)</title><rect x="557.8" y="1765" width="0.3" height="15.0" fill="rgb(223,197,27)" rx="2" ry="2" />
<text  x="560.85" y="1775.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (24 samples, 0.15%)</title><rect x="274.5" y="1813" width="1.8" height="15.0" fill="rgb(222,155,39)" rx="2" ry="2" />
<text  x="277.49" y="1823.5" ></text>
</g>
<g >
<title>GetPieceType (91 samples, 0.58%)</title><rect x="439.0" y="1797" width="6.8" height="15.0" fill="rgb(236,49,37)" rx="2" ry="2" />
<text  x="442.00" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::Hash (2 samples, 0.01%)</title><rect x="915.6" y="1781" width="0.1" height="15.0" fill="rgb(238,198,43)" rx="2" ry="2" />
<text  x="918.59" y="1791.5" ></text>
</g>
<g >
<title>CalcPSTScore (36 samples, 0.23%)</title><rect x="60.4" y="1845" width="2.6" height="15.0" fill="rgb(244,58,38)" rx="2" ry="2" />
<text  x="63.36" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (2 samples, 0.01%)</title><rect x="111.5" y="1701" width="0.2" height="15.0" fill="rgb(235,131,43)" rx="2" ry="2" />
<text  x="114.54" y="1711.5" ></text>
</g>
<g >
<title>CalcPSTScore (2 samples, 0.01%)</title><rect x="108.9" y="1717" width="0.1" height="15.0" fill="rgb(225,57,41)" rx="2" ry="2" />
<text  x="111.86" y="1727.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (15 samples, 0.09%)</title><rect x="483.2" y="1765" width="1.2" height="15.0" fill="rgb(221,218,51)" rx="2" ry="2" />
<text  x="486.24" y="1775.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ApplyMove (2 samples, 0.01%)</title><rect x="31.6" y="1829" width="0.1" height="15.0" fill="rgb(241,125,15)" rx="2" ry="2" />
<text  x="34.56" y="1839.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (3 samples, 0.02%)</title><rect x="953.3" y="1861" width="0.3" height="15.0" fill="rgb(241,181,40)" rx="2" ry="2" />
<text  x="956.34" y="1871.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (14 samples, 0.09%)</title><rect x="114.9" y="1765" width="1.0" height="15.0" fill="rgb(239,138,6)" rx="2" ry="2" />
<text  x="117.90" y="1775.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (26 samples, 0.16%)</title><rect x="267.5" y="1829" width="1.9" height="15.0" fill="rgb(209,191,20)" rx="2" ry="2" />
<text  x="270.47" y="1839.5" ></text>
</g>
<g >
<title>TTranspositionTable::Find (2 samples, 0.01%)</title><rect x="510.8" y="1701" width="0.2" height="15.0" fill="rgb(220,222,49)" rx="2" ry="2" />
<text  x="513.84" y="1711.5" ></text>
</g>
<g >
<title>boost::unordered::unordered_map&lt;lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt; &gt;::find (22 samples, 0.14%)</title><rect x="867.1" y="1829" width="1.6" height="15.0" fill="rgb(239,6,15)" rx="2" ry="2" />
<text  x="870.10" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateKingAttackInfo (5 samples, 0.03%)</title><rect x="871.1" y="1829" width="0.3" height="15.0" fill="rgb(211,104,14)" rx="2" ry="2" />
<text  x="874.05" y="1839.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.01%)</title><rect x="948.6" y="1829" width="0.1" height="15.0" fill="rgb(254,61,6)" rx="2" ry="2" />
<text  x="951.57" y="1839.5" ></text>
</g>
<g >
<title>CalcPSTScore (7 samples, 0.04%)</title><rect x="256.9" y="1813" width="0.5" height="15.0" fill="rgb(216,148,33)" rx="2" ry="2" />
<text  x="259.88" y="1823.5" ></text>
</g>
<g >
<title>lczero::Position::Position (2 samples, 0.01%)</title><rect x="513.8" y="1653" width="0.2" height="15.0" fill="rgb(236,108,32)" rx="2" ry="2" />
<text  x="516.83" y="1663.5" ></text>
</g>
<g >
<title>boost::unordered::detail::func::construct_node_pair&lt;std::allocator&lt;boost::unordered::detail::ptr_node&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt; &gt;, lczero::Position const&amp;, TTranspositionTable::TNode&gt; (6 samples, 0.04%)</title><rect x="868.7" y="1813" width="0.5" height="15.0" fill="rgb(219,79,17)" rx="2" ry="2" />
<text  x="871.74" y="1823.5" ></text>
</g>
<g >
<title>lczero::Position::Position (10 samples, 0.06%)</title><rect x="338.9" y="1797" width="0.7" height="15.0" fill="rgb(225,53,53)" rx="2" ry="2" />
<text  x="341.87" y="1807.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::find_node_impl&lt;lczero::Position, TTranspositionTable::TPositionEqualFn&gt; (2 samples, 0.01%)</title><rect x="226.1" y="1861" width="0.2" height="15.0" fill="rgb(219,133,36)" rx="2" ry="2" />
<text  x="229.14" y="1871.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (40 samples, 0.25%)</title><rect x="536.8" y="1749" width="3.0" height="15.0" fill="rgb(238,100,10)" rx="2" ry="2" />
<text  x="539.81" y="1759.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (124 samples, 0.78%)</title><rect x="1020.1" y="2005" width="9.3" height="15.0" fill="rgb(210,137,47)" rx="2" ry="2" />
<text  x="1023.12" y="2015.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_create_node&lt;int&amp;, TSearchNode&gt; (2 samples, 0.01%)</title><rect x="893.5" y="1845" width="0.2" height="15.0" fill="rgb(213,104,5)" rx="2" ry="2" />
<text  x="896.51" y="1855.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::Unwind (4 samples, 0.03%)</title><rect x="895.9" y="1813" width="0.3" height="15.0" fill="rgb(223,181,3)" rx="2" ry="2" />
<text  x="898.90" y="1823.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (2 samples, 0.01%)</title><rect x="63.9" y="1829" width="0.2" height="15.0" fill="rgb(212,176,39)" rx="2" ry="2" />
<text  x="66.94" y="1839.5" ></text>
</g>
<g >
<title>[unknown] (131 samples, 0.83%)</title><rect x="963.0" y="533" width="9.7" height="15.0" fill="rgb(212,78,2)" rx="2" ry="2" />
<text  x="965.97" y="543.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (15 samples, 0.09%)</title><rect x="526.0" y="1717" width="1.1" height="15.0" fill="rgb(243,94,12)" rx="2" ry="2" />
<text  x="528.99" y="1727.5" ></text>
</g>
<g >
<title>CalcPSTScore (64 samples, 0.40%)</title><rect x="473.5" y="1797" width="4.7" height="15.0" fill="rgb(223,14,43)" rx="2" ry="2" />
<text  x="476.46" y="1807.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetBishopAttacks (9 samples, 0.06%)</title><rect x="624.1" y="1765" width="0.7" height="15.0" fill="rgb(206,124,3)" rx="2" ry="2" />
<text  x="627.10" y="1775.5" ></text>
</g>
<g >
<title>THistoryHeuristics::Get (9 samples, 0.06%)</title><rect x="52.2" y="1845" width="0.6" height="15.0" fill="rgb(215,206,11)" rx="2" ry="2" />
<text  x="55.15" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (2 samples, 0.01%)</title><rect x="497.2" y="1701" width="0.1" height="15.0" fill="rgb(209,161,35)" rx="2" ry="2" />
<text  x="500.19" y="1711.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsUnderAttack (6 samples, 0.04%)</title><rect x="266.2" y="1813" width="0.5" height="15.0" fill="rgb(213,164,30)" rx="2" ry="2" />
<text  x="269.20" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (3 samples, 0.02%)</title><rect x="34.5" y="1845" width="0.2" height="15.0" fill="rgb(207,208,41)" rx="2" ry="2" />
<text  x="37.47" y="1855.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (2 samples, 0.01%)</title><rect x="488.9" y="1733" width="0.2" height="15.0" fill="rgb(225,185,54)" rx="2" ry="2" />
<text  x="491.91" y="1743.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (4 samples, 0.03%)</title><rect x="25.1" y="1909" width="0.3" height="15.0" fill="rgb(227,174,51)" rx="2" ry="2" />
<text  x="28.15" y="1919.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::~_Rb_tree (2 samples, 0.01%)</title><rect x="289.9" y="1893" width="0.1" height="15.0" fill="rgb(254,34,46)" rx="2" ry="2" />
<text  x="292.85" y="1903.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::operator== (6 samples, 0.04%)</title><rect x="149.1" y="1781" width="0.5" height="15.0" fill="rgb(206,155,33)" rx="2" ry="2" />
<text  x="152.14" y="1791.5" ></text>
</g>
<g >
<title>lczero::Position::Position (2 samples, 0.01%)</title><rect x="489.4" y="1733" width="0.2" height="15.0" fill="rgb(225,66,6)" rx="2" ry="2" />
<text  x="492.43" y="1743.5" ></text>
</g>
<g >
<title>TSearchStrategy::CalcMoveOrder (5 samples, 0.03%)</title><rect x="510.6" y="1717" width="0.4" height="15.0" fill="rgb(214,201,11)" rx="2" ry="2" />
<text  x="513.62" y="1727.5" ></text>
</g>
<g >
<title>__asan::GetCurrentThread (2 samples, 0.01%)</title><rect x="278.3" y="1829" width="0.1" height="15.0" fill="rgb(210,104,8)" rx="2" ry="2" />
<text  x="281.29" y="1839.5" ></text>
</g>
<g >
<title>std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;::pair&lt;lczero::Position const&amp;, 0ul, TTranspositionTable::TNode&amp;&amp;, 0ul&gt; (3 samples, 0.02%)</title><rect x="868.9" y="1781" width="0.2" height="15.0" fill="rgb(230,5,49)" rx="2" ry="2" />
<text  x="871.89" y="1791.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (4 samples, 0.03%)</title><rect x="489.1" y="1733" width="0.3" height="15.0" fill="rgb(213,153,28)" rx="2" ry="2" />
<text  x="492.13" y="1743.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::reserve (38 samples, 0.24%)</title><rect x="812.3" y="1797" width="2.9" height="15.0" fill="rgb(227,194,26)" rx="2" ry="2" />
<text  x="815.33" y="1807.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (4 samples, 0.03%)</title><rect x="111.4" y="1749" width="0.3" height="15.0" fill="rgb(211,116,4)" rx="2" ry="2" />
<text  x="114.39" y="1759.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_create_node&lt;int&amp;, TSearchNode&gt; (2 samples, 0.01%)</title><rect x="527.3" y="1717" width="0.1" height="15.0" fill="rgb(210,147,34)" rx="2" ry="2" />
<text  x="530.26" y="1727.5" ></text>
</g>
<g >
<title>[unknown] (243 samples, 1.54%)</title><rect x="963.0" y="1717" width="18.1" height="15.0" fill="rgb(220,177,45)" rx="2" ry="2" />
<text  x="965.97" y="1727.5" ></text>
</g>
<g >
<title>TSearchStrategy::CalcMoveOrder (22 samples, 0.14%)</title><rect x="293.8" y="1877" width="1.7" height="15.0" fill="rgb(242,191,11)" rx="2" ry="2" />
<text  x="296.81" y="1887.5" ></text>
</g>
<g >
<title>[unknown] (97 samples, 0.61%)</title><rect x="963.0" y="133" width="7.2" height="15.0" fill="rgb(244,143,15)" rx="2" ry="2" />
<text  x="965.97" y="143.5" ></text>
</g>
<g >
<title>std::array&lt;int, 2ul&gt;::operator[] (42 samples, 0.27%)</title><rect x="406.8" y="1813" width="3.2" height="15.0" fill="rgb(252,162,45)" rx="2" ry="2" />
<text  x="409.84" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::Hash (2 samples, 0.01%)</title><rect x="472.7" y="1717" width="0.2" height="15.0" fill="rgb(233,3,43)" rx="2" ry="2" />
<text  x="475.72" y="1727.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (6 samples, 0.04%)</title><rect x="952.9" y="1861" width="0.4" height="15.0" fill="rgb(239,214,23)" rx="2" ry="2" />
<text  x="955.90" y="1871.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (17 samples, 0.11%)</title><rect x="268.1" y="1797" width="1.2" height="15.0" fill="rgb(219,96,15)" rx="2" ry="2" />
<text  x="271.07" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::operator== (3 samples, 0.02%)</title><rect x="58.7" y="1781" width="0.2" height="15.0" fill="rgb(227,69,40)" rx="2" ry="2" />
<text  x="61.72" y="1791.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (6 samples, 0.04%)</title><rect x="502.8" y="1701" width="0.4" height="15.0" fill="rgb(206,82,15)" rx="2" ry="2" />
<text  x="505.79" y="1711.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::reserve (2 samples, 0.01%)</title><rect x="124.2" y="1781" width="0.1" height="15.0" fill="rgb(214,204,19)" rx="2" ry="2" />
<text  x="127.15" y="1791.5" ></text>
</g>
<g >
<title>lczero::Position::Hash (48 samples, 0.30%)</title><rect x="54.4" y="1781" width="3.6" height="15.0" fill="rgb(253,137,50)" rx="2" ry="2" />
<text  x="57.39" y="1791.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (2 samples, 0.01%)</title><rect x="491.1" y="1765" width="0.1" height="15.0" fill="rgb(249,155,44)" rx="2" ry="2" />
<text  x="494.07" y="1775.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (1,071 samples, 6.77%)</title><rect x="735.3" y="1813" width="79.9" height="15.0" fill="rgb(251,63,24)" rx="2" ry="2" />
<text  x="738.26" y="1823.5" >lczero::C..</text>
</g>
<g >
<title>operator new (12 samples, 0.08%)</title><rect x="653.9" y="1765" width="0.9" height="15.0" fill="rgb(238,108,1)" rx="2" ry="2" />
<text  x="656.87" y="1775.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::reserve (3 samples, 0.02%)</title><rect x="560.8" y="1765" width="0.3" height="15.0" fill="rgb(239,171,41)" rx="2" ry="2" />
<text  x="563.83" y="1775.5" ></text>
</g>
<g >
<title>TTranspositionTable::Find (97 samples, 0.61%)</title><rect x="343.9" y="1829" width="7.2" height="15.0" fill="rgb(250,169,17)" rx="2" ry="2" />
<text  x="346.87" y="1839.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (7 samples, 0.04%)</title><rect x="227.3" y="1845" width="0.5" height="15.0" fill="rgb(233,205,5)" rx="2" ry="2" />
<text  x="230.26" y="1855.5" ></text>
</g>
<g >
<title>GetPieceType (10 samples, 0.06%)</title><rect x="475.9" y="1781" width="0.7" height="15.0" fill="rgb(236,18,37)" rx="2" ry="2" />
<text  x="478.85" y="1791.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (34 samples, 0.21%)</title><rect x="63.3" y="1845" width="2.6" height="15.0" fill="rgb(251,62,24)" rx="2" ry="2" />
<text  x="66.34" y="1855.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (5 samples, 0.03%)</title><rect x="258.8" y="1797" width="0.4" height="15.0" fill="rgb(214,50,8)" rx="2" ry="2" />
<text  x="261.82" y="1807.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (9 samples, 0.06%)</title><rect x="488.9" y="1749" width="0.7" height="15.0" fill="rgb(213,74,51)" rx="2" ry="2" />
<text  x="491.91" y="1759.5" ></text>
</g>
<g >
<title>[unknown] (225 samples, 1.42%)</title><rect x="963.0" y="1541" width="16.8" height="15.0" fill="rgb(220,145,30)" rx="2" ry="2" />
<text  x="965.97" y="1551.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (5 samples, 0.03%)</title><rect x="463.8" y="1749" width="0.4" height="15.0" fill="rgb(213,108,31)" rx="2" ry="2" />
<text  x="466.84" y="1759.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (8 samples, 0.05%)</title><rect x="64.6" y="1813" width="0.6" height="15.0" fill="rgb(211,192,6)" rx="2" ry="2" />
<text  x="67.61" y="1823.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (3 samples, 0.02%)</title><rect x="223.4" y="1829" width="0.2" height="15.0" fill="rgb(205,37,51)" rx="2" ry="2" />
<text  x="226.38" y="1839.5" ></text>
</g>
<g >
<title>[unknown] (96 samples, 0.61%)</title><rect x="963.0" y="117" width="7.1" height="15.0" fill="rgb(240,181,21)" rx="2" ry="2" />
<text  x="965.97" y="127.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (7 samples, 0.04%)</title><rect x="217.8" y="1813" width="0.5" height="15.0" fill="rgb(227,125,36)" rx="2" ry="2" />
<text  x="220.78" y="1823.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (12 samples, 0.08%)</title><rect x="357.3" y="1749" width="0.9" height="15.0" fill="rgb(229,217,28)" rx="2" ry="2" />
<text  x="360.30" y="1759.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::find_node (2 samples, 0.01%)</title><rect x="28.5" y="1845" width="0.2" height="15.0" fill="rgb(209,217,49)" rx="2" ry="2" />
<text  x="31.50" y="1855.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (40 samples, 0.25%)</title><rect x="107.8" y="1765" width="3.0" height="15.0" fill="rgb(223,11,52)" rx="2" ry="2" />
<text  x="110.81" y="1775.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.03%)</title><rect x="949.2" y="1813" width="0.3" height="15.0" fill="rgb(218,94,1)" rx="2" ry="2" />
<text  x="952.24" y="1823.5" ></text>
</g>
<g >
<title>__pthread_getspecific (3 samples, 0.02%)</title><rect x="895.6" y="1813" width="0.2" height="15.0" fill="rgb(244,57,35)" rx="2" ry="2" />
<text  x="898.60" y="1823.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (3 samples, 0.02%)</title><rect x="319.0" y="1813" width="0.3" height="15.0" fill="rgb(219,215,51)" rx="2" ry="2" />
<text  x="322.03" y="1823.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::hash (10 samples, 0.06%)</title><rect x="243.7" y="1797" width="0.7" height="15.0" fill="rgb(238,49,51)" rx="2" ry="2" />
<text  x="246.67" y="1807.5" ></text>
</g>
<g >
<title>__asan::Allocator::Deallocate (5 samples, 0.03%)</title><rect x="569.1" y="1813" width="0.4" height="15.0" fill="rgb(225,226,19)" rx="2" ry="2" />
<text  x="572.11" y="1823.5" ></text>
</g>
<g >
<title>[unknown] (146 samples, 0.92%)</title><rect x="963.0" y="741" width="10.9" height="15.0" fill="rgb(213,7,34)" rx="2" ry="2" />
<text  x="965.97" y="751.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (53 samples, 0.34%)</title><rect x="463.3" y="1797" width="4.0" height="15.0" fill="rgb(214,134,48)" rx="2" ry="2" />
<text  x="466.32" y="1807.5" ></text>
</g>
<g >
<title>[unknown] (124 samples, 0.78%)</title><rect x="963.0" y="453" width="9.2" height="15.0" fill="rgb(240,72,44)" rx="2" ry="2" />
<text  x="965.97" y="463.5" ></text>
</g>
<g >
<title>TSearchStrategy::CalcMoveOrder (5 samples, 0.03%)</title><rect x="26.3" y="1909" width="0.3" height="15.0" fill="rgb(242,158,6)" rx="2" ry="2" />
<text  x="29.26" y="1919.5" ></text>
</g>
<g >
<title>TTranspositionTable::Find (9 samples, 0.06%)</title><rect x="235.3" y="1877" width="0.7" height="15.0" fill="rgb(234,223,25)" rx="2" ry="2" />
<text  x="238.32" y="1887.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::find_node (22 samples, 0.14%)</title><rect x="708.2" y="1797" width="1.6" height="15.0" fill="rgb(250,192,35)" rx="2" ry="2" />
<text  x="711.18" y="1807.5" ></text>
</g>
<g >
<title>TSearchStrategy::CalcMoveOrder (27 samples, 0.17%)</title><rect x="93.9" y="1829" width="2.0" height="15.0" fill="rgb(210,151,27)" rx="2" ry="2" />
<text  x="96.86" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsUnderAttack (7 samples, 0.04%)</title><rect x="70.0" y="1813" width="0.5" height="15.0" fill="rgb(246,218,36)" rx="2" ry="2" />
<text  x="72.98" y="1823.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (84 samples, 0.53%)</title><rect x="184.4" y="1845" width="6.2" height="15.0" fill="rgb(251,66,47)" rx="2" ry="2" />
<text  x="187.36" y="1855.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::erase (2 samples, 0.01%)</title><rect x="190.8" y="1845" width="0.2" height="15.0" fill="rgb(247,91,22)" rx="2" ry="2" />
<text  x="193.85" y="1855.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetBishopAttacks (2 samples, 0.01%)</title><rect x="361.0" y="1781" width="0.1" height="15.0" fill="rgb(225,91,27)" rx="2" ry="2" />
<text  x="363.96" y="1791.5" ></text>
</g>
<g >
<title>IsTerminal (3 samples, 0.02%)</title><rect x="93.6" y="1829" width="0.3" height="15.0" fill="rgb(244,23,38)" rx="2" ry="2" />
<text  x="96.64" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (2 samples, 0.01%)</title><rect x="231.6" y="1893" width="0.1" height="15.0" fill="rgb(216,13,8)" rx="2" ry="2" />
<text  x="234.59" y="1903.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_emplace_equal&lt;int&amp;, TSearchNode&gt; (20 samples, 0.13%)</title><rect x="953.9" y="1877" width="1.5" height="15.0" fill="rgb(233,0,8)" rx="2" ry="2" />
<text  x="956.94" y="1887.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (156 samples, 0.99%)</title><rect x="1007.4" y="2037" width="11.7" height="15.0" fill="rgb(249,78,30)" rx="2" ry="2" />
<text  x="1010.43" y="2047.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (136 samples, 0.86%)</title><rect x="152.5" y="1829" width="10.1" height="15.0" fill="rgb(254,76,38)" rx="2" ry="2" />
<text  x="155.50" y="1839.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_construct_node&lt;int&amp;, TSearchNode&gt; (2 samples, 0.01%)</title><rect x="957.8" y="1893" width="0.2" height="15.0" fill="rgb(249,6,30)" rx="2" ry="2" />
<text  x="960.82" y="1903.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (45 samples, 0.28%)</title><rect x="925.6" y="1829" width="3.3" height="15.0" fill="rgb(245,10,6)" rx="2" ry="2" />
<text  x="928.59" y="1839.5" ></text>
</g>
<g >
<title>[unknown] (223 samples, 1.41%)</title><rect x="963.0" y="1509" width="16.6" height="15.0" fill="rgb(217,64,6)" rx="2" ry="2" />
<text  x="965.97" y="1519.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (3 samples, 0.02%)</title><rect x="510.6" y="1701" width="0.2" height="15.0" fill="rgb(226,38,16)" rx="2" ry="2" />
<text  x="513.62" y="1711.5" ></text>
</g>
<g >
<title>TSearchStrategy::CalcMoveOrder (2 samples, 0.01%)</title><rect x="233.5" y="1925" width="0.1" height="15.0" fill="rgb(243,100,17)" rx="2" ry="2" />
<text  x="236.45" y="1935.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (67 samples, 0.42%)</title><rect x="878.1" y="1829" width="5.0" height="15.0" fill="rgb(225,156,51)" rx="2" ry="2" />
<text  x="881.06" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ApplyMove (2 samples, 0.01%)</title><rect x="105.3" y="1765" width="0.2" height="15.0" fill="rgb(232,116,45)" rx="2" ry="2" />
<text  x="108.35" y="1775.5" ></text>
</g>
<g >
<title>CalcPSTScore (65 samples, 0.41%)</title><rect x="96.5" y="1813" width="4.8" height="15.0" fill="rgb(209,55,28)" rx="2" ry="2" />
<text  x="99.47" y="1823.5" ></text>
</g>
<g >
<title>__sanitizer::Quarantine&lt;__asan::QuarantineCallback, __asan::AsanChunk&gt;::DoRecycle (2 samples, 0.01%)</title><rect x="976.5" y="1045" width="0.1" height="15.0" fill="rgb(251,33,54)" rx="2" ry="2" />
<text  x="979.47" y="1055.5" ></text>
</g>
<g >
<title>TTranspositionTable::Find (38 samples, 0.24%)</title><rect x="148.4" y="1845" width="2.8" height="15.0" fill="rgb(249,180,5)" rx="2" ry="2" />
<text  x="151.40" y="1855.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::find_node (3 samples, 0.02%)</title><rect x="915.5" y="1829" width="0.2" height="15.0" fill="rgb(220,113,0)" rx="2" ry="2" />
<text  x="918.52" y="1839.5" ></text>
</g>
<g >
<title>boost::unordered::unordered_map&lt;lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt; &gt;::find (15 samples, 0.09%)</title><rect x="32.1" y="1845" width="1.1" height="15.0" fill="rgb(251,119,15)" rx="2" ry="2" />
<text  x="35.08" y="1855.5" ></text>
</g>
<g >
<title>lczero::Position::Position (134 samples, 0.85%)</title><rect x="883.4" y="1845" width="10.0" height="15.0" fill="rgb(229,61,11)" rx="2" ry="2" />
<text  x="886.44" y="1855.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (3 samples, 0.02%)</title><rect x="320.1" y="1765" width="0.2" height="15.0" fill="rgb(252,225,44)" rx="2" ry="2" />
<text  x="323.07" y="1775.5" ></text>
</g>
<g >
<title>TTranspositionTable::Find (5 samples, 0.03%)</title><rect x="507.5" y="1717" width="0.4" height="15.0" fill="rgb(233,18,33)" rx="2" ry="2" />
<text  x="510.49" y="1727.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::find_node_impl&lt;lczero::Position, TTranspositionTable::TPositionEqualFn&gt; (2 samples, 0.01%)</title><rect x="172.3" y="1829" width="0.1" height="15.0" fill="rgb(232,65,27)" rx="2" ry="2" />
<text  x="175.27" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::operator== (2 samples, 0.01%)</title><rect x="28.7" y="1813" width="0.1" height="15.0" fill="rgb(208,171,23)" rx="2" ry="2" />
<text  x="31.65" y="1823.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_construct_node&lt;int&amp;, TSearchNode&gt; (3 samples, 0.02%)</title><rect x="291.2" y="1893" width="0.2" height="15.0" fill="rgb(245,180,4)" rx="2" ry="2" />
<text  x="294.20" y="1903.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (3 samples, 0.02%)</title><rect x="33.6" y="1845" width="0.2" height="15.0" fill="rgb(253,199,31)" rx="2" ry="2" />
<text  x="36.58" y="1855.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::hash (2 samples, 0.01%)</title><rect x="281.3" y="1829" width="0.1" height="15.0" fill="rgb(226,80,52)" rx="2" ry="2" />
<text  x="284.27" y="1839.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (2 samples, 0.01%)</title><rect x="340.2" y="1797" width="0.2" height="15.0" fill="rgb(209,208,20)" rx="2" ry="2" />
<text  x="343.21" y="1807.5" ></text>
</g>
<g >
<title>TSearchStrategy::CalcMoveOrder (31 samples, 0.20%)</title><rect x="30.9" y="1877" width="2.3" height="15.0" fill="rgb(214,9,20)" rx="2" ry="2" />
<text  x="33.89" y="1887.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_get_insert_equal_pos (6 samples, 0.04%)</title><rect x="279.6" y="1845" width="0.4" height="15.0" fill="rgb(210,203,36)" rx="2" ry="2" />
<text  x="282.56" y="1855.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (3 samples, 0.02%)</title><rect x="491.3" y="1749" width="0.2" height="15.0" fill="rgb(213,171,30)" rx="2" ry="2" />
<text  x="494.30" y="1759.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (4 samples, 0.03%)</title><rect x="110.3" y="1717" width="0.3" height="15.0" fill="rgb(224,21,24)" rx="2" ry="2" />
<text  x="113.35" y="1727.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (871 samples, 5.51%)</title><rect x="485.8" y="1797" width="65.0" height="15.0" fill="rgb(212,109,43)" rx="2" ry="2" />
<text  x="488.85" y="1807.5" >TSearch..</text>
</g>
<g >
<title>EvaluateStaticExchange (6 samples, 0.04%)</title><rect x="354.5" y="1797" width="0.4" height="15.0" fill="rgb(217,14,41)" rx="2" ry="2" />
<text  x="357.47" y="1807.5" ></text>
</g>
<g >
<title>std::array&lt;int, 64ul&gt;::operator[] (11 samples, 0.07%)</title><rect x="80.4" y="1829" width="0.9" height="15.0" fill="rgb(230,15,42)" rx="2" ry="2" />
<text  x="83.43" y="1839.5" ></text>
</g>
<g >
<title>[unknown] (91 samples, 0.58%)</title><rect x="963.0" y="53" width="6.8" height="15.0" fill="rgb(252,57,32)" rx="2" ry="2" />
<text  x="965.97" y="63.5" ></text>
</g>
<g >
<title>[unknown] (192 samples, 1.21%)</title><rect x="963.0" y="1109" width="14.3" height="15.0" fill="rgb(219,209,51)" rx="2" ry="2" />
<text  x="965.97" y="1119.5" ></text>
</g>
<g >
<title>TTranspositionTable::TPositionEqualFn::operator (7 samples, 0.04%)</title><rect x="350.1" y="1781" width="0.5" height="15.0" fill="rgb(247,123,41)" rx="2" ry="2" />
<text  x="353.06" y="1791.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (3 samples, 0.02%)</title><rect x="467.6" y="1797" width="0.2" height="15.0" fill="rgb(212,155,54)" rx="2" ry="2" />
<text  x="470.57" y="1807.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (4 samples, 0.03%)</title><rect x="518.8" y="1653" width="0.3" height="15.0" fill="rgb(249,209,12)" rx="2" ry="2" />
<text  x="521.83" y="1663.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (2 samples, 0.01%)</title><rect x="509.7" y="1669" width="0.2" height="15.0" fill="rgb(228,49,40)" rx="2" ry="2" />
<text  x="512.72" y="1679.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ApplyMove (2 samples, 0.01%)</title><rect x="308.5" y="1813" width="0.2" height="15.0" fill="rgb(232,164,31)" rx="2" ry="2" />
<text  x="311.51" y="1823.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (4 samples, 0.03%)</title><rect x="955.5" y="1861" width="0.3" height="15.0" fill="rgb(216,151,8)" rx="2" ry="2" />
<text  x="958.51" y="1871.5" ></text>
</g>
<g >
<title>GetPieceType (11 samples, 0.07%)</title><rect x="329.7" y="1829" width="0.8" height="15.0" fill="rgb(224,223,18)" rx="2" ry="2" />
<text  x="332.70" y="1839.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetBishopAttacks (2 samples, 0.01%)</title><rect x="89.9" y="1781" width="0.2" height="15.0" fill="rgb(252,110,35)" rx="2" ry="2" />
<text  x="92.91" y="1791.5" ></text>
</g>
<g >
<title>TTranspositionTable::Find (3 samples, 0.02%)</title><rect x="256.7" y="1813" width="0.2" height="15.0" fill="rgb(216,152,46)" rx="2" ry="2" />
<text  x="259.65" y="1823.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_emplace_equal&lt;int&amp;, TSearchNode&gt; (12 samples, 0.08%)</title><rect x="288.7" y="1893" width="0.9" height="15.0" fill="rgb(247,8,12)" rx="2" ry="2" />
<text  x="291.66" y="1903.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (206 samples, 1.30%)</title><rect x="507.9" y="1733" width="15.3" height="15.0" fill="rgb(247,138,18)" rx="2" ry="2" />
<text  x="510.86" y="1743.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ApplyMove (6 samples, 0.04%)</title><rect x="90.7" y="1781" width="0.5" height="15.0" fill="rgb(210,87,3)" rx="2" ry="2" />
<text  x="93.73" y="1791.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::erase (2 samples, 0.01%)</title><rect x="565.7" y="1781" width="0.1" height="15.0" fill="rgb(248,203,43)" rx="2" ry="2" />
<text  x="568.68" y="1791.5" ></text>
</g>
<g >
<title>TTranspositionTable::Find (3 samples, 0.02%)</title><rect x="472.7" y="1797" width="0.2" height="15.0" fill="rgb(212,56,37)" rx="2" ry="2" />
<text  x="475.72" y="1807.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_construct_node&lt;int&amp;, TSearchNode&gt; (78 samples, 0.49%)</title><rect x="203.6" y="1829" width="5.8" height="15.0" fill="rgb(218,28,30)" rx="2" ry="2" />
<text  x="206.61" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (110 samples, 0.70%)</title><rect x="531.7" y="1765" width="8.2" height="15.0" fill="rgb(252,158,16)" rx="2" ry="2" />
<text  x="534.66" y="1775.5" ></text>
</g>
<g >
<title>TSearchStrategy::CalcMoveOrder (2 samples, 0.01%)</title><rect x="319.5" y="1829" width="0.1" height="15.0" fill="rgb(218,194,49)" rx="2" ry="2" />
<text  x="322.47" y="1839.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (6 samples, 0.04%)</title><rect x="280.8" y="1845" width="0.4" height="15.0" fill="rgb(236,35,27)" rx="2" ry="2" />
<text  x="283.75" y="1855.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (2 samples, 0.01%)</title><rect x="567.1" y="1781" width="0.1" height="15.0" fill="rgb(205,107,35)" rx="2" ry="2" />
<text  x="570.10" y="1791.5" ></text>
</g>
<g >
<title>boost::unordered::unordered_map&lt;lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt; &gt;::find (27 samples, 0.17%)</title><rect x="915.5" y="1845" width="2.0" height="15.0" fill="rgb(250,59,47)" rx="2" ry="2" />
<text  x="918.52" y="1855.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (4 samples, 0.03%)</title><rect x="357.6" y="1701" width="0.3" height="15.0" fill="rgb(212,124,42)" rx="2" ry="2" />
<text  x="360.60" y="1711.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (6 samples, 0.04%)</title><rect x="64.2" y="1829" width="0.4" height="15.0" fill="rgb(224,15,2)" rx="2" ry="2" />
<text  x="67.17" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ApplyMove (2 samples, 0.01%)</title><rect x="482.1" y="1765" width="0.2" height="15.0" fill="rgb(220,108,5)" rx="2" ry="2" />
<text  x="485.12" y="1775.5" ></text>
</g>
<g >
<title>__sanitizer::CombinedAllocator&lt;__sanitizer::SizeClassAllocator64&lt;__asan::AP64&gt;, __sanitizer::SizeClassAllocatorLocalCache&lt;__sanitizer::SizeClassAllocator64&lt;__asan::AP64&gt; &gt;, __sanitizer::LargeMmapAllocator&lt;__asan::AsanMapUnmapCallback, __sanitizer::LargeMmapAllocatorPtrArrayDynamic&gt; &gt;::Allocate (82 samples, 0.52%)</title><rect x="1142.6" y="2053" width="6.1" height="15.0" fill="rgb(232,51,12)" rx="2" ry="2" />
<text  x="1145.62" y="2063.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::back (21 samples, 0.13%)</title><rect x="625.7" y="1781" width="1.6" height="15.0" fill="rgb(223,200,24)" rx="2" ry="2" />
<text  x="628.74" y="1791.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (73 samples, 0.46%)</title><rect x="162.8" y="1813" width="5.4" height="15.0" fill="rgb(237,78,34)" rx="2" ry="2" />
<text  x="165.80" y="1823.5" ></text>
</g>
<g >
<title>lczero::Position::Position (2 samples, 0.01%)</title><rect x="504.7" y="1717" width="0.1" height="15.0" fill="rgb(235,155,19)" rx="2" ry="2" />
<text  x="507.65" y="1727.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (9 samples, 0.06%)</title><rect x="101.4" y="1797" width="0.7" height="15.0" fill="rgb(242,9,15)" rx="2" ry="2" />
<text  x="104.39" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsUnderAttack (8 samples, 0.05%)</title><rect x="261.5" y="1797" width="0.6" height="15.0" fill="rgb(235,89,2)" rx="2" ry="2" />
<text  x="264.50" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (18 samples, 0.11%)</title><rect x="226.4" y="1893" width="1.4" height="15.0" fill="rgb(223,114,52)" rx="2" ry="2" />
<text  x="229.44" y="1903.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::back (8 samples, 0.05%)</title><rect x="183.2" y="1813" width="0.6" height="15.0" fill="rgb(243,15,28)" rx="2" ry="2" />
<text  x="186.17" y="1823.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::begin (3 samples, 0.02%)</title><rect x="264.7" y="1797" width="0.2" height="15.0" fill="rgb(208,190,21)" rx="2" ry="2" />
<text  x="267.71" y="1807.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetRookAttacks (2 samples, 0.01%)</title><rect x="101.8" y="1765" width="0.2" height="15.0" fill="rgb(216,91,1)" rx="2" ry="2" />
<text  x="104.84" y="1775.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::~_Rb_tree (2 samples, 0.01%)</title><rect x="540.4" y="1765" width="0.1" height="15.0" fill="rgb(210,12,38)" rx="2" ry="2" />
<text  x="543.39" y="1775.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (2 samples, 0.01%)</title><rect x="255.8" y="1797" width="0.1" height="15.0" fill="rgb(244,111,20)" rx="2" ry="2" />
<text  x="258.76" y="1807.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::resize_and_add_node_unique (4 samples, 0.03%)</title><rect x="270.1" y="1829" width="0.3" height="15.0" fill="rgb(220,64,7)" rx="2" ry="2" />
<text  x="273.08" y="1839.5" ></text>
</g>
<g >
<title>__asan_region_is_poisoned (11 samples, 0.07%)</title><rect x="728.3" y="1829" width="0.8" height="15.0" fill="rgb(250,220,1)" rx="2" ry="2" />
<text  x="731.33" y="1839.5" ></text>
</g>
<g >
<title>std::array&lt;int, 64ul&gt;::operator[] (3 samples, 0.02%)</title><rect x="101.1" y="1797" width="0.2" height="15.0" fill="rgb(249,220,38)" rx="2" ry="2" />
<text  x="104.10" y="1807.5" ></text>
</g>
<g >
<title>TTranspositionTable::Find (8 samples, 0.05%)</title><rect x="292.4" y="1877" width="0.6" height="15.0" fill="rgb(220,165,32)" rx="2" ry="2" />
<text  x="295.39" y="1887.5" ></text>
</g>
<g >
<title>std::pair&lt;std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&gt;::pair&lt;std::_Rb_tree_node&lt;std::pair&lt;int const, TSearchNode&gt; &gt;*&amp;, std::_Rb_tree_node_base*&amp;, true&gt; (2 samples, 0.01%)</title><rect x="212.5" y="1829" width="0.1" height="15.0" fill="rgb(209,42,28)" rx="2" ry="2" />
<text  x="215.49" y="1839.5" ></text>
</g>
<g >
<title>__asan::GetCurrentThread (2 samples, 0.01%)</title><rect x="652.9" y="1765" width="0.1" height="15.0" fill="rgb(239,205,44)" rx="2" ry="2" />
<text  x="655.90" y="1775.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (3 samples, 0.02%)</title><rect x="255.9" y="1797" width="0.2" height="15.0" fill="rgb(214,9,21)" rx="2" ry="2" />
<text  x="258.91" y="1807.5" ></text>
</g>
<g >
<title>GetPieceType (4 samples, 0.03%)</title><rect x="104.1" y="1781" width="0.3" height="15.0" fill="rgb(221,1,28)" rx="2" ry="2" />
<text  x="107.08" y="1791.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (2 samples, 0.01%)</title><rect x="231.7" y="1893" width="0.2" height="15.0" fill="rgb(253,37,45)" rx="2" ry="2" />
<text  x="234.73" y="1903.5" ></text>
</g>
<g >
<title>[unknown] (198 samples, 1.25%)</title><rect x="963.0" y="1173" width="14.7" height="15.0" fill="rgb(231,53,54)" rx="2" ry="2" />
<text  x="965.97" y="1183.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (5 samples, 0.03%)</title><rect x="112.4" y="1765" width="0.4" height="15.0" fill="rgb(234,89,45)" rx="2" ry="2" />
<text  x="115.44" y="1775.5" ></text>
</g>
<g >
<title>lczero::BitBoard::get (9 samples, 0.06%)</title><rect x="330.5" y="1829" width="0.7" height="15.0" fill="rgb(242,41,25)" rx="2" ry="2" />
<text  x="333.52" y="1839.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.01%)</title><rect x="982.2" y="1861" width="0.2" height="15.0" fill="rgb(212,36,52)" rx="2" ry="2" />
<text  x="985.22" y="1871.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (3 samples, 0.02%)</title><rect x="26.6" y="1909" width="0.3" height="15.0" fill="rgb(213,16,53)" rx="2" ry="2" />
<text  x="29.64" y="1919.5" ></text>
</g>
<g >
<title>lczero::BitBoard::get (21 samples, 0.13%)</title><rect x="41.7" y="1845" width="1.6" height="15.0" fill="rgb(253,195,23)" rx="2" ry="2" />
<text  x="44.71" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (4 samples, 0.03%)</title><rect x="236.5" y="1861" width="0.3" height="15.0" fill="rgb(206,180,6)" rx="2" ry="2" />
<text  x="239.51" y="1871.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (2 samples, 0.01%)</title><rect x="231.7" y="1861" width="0.2" height="15.0" fill="rgb(230,206,26)" rx="2" ry="2" />
<text  x="234.73" y="1871.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::find_node_impl&lt;lczero::Position, TTranspositionTable::TPositionEqualFn&gt; (2 samples, 0.01%)</title><rect x="95.6" y="1781" width="0.2" height="15.0" fill="rgb(224,76,1)" rx="2" ry="2" />
<text  x="98.65" y="1791.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.01%)</title><rect x="982.1" y="1845" width="0.1" height="15.0" fill="rgb(229,141,39)" rx="2" ry="2" />
<text  x="985.07" y="1855.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::find_node_impl&lt;lczero::Position, TTranspositionTable::TPositionEqualFn&gt; (4 samples, 0.03%)</title><rect x="235.7" y="1845" width="0.3" height="15.0" fill="rgb(216,102,22)" rx="2" ry="2" />
<text  x="238.69" y="1855.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (5 samples, 0.03%)</title><rect x="255.8" y="1813" width="0.3" height="15.0" fill="rgb(234,25,10)" rx="2" ry="2" />
<text  x="258.76" y="1823.5" ></text>
</g>
<g >
<title>__pthread_getspecific (7 samples, 0.04%)</title><rect x="729.1" y="1829" width="0.6" height="15.0" fill="rgb(252,83,34)" rx="2" ry="2" />
<text  x="732.15" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (5 samples, 0.03%)</title><rect x="112.4" y="1717" width="0.4" height="15.0" fill="rgb(225,133,48)" rx="2" ry="2" />
<text  x="115.44" y="1727.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (20 samples, 0.13%)</title><rect x="262.8" y="1813" width="1.5" height="15.0" fill="rgb(234,116,53)" rx="2" ry="2" />
<text  x="265.85" y="1823.5" ></text>
</g>
<g >
<title>__asan::asan_memalign (2 samples, 0.01%)</title><rect x="202.2" y="1829" width="0.1" height="15.0" fill="rgb(231,81,11)" rx="2" ry="2" />
<text  x="205.19" y="1839.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::find_node_impl&lt;lczero::Position, TTranspositionTable::TPositionEqualFn&gt; (4 samples, 0.03%)</title><rect x="507.6" y="1685" width="0.3" height="15.0" fill="rgb(246,210,7)" rx="2" ry="2" />
<text  x="510.56" y="1695.5" ></text>
</g>
<g >
<title>alpha_beta::test_method (8 samples, 0.05%)</title><rect x="25.1" y="2005" width="0.6" height="15.0" fill="rgb(245,40,35)" rx="2" ry="2" />
<text  x="28.07" y="2015.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::queens (2 samples, 0.01%)</title><rect x="88.9" y="1765" width="0.2" height="15.0" fill="rgb(225,170,0)" rx="2" ry="2" />
<text  x="91.94" y="1775.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (3 samples, 0.02%)</title><rect x="955.9" y="1877" width="0.2" height="15.0" fill="rgb(234,132,35)" rx="2" ry="2" />
<text  x="958.88" y="1887.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::next_for_find (2 samples, 0.01%)</title><rect x="317.4" y="1797" width="0.1" height="15.0" fill="rgb(207,2,28)" rx="2" ry="2" />
<text  x="320.38" y="1807.5" ></text>
</g>
<g >
<title>GetPieceType (3 samples, 0.02%)</title><rect x="497.8" y="1733" width="0.2" height="15.0" fill="rgb(247,39,13)" rx="2" ry="2" />
<text  x="500.79" y="1743.5" ></text>
</g>
<g >
<title>std::array&lt;int, 2ul&gt;::operator[] (7 samples, 0.04%)</title><rect x="86.3" y="1813" width="0.5" height="15.0" fill="rgb(230,36,20)" rx="2" ry="2" />
<text  x="89.32" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsUnderAttack (7 samples, 0.04%)</title><rect x="875.2" y="1813" width="0.5" height="15.0" fill="rgb(248,41,12)" rx="2" ry="2" />
<text  x="878.15" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (2 samples, 0.01%)</title><rect x="514.9" y="1637" width="0.1" height="15.0" fill="rgb(213,167,39)" rx="2" ry="2" />
<text  x="517.87" y="1647.5" ></text>
</g>
<g >
<title>[unknown] (201 samples, 1.27%)</title><rect x="963.0" y="1269" width="15.0" height="15.0" fill="rgb(210,60,11)" rx="2" ry="2" />
<text  x="965.97" y="1279.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (4 samples, 0.03%)</title><rect x="304.6" y="1797" width="0.3" height="15.0" fill="rgb(219,109,22)" rx="2" ry="2" />
<text  x="307.63" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (1,779 samples, 11.25%)</title><rect x="731.8" y="1829" width="132.8" height="15.0" fill="rgb(239,131,7)" rx="2" ry="2" />
<text  x="734.83" y="1839.5" >lczero::ChessBoa..</text>
</g>
<g >
<title>all (15,816 samples, 100%)</title><rect x="10.0" y="2085" width="1180.0" height="15.0" fill="rgb(205,122,27)" rx="2" ry="2" />
<text  x="13.00" y="2095.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (11 samples, 0.07%)</title><rect x="950.4" y="1797" width="0.8" height="15.0" fill="rgb(206,86,9)" rx="2" ry="2" />
<text  x="953.36" y="1807.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_construct_node&lt;int&amp;, TSearchNode&gt; (13 samples, 0.08%)</title><rect x="223.2" y="1845" width="0.9" height="15.0" fill="rgb(238,76,25)" rx="2" ry="2" />
<text  x="226.16" y="1855.5" ></text>
</g>
<g >
<title>TSearchStrategy::Search (8,932 samples, 56.47%)</title><rect x="291.6" y="1957" width="666.4" height="15.0" fill="rgb(218,46,37)" rx="2" ry="2" />
<text  x="294.57" y="1967.5" >TSearchStrategy::Search</text>
</g>
<g >
<title>lczero::ChessBoard::operator== (3 samples, 0.02%)</title><rect x="493.4" y="1701" width="0.2" height="15.0" fill="rgb(238,161,39)" rx="2" ry="2" />
<text  x="496.39" y="1711.5" ></text>
</g>
<g >
<title>IsCapture (3 samples, 0.02%)</title><rect x="354.2" y="1829" width="0.3" height="15.0" fill="rgb(248,53,18)" rx="2" ry="2" />
<text  x="357.24" y="1839.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (22 samples, 0.14%)</title><rect x="949.5" y="1813" width="1.7" height="15.0" fill="rgb(246,24,25)" rx="2" ry="2" />
<text  x="952.54" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (11 samples, 0.07%)</title><rect x="48.7" y="1813" width="0.8" height="15.0" fill="rgb(250,71,39)" rx="2" ry="2" />
<text  x="51.72" y="1823.5" ></text>
</g>
<g >
<title>TTranspositionTable::TPositionEqualFn::operator (3 samples, 0.02%)</title><rect x="493.4" y="1717" width="0.2" height="15.0" fill="rgb(223,184,35)" rx="2" ry="2" />
<text  x="496.39" y="1727.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.03%)</title><rect x="200.1" y="1861" width="0.3" height="15.0" fill="rgb(222,122,21)" rx="2" ry="2" />
<text  x="203.10" y="1871.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (4 samples, 0.03%)</title><rect x="64.3" y="1813" width="0.3" height="15.0" fill="rgb(212,115,48)" rx="2" ry="2" />
<text  x="67.31" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (4 samples, 0.03%)</title><rect x="483.9" y="1749" width="0.3" height="15.0" fill="rgb(216,224,17)" rx="2" ry="2" />
<text  x="486.91" y="1759.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (4 samples, 0.03%)</title><rect x="35.3" y="1829" width="0.3" height="15.0" fill="rgb(216,94,22)" rx="2" ry="2" />
<text  x="38.29" y="1839.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (49 samples, 0.31%)</title><rect x="925.3" y="1845" width="3.6" height="15.0" fill="rgb(225,113,27)" rx="2" ry="2" />
<text  x="928.29" y="1855.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetRookAttacks (13 samples, 0.08%)</title><rect x="786.4" y="1781" width="0.9" height="15.0" fill="rgb(216,93,35)" rx="2" ry="2" />
<text  x="789.37" y="1791.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_construct_node&lt;int&amp;, TSearchNode&gt; (4 samples, 0.03%)</title><rect x="288.8" y="1861" width="0.3" height="15.0" fill="rgb(225,209,21)" rx="2" ry="2" />
<text  x="291.81" y="1871.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ApplyMove (27 samples, 0.17%)</title><rect x="931.9" y="1845" width="2.0" height="15.0" fill="rgb(239,11,7)" rx="2" ry="2" />
<text  x="934.93" y="1855.5" ></text>
</g>
<g >
<title>CalcPSTScore (79 samples, 0.50%)</title><rect x="75.4" y="1845" width="5.9" height="15.0" fill="rgb(233,103,20)" rx="2" ry="2" />
<text  x="78.36" y="1855.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (2 samples, 0.01%)</title><rect x="318.8" y="1845" width="0.2" height="15.0" fill="rgb(205,161,48)" rx="2" ry="2" />
<text  x="321.80" y="1855.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (3 samples, 0.02%)</title><rect x="504.3" y="1701" width="0.2" height="15.0" fill="rgb(248,11,28)" rx="2" ry="2" />
<text  x="507.28" y="1711.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (4 samples, 0.03%)</title><rect x="35.3" y="1845" width="0.3" height="15.0" fill="rgb(247,73,34)" rx="2" ry="2" />
<text  x="38.29" y="1855.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::erase (3 samples, 0.02%)</title><rect x="929.0" y="1845" width="0.2" height="15.0" fill="rgb(232,200,50)" rx="2" ry="2" />
<text  x="932.02" y="1855.5" ></text>
</g>
<g >
<title>lczero::BitBoard::get (8 samples, 0.05%)</title><rect x="240.7" y="1845" width="0.6" height="15.0" fill="rgb(254,143,24)" rx="2" ry="2" />
<text  x="243.69" y="1855.5" ></text>
</g>
<g >
<title>TSearchStrategy::MakeMove (8 samples, 0.05%)</title><rect x="25.1" y="1989" width="0.6" height="15.0" fill="rgb(227,74,47)" rx="2" ry="2" />
<text  x="28.07" y="1999.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::back (2 samples, 0.01%)</title><rect x="652.3" y="1765" width="0.1" height="15.0" fill="rgb(239,32,2)" rx="2" ry="2" />
<text  x="655.30" y="1775.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (6 samples, 0.04%)</title><rect x="521.1" y="1685" width="0.4" height="15.0" fill="rgb(220,39,32)" rx="2" ry="2" />
<text  x="524.06" y="1695.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_emplace_equal&lt;int&amp;, TSearchNode&gt; (5 samples, 0.03%)</title><rect x="147.4" y="1829" width="0.3" height="15.0" fill="rgb(237,61,11)" rx="2" ry="2" />
<text  x="150.35" y="1839.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::_M_erase (2 samples, 0.01%)</title><rect x="549.7" y="1749" width="0.2" height="15.0" fill="rgb(236,55,13)" rx="2" ry="2" />
<text  x="552.71" y="1759.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_create_node&lt;int&amp;, TSearchNode&gt; (12 samples, 0.08%)</title><rect x="283.8" y="1861" width="0.9" height="15.0" fill="rgb(251,102,1)" rx="2" ry="2" />
<text  x="286.81" y="1871.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_emplace_equal&lt;int&amp;, TSearchNode&gt; (28 samples, 0.18%)</title><rect x="222.6" y="1877" width="2.1" height="15.0" fill="rgb(227,102,35)" rx="2" ry="2" />
<text  x="225.63" y="1887.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetRookAttacks (6 samples, 0.04%)</title><rect x="179.7" y="1829" width="0.4" height="15.0" fill="rgb(217,207,17)" rx="2" ry="2" />
<text  x="182.66" y="1839.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::reserve (2 samples, 0.01%)</title><rect x="274.0" y="1829" width="0.1" height="15.0" fill="rgb(244,69,54)" rx="2" ry="2" />
<text  x="276.96" y="1839.5" ></text>
</g>
<g >
<title>[unknown] (248 samples, 1.57%)</title><rect x="963.0" y="1765" width="18.5" height="15.0" fill="rgb(243,71,18)" rx="2" ry="2" />
<text  x="965.97" y="1775.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (4 samples, 0.03%)</title><rect x="870.2" y="1845" width="0.3" height="15.0" fill="rgb(239,220,19)" rx="2" ry="2" />
<text  x="873.23" y="1855.5" ></text>
</g>
<g >
<title>std::array&lt;int, 2ul&gt;::operator[] (7 samples, 0.04%)</title><rect x="299.9" y="1845" width="0.5" height="15.0" fill="rgb(231,44,19)" rx="2" ry="2" />
<text  x="302.93" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ApplyMove (3 samples, 0.02%)</title><rect x="305.8" y="1781" width="0.2" height="15.0" fill="rgb(226,229,14)" rx="2" ry="2" />
<text  x="308.82" y="1791.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (78 samples, 0.49%)</title><rect x="140.5" y="1813" width="5.8" height="15.0" fill="rgb(229,52,13)" rx="2" ry="2" />
<text  x="143.49" y="1823.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (5 samples, 0.03%)</title><rect x="102.5" y="1797" width="0.4" height="15.0" fill="rgb(252,103,21)" rx="2" ry="2" />
<text  x="105.51" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ChessBoard (2 samples, 0.01%)</title><rect x="484.2" y="1733" width="0.2" height="15.0" fill="rgb(206,48,44)" rx="2" ry="2" />
<text  x="487.21" y="1743.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (3 samples, 0.02%)</title><rect x="549.9" y="1765" width="0.3" height="15.0" fill="rgb(208,172,24)" rx="2" ry="2" />
<text  x="552.94" y="1775.5" ></text>
</g>
<g >
<title>[unknown] (117 samples, 0.74%)</title><rect x="963.0" y="373" width="8.7" height="15.0" fill="rgb(245,58,21)" rx="2" ry="2" />
<text  x="965.97" y="383.5" ></text>
</g>
<g >
<title>lczero::Position::Hash (15 samples, 0.09%)</title><rect x="708.7" y="1765" width="1.1" height="15.0" fill="rgb(230,185,11)" rx="2" ry="2" />
<text  x="711.70" y="1775.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (16 samples, 0.10%)</title><rect x="47.2" y="1813" width="1.2" height="15.0" fill="rgb(254,6,8)" rx="2" ry="2" />
<text  x="50.23" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::knights (4 samples, 0.03%)</title><rect x="85.0" y="1797" width="0.3" height="15.0" fill="rgb(209,155,32)" rx="2" ry="2" />
<text  x="87.98" y="1807.5" ></text>
</g>
<g >
<title>std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;::pair&lt;lczero::Position const&amp;, 0ul, TTranspositionTable::TNode&amp;&amp;, 0ul&gt; (2 samples, 0.01%)</title><rect x="917.6" y="1797" width="0.2" height="15.0" fill="rgb(250,90,16)" rx="2" ry="2" />
<text  x="920.61" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateKingAttackInfo (4 samples, 0.03%)</title><rect x="247.7" y="1829" width="0.3" height="15.0" fill="rgb(240,41,31)" rx="2" ry="2" />
<text  x="250.70" y="1839.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (4 samples, 0.03%)</title><rect x="33.6" y="1861" width="0.3" height="15.0" fill="rgb(228,79,42)" rx="2" ry="2" />
<text  x="36.58" y="1871.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::find_node_impl&lt;lczero::Position, TTranspositionTable::TPositionEqualFn&gt; (3 samples, 0.02%)</title><rect x="295.2" y="1829" width="0.3" height="15.0" fill="rgb(223,136,15)" rx="2" ry="2" />
<text  x="298.23" y="1839.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (3 samples, 0.02%)</title><rect x="354.6" y="1781" width="0.2" height="15.0" fill="rgb(228,204,19)" rx="2" ry="2" />
<text  x="357.61" y="1791.5" ></text>
</g>
<g >
<title>lczero::BitBoard::get (3 samples, 0.02%)</title><rect x="63.6" y="1813" width="0.3" height="15.0" fill="rgb(231,188,36)" rx="2" ry="2" />
<text  x="66.64" y="1823.5" ></text>
</g>
<g >
<title>__sanitizer::StackTrace::GetCurrentPc (2 samples, 0.01%)</title><rect x="937.5" y="1829" width="0.2" height="15.0" fill="rgb(208,69,31)" rx="2" ry="2" />
<text  x="940.53" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (14 samples, 0.09%)</title><rect x="516.7" y="1685" width="1.1" height="15.0" fill="rgb(251,6,18)" rx="2" ry="2" />
<text  x="519.74" y="1695.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (2 samples, 0.01%)</title><rect x="358.2" y="1733" width="0.1" height="15.0" fill="rgb(242,105,48)" rx="2" ry="2" />
<text  x="361.20" y="1743.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (9 samples, 0.06%)</title><rect x="506.8" y="1717" width="0.7" height="15.0" fill="rgb(249,219,42)" rx="2" ry="2" />
<text  x="509.81" y="1727.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (44 samples, 0.28%)</title><rect x="124.3" y="1797" width="3.3" height="15.0" fill="rgb(250,131,2)" rx="2" ry="2" />
<text  x="127.30" y="1807.5" ></text>
</g>
<g >
<title>__sanitizer::StackDepotBase&lt;__sanitizer::StackDepotNode, 1, 20&gt;::Put (433 samples, 2.74%)</title><rect x="1150.8" y="2053" width="32.3" height="15.0" fill="rgb(208,117,49)" rx="2" ry="2" />
<text  x="1153.76" y="2063.5" >__..</text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_insert_node (8 samples, 0.05%)</title><rect x="907.2" y="1829" width="0.6" height="15.0" fill="rgb(231,166,35)" rx="2" ry="2" />
<text  x="910.24" y="1839.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (508 samples, 3.21%)</title><rect x="662.2" y="1765" width="37.9" height="15.0" fill="rgb(233,16,24)" rx="2" ry="2" />
<text  x="665.22" y="1775.5" >__g..</text>
</g>
<g >
<title>TTranspositionTable::TPositionEqualFn::operator (6 samples, 0.04%)</title><rect x="149.1" y="1797" width="0.5" height="15.0" fill="rgb(253,17,38)" rx="2" ry="2" />
<text  x="152.14" y="1807.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::erase (2 samples, 0.01%)</title><rect x="549.7" y="1765" width="0.2" height="15.0" fill="rgb(214,28,31)" rx="2" ry="2" />
<text  x="552.71" y="1775.5" ></text>
</g>
<g >
<title>CalcPSTScore (13 samples, 0.08%)</title><rect x="355.0" y="1813" width="1.0" height="15.0" fill="rgb(249,26,36)" rx="2" ry="2" />
<text  x="357.99" y="1823.5" ></text>
</g>
<g >
<title>__pthread_getspecific (2 samples, 0.01%)</title><rect x="570.7" y="1813" width="0.1" height="15.0" fill="rgb(234,223,13)" rx="2" ry="2" />
<text  x="573.68" y="1823.5" ></text>
</g>
<g >
<title>lczero::Position::Hash (51 samples, 0.32%)</title><rect x="345.8" y="1765" width="3.8" height="15.0" fill="rgb(213,202,30)" rx="2" ry="2" />
<text  x="348.81" y="1775.5" ></text>
</g>
<g >
<title>THistoryHeuristics::Get (2 samples, 0.01%)</title><rect x="237.9" y="1861" width="0.2" height="15.0" fill="rgb(221,140,30)" rx="2" ry="2" />
<text  x="240.93" y="1871.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsUnderAttack (7 samples, 0.04%)</title><rect x="544.0" y="1749" width="0.5" height="15.0" fill="rgb(237,152,51)" rx="2" ry="2" />
<text  x="546.97" y="1759.5" ></text>
</g>
<g >
<title>__sanitizer::BlockingMutex::Unlock (2 samples, 0.01%)</title><rect x="994.7" y="2037" width="0.1" height="15.0" fill="rgb(231,22,29)" rx="2" ry="2" />
<text  x="997.68" y="2047.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ChessBoard (4 samples, 0.03%)</title><rect x="956.3" y="1877" width="0.3" height="15.0" fill="rgb(244,95,25)" rx="2" ry="2" />
<text  x="959.33" y="1887.5" ></text>
</g>
<g >
<title>TSearchStrategy::Search (8 samples, 0.05%)</title><rect x="25.1" y="1973" width="0.6" height="15.0" fill="rgb(249,68,53)" rx="2" ry="2" />
<text  x="28.07" y="1983.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ApplyMove (2 samples, 0.01%)</title><rect x="480.9" y="1749" width="0.2" height="15.0" fill="rgb(221,70,50)" rx="2" ry="2" />
<text  x="483.93" y="1759.5" ></text>
</g>
<g >
<title>lczero::Position::Position (88 samples, 0.56%)</title><rect x="929.2" y="1861" width="6.6" height="15.0" fill="rgb(214,68,5)" rx="2" ry="2" />
<text  x="932.25" y="1871.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (126 samples, 0.80%)</title><rect x="998.0" y="2005" width="9.4" height="15.0" fill="rgb(225,40,22)" rx="2" ry="2" />
<text  x="1001.03" y="2015.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::operator== (3 samples, 0.02%)</title><rect x="32.8" y="1797" width="0.3" height="15.0" fill="rgb(230,127,0)" rx="2" ry="2" />
<text  x="35.83" y="1807.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (4 samples, 0.03%)</title><rect x="950.9" y="1765" width="0.3" height="15.0" fill="rgb(206,107,30)" rx="2" ry="2" />
<text  x="953.88" y="1775.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_emplace_equal&lt;int&amp;, TSearchNode&gt; (2 samples, 0.01%)</title><rect x="957.8" y="1925" width="0.2" height="15.0" fill="rgb(221,226,32)" rx="2" ry="2" />
<text  x="960.82" y="1935.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (2 samples, 0.01%)</title><rect x="507.0" y="1685" width="0.2" height="15.0" fill="rgb(240,84,44)" rx="2" ry="2" />
<text  x="510.04" y="1695.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::back (8 samples, 0.05%)</title><rect x="161.7" y="1797" width="0.6" height="15.0" fill="rgb(248,85,32)" rx="2" ry="2" />
<text  x="164.68" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (24 samples, 0.15%)</title><rect x="547.7" y="1717" width="1.8" height="15.0" fill="rgb(223,44,2)" rx="2" ry="2" />
<text  x="550.70" y="1727.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetBishopAttacks (2 samples, 0.01%)</title><rect x="557.5" y="1749" width="0.2" height="15.0" fill="rgb(213,137,33)" rx="2" ry="2" />
<text  x="560.55" y="1759.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (10 samples, 0.06%)</title><rect x="323.1" y="1829" width="0.8" height="15.0" fill="rgb(235,41,12)" rx="2" ry="2" />
<text  x="326.13" y="1839.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (2 samples, 0.01%)</title><rect x="111.2" y="1733" width="0.2" height="15.0" fill="rgb(247,216,41)" rx="2" ry="2" />
<text  x="114.24" y="1743.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::find_node_impl&lt;lczero::Position, TTranspositionTable::TPositionEqualFn&gt; (2 samples, 0.01%)</title><rect x="292.8" y="1845" width="0.2" height="15.0" fill="rgb(229,160,39)" rx="2" ry="2" />
<text  x="295.84" y="1855.5" ></text>
</g>
<g >
<title>[unknown] (175 samples, 1.11%)</title><rect x="963.0" y="997" width="13.0" height="15.0" fill="rgb(242,193,1)" rx="2" ry="2" />
<text  x="965.97" y="1007.5" ></text>
</g>
<g >
<title>THistoryHeuristics::GetCounterMove (6 samples, 0.04%)</title><rect x="343.4" y="1829" width="0.5" height="15.0" fill="rgb(243,124,20)" rx="2" ry="2" />
<text  x="346.42" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::knights (2 samples, 0.01%)</title><rect x="487.7" y="1749" width="0.2" height="15.0" fill="rgb(212,229,27)" rx="2" ry="2" />
<text  x="490.71" y="1759.5" ></text>
</g>
<g >
<title>TTranspositionTable::Find (9 samples, 0.06%)</title><rect x="28.4" y="1877" width="0.6" height="15.0" fill="rgb(217,76,48)" rx="2" ry="2" />
<text  x="31.35" y="1887.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (4 samples, 0.03%)</title><rect x="106.8" y="1781" width="0.3" height="15.0" fill="rgb(218,18,50)" rx="2" ry="2" />
<text  x="109.77" y="1791.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (4 samples, 0.03%)</title><rect x="498.1" y="1733" width="0.3" height="15.0" fill="rgb(254,102,13)" rx="2" ry="2" />
<text  x="501.09" y="1743.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetRookAttacks (2 samples, 0.01%)</title><rect x="464.0" y="1733" width="0.1" height="15.0" fill="rgb(213,77,14)" rx="2" ry="2" />
<text  x="466.99" y="1743.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (4 samples, 0.03%)</title><rect x="234.0" y="1909" width="0.3" height="15.0" fill="rgb(211,3,11)" rx="2" ry="2" />
<text  x="237.05" y="1919.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (17 samples, 0.11%)</title><rect x="64.6" y="1829" width="1.3" height="15.0" fill="rgb(237,169,41)" rx="2" ry="2" />
<text  x="67.61" y="1839.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::reserve_for_insert (13 samples, 0.08%)</title><rect x="171.2" y="1813" width="0.9" height="15.0" fill="rgb(247,40,9)" rx="2" ry="2" />
<text  x="174.15" y="1823.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_emplace_equal&lt;int&amp;, TSearchNode&gt; (4 samples, 0.03%)</title><rect x="291.2" y="1925" width="0.3" height="15.0" fill="rgb(223,92,52)" rx="2" ry="2" />
<text  x="294.20" y="1935.5" ></text>
</g>
<g >
<title>__sanitizer::RunFreeHooks (2 samples, 0.01%)</title><rect x="1148.8" y="2053" width="0.2" height="15.0" fill="rgb(245,118,52)" rx="2" ry="2" />
<text  x="1151.82" y="2063.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateKingAttackInfo (29 samples, 0.18%)</title><rect x="733.1" y="1813" width="2.2" height="15.0" fill="rgb(246,174,45)" rx="2" ry="2" />
<text  x="736.10" y="1823.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (6 samples, 0.04%)</title><rect x="65.4" y="1781" width="0.5" height="15.0" fill="rgb(225,107,15)" rx="2" ry="2" />
<text  x="68.43" y="1791.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (2 samples, 0.01%)</title><rect x="285.2" y="1861" width="0.2" height="15.0" fill="rgb(229,134,43)" rx="2" ry="2" />
<text  x="288.23" y="1871.5" ></text>
</g>
<g >
<title>Evaluate (5 samples, 0.03%)</title><rect x="414.2" y="1829" width="0.4" height="15.0" fill="rgb(237,226,21)" rx="2" ry="2" />
<text  x="417.23" y="1839.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (5 samples, 0.03%)</title><rect x="292.0" y="1877" width="0.4" height="15.0" fill="rgb(240,122,43)" rx="2" ry="2" />
<text  x="295.02" y="1887.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (2 samples, 0.01%)</title><rect x="228.0" y="1877" width="0.2" height="15.0" fill="rgb(238,88,12)" rx="2" ry="2" />
<text  x="231.00" y="1887.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (108 samples, 0.68%)</title><rect x="245.0" y="1861" width="8.1" height="15.0" fill="rgb(232,69,4)" rx="2" ry="2" />
<text  x="248.02" y="1871.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (74 samples, 0.47%)</title><rect x="185.0" y="1813" width="5.5" height="15.0" fill="rgb(249,122,51)" rx="2" ry="2" />
<text  x="187.96" y="1823.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (7 samples, 0.04%)</title><rect x="287.1" y="1845" width="0.5" height="15.0" fill="rgb(220,141,6)" rx="2" ry="2" />
<text  x="290.09" y="1855.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (2 samples, 0.01%)</title><rect x="31.3" y="1813" width="0.2" height="15.0" fill="rgb(212,178,28)" rx="2" ry="2" />
<text  x="34.34" y="1823.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_emplace_equal&lt;int&amp;, TSearchNode&gt; (2 samples, 0.01%)</title><rect x="264.4" y="1829" width="0.2" height="15.0" fill="rgb(224,100,29)" rx="2" ry="2" />
<text  x="267.41" y="1839.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (33 samples, 0.21%)</title><rect x="537.3" y="1717" width="2.5" height="15.0" fill="rgb(254,79,7)" rx="2" ry="2" />
<text  x="540.33" y="1727.5" ></text>
</g>
<g >
<title>boost::unordered::unordered_map&lt;lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt; &gt;::find (2 samples, 0.01%)</title><rect x="291.6" y="1877" width="0.2" height="15.0" fill="rgb(243,138,14)" rx="2" ry="2" />
<text  x="294.65" y="1887.5" ></text>
</g>
<g >
<title>TSearchStrategy::Search (7 samples, 0.04%)</title><rect x="25.1" y="1925" width="0.6" height="15.0" fill="rgb(210,68,49)" rx="2" ry="2" />
<text  x="28.15" y="1935.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (9 samples, 0.06%)</title><rect x="286.9" y="1877" width="0.7" height="15.0" fill="rgb(210,67,11)" rx="2" ry="2" />
<text  x="289.94" y="1887.5" ></text>
</g>
<g >
<title>lczero::Position::Hash (2 samples, 0.01%)</title><rect x="281.3" y="1813" width="0.1" height="15.0" fill="rgb(229,220,28)" rx="2" ry="2" />
<text  x="284.27" y="1823.5" ></text>
</g>
<g >
<title>TSearchStrategy::CalcMoveOrder (3 samples, 0.02%)</title><rect x="108.6" y="1733" width="0.3" height="15.0" fill="rgb(215,53,9)" rx="2" ry="2" />
<text  x="111.63" y="1743.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_emplace_equal&lt;int&amp;, TSearchNode&gt; (214 samples, 1.35%)</title><rect x="893.7" y="1845" width="15.9" height="15.0" fill="rgb(251,123,24)" rx="2" ry="2" />
<text  x="896.66" y="1855.5" ></text>
</g>
<g >
<title>__asan_memset (4 samples, 0.03%)</title><rect x="577.5" y="1781" width="0.3" height="15.0" fill="rgb(205,194,32)" rx="2" ry="2" />
<text  x="580.54" y="1791.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (2 samples, 0.01%)</title><rect x="231.7" y="1845" width="0.2" height="15.0" fill="rgb(249,122,44)" rx="2" ry="2" />
<text  x="234.73" y="1855.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetRookAttacks (2 samples, 0.01%)</title><rect x="353.5" y="1781" width="0.1" height="15.0" fill="rgb(221,94,2)" rx="2" ry="2" />
<text  x="356.50" y="1791.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (5 samples, 0.03%)</title><rect x="247.1" y="1781" width="0.4" height="15.0" fill="rgb(207,149,29)" rx="2" ry="2" />
<text  x="250.10" y="1791.5" ></text>
</g>
<g >
<title>TSearchStrategy::CalcMoveOrder (35 samples, 0.22%)</title><rect x="483.2" y="1797" width="2.6" height="15.0" fill="rgb(233,66,41)" rx="2" ry="2" />
<text  x="486.24" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (8 samples, 0.05%)</title><rect x="515.0" y="1653" width="0.6" height="15.0" fill="rgb(247,126,36)" rx="2" ry="2" />
<text  x="518.02" y="1663.5" ></text>
</g>
<g >
<title>[unknown] (130 samples, 0.82%)</title><rect x="963.0" y="501" width="9.7" height="15.0" fill="rgb(242,85,32)" rx="2" ry="2" />
<text  x="965.97" y="511.5" ></text>
</g>
<g >
<title>boost::unordered::unordered_map&lt;lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt; &gt;::find (68 samples, 0.43%)</title><rect x="312.5" y="1829" width="5.1" height="15.0" fill="rgb(207,85,21)" rx="2" ry="2" />
<text  x="315.54" y="1839.5" ></text>
</g>
<g >
<title>TTranspositionTable::TPositionEqualFn::operator (4 samples, 0.03%)</title><rect x="32.8" y="1813" width="0.3" height="15.0" fill="rgb(223,111,44)" rx="2" ry="2" />
<text  x="35.76" y="1823.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (5 samples, 0.03%)</title><rect x="112.4" y="1749" width="0.4" height="15.0" fill="rgb(209,207,27)" rx="2" ry="2" />
<text  x="115.44" y="1759.5" ></text>
</g>
<g >
<title>__asan_region_is_poisoned (2 samples, 0.01%)</title><rect x="954.2" y="1829" width="0.1" height="15.0" fill="rgb(247,184,49)" rx="2" ry="2" />
<text  x="957.16" y="1839.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::~_Rb_tree (44 samples, 0.28%)</title><rect x="947.9" y="1861" width="3.3" height="15.0" fill="rgb(247,170,38)" rx="2" ry="2" />
<text  x="950.90" y="1871.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (24 samples, 0.15%)</title><rect x="527.9" y="1733" width="1.8" height="15.0" fill="rgb(215,38,35)" rx="2" ry="2" />
<text  x="530.93" y="1743.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::_M_erase (8 samples, 0.05%)</title><rect x="864.0" y="1797" width="0.6" height="15.0" fill="rgb(228,64,22)" rx="2" ry="2" />
<text  x="866.96" y="1807.5" ></text>
</g>
<g >
<title>boost::unordered::unordered_map&lt;lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt; &gt;::find (36 samples, 0.23%)</title><rect x="148.5" y="1829" width="2.7" height="15.0" fill="rgb(220,101,37)" rx="2" ry="2" />
<text  x="151.55" y="1839.5" ></text>
</g>
<g >
<title>std::array&lt;lczero::Move, 64ul&gt;::at (2 samples, 0.01%)</title><rect x="60.1" y="1845" width="0.1" height="15.0" fill="rgb(251,211,9)" rx="2" ry="2" />
<text  x="63.06" y="1855.5" ></text>
</g>
<g >
<title>[unknown] (125 samples, 0.79%)</title><rect x="963.0" y="469" width="9.3" height="15.0" fill="rgb(214,91,51)" rx="2" ry="2" />
<text  x="965.97" y="479.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (2 samples, 0.01%)</title><rect x="88.2" y="1765" width="0.1" height="15.0" fill="rgb(237,115,7)" rx="2" ry="2" />
<text  x="91.19" y="1775.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (11 samples, 0.07%)</title><rect x="515.6" y="1669" width="0.8" height="15.0" fill="rgb(228,54,32)" rx="2" ry="2" />
<text  x="518.62" y="1679.5" ></text>
</g>
<g >
<title>__asan_region_is_poisoned (2 samples, 0.01%)</title><rect x="116.1" y="1749" width="0.1" height="15.0" fill="rgb(224,149,0)" rx="2" ry="2" />
<text  x="119.09" y="1759.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (40 samples, 0.25%)</title><rect x="911.6" y="1829" width="2.9" height="15.0" fill="rgb(243,206,14)" rx="2" ry="2" />
<text  x="914.56" y="1839.5" ></text>
</g>
<g >
<title>[unknown] (140 samples, 0.89%)</title><rect x="963.0" y="645" width="10.4" height="15.0" fill="rgb(237,82,13)" rx="2" ry="2" />
<text  x="965.97" y="655.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.01%)</title><rect x="973.4" y="645" width="0.2" height="15.0" fill="rgb(214,34,51)" rx="2" ry="2" />
<text  x="976.41" y="655.5" ></text>
</g>
<g >
<title>GetPieceType (12 samples, 0.08%)</title><rect x="40.8" y="1845" width="0.9" height="15.0" fill="rgb(236,2,20)" rx="2" ry="2" />
<text  x="43.81" y="1855.5" ></text>
</g>
<g >
<title>lczero::Position::Position (4 samples, 0.03%)</title><rect x="471.8" y="1765" width="0.3" height="15.0" fill="rgb(218,185,46)" rx="2" ry="2" />
<text  x="474.82" y="1775.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_get_insert_equal_pos (4 samples, 0.03%)</title><rect x="284.7" y="1861" width="0.3" height="15.0" fill="rgb(223,137,0)" rx="2" ry="2" />
<text  x="287.71" y="1871.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (627 samples, 3.96%)</title><rect x="494.0" y="1781" width="46.8" height="15.0" fill="rgb(232,144,31)" rx="2" ry="2" />
<text  x="496.98" y="1791.5" >TSea..</text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetBishopAttacks (10 samples, 0.06%)</title><rect x="785.6" y="1781" width="0.8" height="15.0" fill="rgb(215,24,41)" rx="2" ry="2" />
<text  x="788.62" y="1791.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateKingAttackInfo (2 samples, 0.01%)</title><rect x="320.8" y="1829" width="0.2" height="15.0" fill="rgb(240,3,7)" rx="2" ry="2" />
<text  x="323.82" y="1839.5" ></text>
</g>
<g >
<title>GetPieceType (2 samples, 0.01%)</title><rect x="508.3" y="1701" width="0.2" height="15.0" fill="rgb(211,145,38)" rx="2" ry="2" />
<text  x="511.31" y="1711.5" ></text>
</g>
<g >
<title>lczero::BitBoard::get (122 samples, 0.77%)</title><rect x="397.4" y="1813" width="9.1" height="15.0" fill="rgb(246,100,17)" rx="2" ry="2" />
<text  x="400.36" y="1823.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::begin (2 samples, 0.01%)</title><rect x="244.7" y="1797" width="0.2" height="15.0" fill="rgb(219,82,13)" rx="2" ry="2" />
<text  x="247.72" y="1807.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;boost::unordered::detail::ptr_node&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt; &gt; &gt;::construct&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;lczero::Position const&amp;&gt;, std::tuple&lt;TTranspositionTable::TNode&amp;&amp;&gt; &gt; (2 samples, 0.01%)</title><rect x="870.0" y="1813" width="0.2" height="15.0" fill="rgb(240,92,45)" rx="2" ry="2" />
<text  x="873.01" y="1823.5" ></text>
</g>
<g >
<title>boost::unordered::unordered_map&lt;lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt; &gt;::find (5 samples, 0.03%)</title><rect x="507.5" y="1701" width="0.4" height="15.0" fill="rgb(224,78,30)" rx="2" ry="2" />
<text  x="510.49" y="1711.5" ></text>
</g>
<g >
<title>__sanitizer::mem_is_zero (80 samples, 0.51%)</title><rect x="1183.7" y="2053" width="6.0" height="15.0" fill="rgb(208,65,7)" rx="2" ry="2" />
<text  x="1186.73" y="2063.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::find_node_impl&lt;lczero::Position, TTranspositionTable::TPositionEqualFn&gt; (5 samples, 0.03%)</title><rect x="28.7" y="1845" width="0.3" height="15.0" fill="rgb(226,142,26)" rx="2" ry="2" />
<text  x="31.65" y="1855.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (135 samples, 0.85%)</title><rect x="254.5" y="1845" width="10.1" height="15.0" fill="rgb(215,72,54)" rx="2" ry="2" />
<text  x="257.49" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (9 samples, 0.06%)</title><rect x="268.7" y="1781" width="0.6" height="15.0" fill="rgb(218,174,44)" rx="2" ry="2" />
<text  x="271.67" y="1791.5" ></text>
</g>
<g >
<title>__lsan::LsanMetadata::allocated (5 samples, 0.03%)</title><rect x="993.3" y="2037" width="0.4" height="15.0" fill="rgb(241,163,51)" rx="2" ry="2" />
<text  x="996.33" y="2047.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.01%)</title><rect x="977.4" y="1141" width="0.1" height="15.0" fill="rgb(239,37,20)" rx="2" ry="2" />
<text  x="980.37" y="1151.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (22 samples, 0.14%)</title><rect x="567.5" y="1813" width="1.6" height="15.0" fill="rgb(241,94,33)" rx="2" ry="2" />
<text  x="570.47" y="1823.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (3 samples, 0.02%)</title><rect x="190.6" y="1845" width="0.2" height="15.0" fill="rgb(216,200,10)" rx="2" ry="2" />
<text  x="193.63" y="1855.5" ></text>
</g>
<g >
<title>[unknown] (193 samples, 1.22%)</title><rect x="963.0" y="1141" width="14.4" height="15.0" fill="rgb(225,23,3)" rx="2" ry="2" />
<text  x="965.97" y="1151.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::operator== (2 samples, 0.01%)</title><rect x="485.1" y="1717" width="0.2" height="15.0" fill="rgb(211,44,48)" rx="2" ry="2" />
<text  x="488.10" y="1727.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (2 samples, 0.01%)</title><rect x="95.1" y="1781" width="0.1" height="15.0" fill="rgb(249,56,3)" rx="2" ry="2" />
<text  x="98.05" y="1791.5" ></text>
</g>
<g >
<title>bratko_kopec::test_method (2,783 samples, 17.60%)</title><rect x="25.7" y="2005" width="207.7" height="15.0" fill="rgb(213,68,12)" rx="2" ry="2" />
<text  x="28.74" y="2015.5" >bratko_kopec::test_method</text>
</g>
<g >
<title>__asan::AsanThread::stack_top (4 samples, 0.03%)</title><rect x="895.1" y="1813" width="0.3" height="15.0" fill="rgb(220,133,16)" rx="2" ry="2" />
<text  x="898.15" y="1823.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (17 samples, 0.11%)</title><rect x="251.5" y="1797" width="1.3" height="15.0" fill="rgb(211,60,30)" rx="2" ry="2" />
<text  x="254.51" y="1807.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (2 samples, 0.01%)</title><rect x="34.2" y="1829" width="0.2" height="15.0" fill="rgb(253,22,44)" rx="2" ry="2" />
<text  x="37.25" y="1839.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::back (11 samples, 0.07%)</title><rect x="139.1" y="1781" width="0.9" height="15.0" fill="rgb(226,25,18)" rx="2" ry="2" />
<text  x="142.15" y="1791.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateKingAttackInfo (4 samples, 0.03%)</title><rect x="173.2" y="1845" width="0.3" height="15.0" fill="rgb(247,155,11)" rx="2" ry="2" />
<text  x="176.24" y="1855.5" ></text>
</g>
<g >
<title>__sanitizer::mem_is_zero (17 samples, 0.11%)</title><rect x="729.8" y="1829" width="1.3" height="15.0" fill="rgb(254,61,53)" rx="2" ry="2" />
<text  x="732.82" y="1839.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::back (3 samples, 0.02%)</title><rect x="71.3" y="1797" width="0.2" height="15.0" fill="rgb(216,66,53)" rx="2" ry="2" />
<text  x="74.25" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (2 samples, 0.01%)</title><rect x="110.5" y="1685" width="0.1" height="15.0" fill="rgb(229,133,23)" rx="2" ry="2" />
<text  x="113.50" y="1695.5" ></text>
</g>
<g >
<title>[unknown] (201 samples, 1.27%)</title><rect x="963.0" y="1237" width="15.0" height="15.0" fill="rgb(229,144,42)" rx="2" ry="2" />
<text  x="965.97" y="1247.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (2 samples, 0.01%)</title><rect x="242.9" y="1813" width="0.2" height="15.0" fill="rgb(216,42,34)" rx="2" ry="2" />
<text  x="245.93" y="1823.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (55 samples, 0.35%)</title><rect x="335.5" y="1813" width="4.1" height="15.0" fill="rgb(230,54,11)" rx="2" ry="2" />
<text  x="338.51" y="1823.5" ></text>
</g>
<g >
<title>__sanitizer::StackDepotPut (9 samples, 0.06%)</title><rect x="1183.1" y="2053" width="0.6" height="15.0" fill="rgb(211,28,32)" rx="2" ry="2" />
<text  x="1186.06" y="2063.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsUnderAttack (52 samples, 0.33%)</title><rect x="621.9" y="1781" width="3.8" height="15.0" fill="rgb(242,229,2)" rx="2" ry="2" />
<text  x="624.86" y="1791.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::resize_and_add_node_unique (4 samples, 0.03%)</title><rect x="918.0" y="1829" width="0.3" height="15.0" fill="rgb(249,117,6)" rx="2" ry="2" />
<text  x="920.98" y="1839.5" ></text>
</g>
<g >
<title>std::array&lt;int, 2ul&gt;::operator[] (50 samples, 0.32%)</title><rect x="455.5" y="1797" width="3.7" height="15.0" fill="rgb(212,62,13)" rx="2" ry="2" />
<text  x="458.48" y="1807.5" ></text>
</g>
<g >
<title>__asan_memcpy (10 samples, 0.06%)</title><rect x="194.2" y="1845" width="0.8" height="15.0" fill="rgb(224,134,50)" rx="2" ry="2" />
<text  x="197.21" y="1855.5" ></text>
</g>
<g >
<title>lczero::Position::Position (3 samples, 0.02%)</title><rect x="88.3" y="1765" width="0.3" height="15.0" fill="rgb(217,90,45)" rx="2" ry="2" />
<text  x="91.34" y="1775.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (19 samples, 0.12%)</title><rect x="274.9" y="1797" width="1.4" height="15.0" fill="rgb(207,191,40)" rx="2" ry="2" />
<text  x="277.86" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ApplyMove (6 samples, 0.04%)</title><rect x="466.7" y="1765" width="0.4" height="15.0" fill="rgb(226,60,28)" rx="2" ry="2" />
<text  x="469.68" y="1775.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetBishopAttacks (2 samples, 0.01%)</title><rect x="544.2" y="1733" width="0.1" height="15.0" fill="rgb(226,100,52)" rx="2" ry="2" />
<text  x="547.19" y="1743.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (6 samples, 0.04%)</title><rect x="224.3" y="1861" width="0.4" height="15.0" fill="rgb(225,66,18)" rx="2" ry="2" />
<text  x="227.27" y="1871.5" ></text>
</g>
<g >
<title>lczero::BitBoard::get (4 samples, 0.03%)</title><rect x="318.4" y="1829" width="0.3" height="15.0" fill="rgb(228,117,15)" rx="2" ry="2" />
<text  x="321.35" y="1839.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (114 samples, 0.72%)</title><rect x="511.0" y="1717" width="8.5" height="15.0" fill="rgb(223,68,54)" rx="2" ry="2" />
<text  x="513.99" y="1727.5" ></text>
</g>
<g >
<title>__asan::AsanTSDGet (14 samples, 0.09%)</title><rect x="1106.7" y="2053" width="1.1" height="15.0" fill="rgb(216,124,18)" rx="2" ry="2" />
<text  x="1109.74" y="2063.5" ></text>
</g>
<g >
<title>lczero::Position::Position (6 samples, 0.04%)</title><rect x="479.6" y="1749" width="0.4" height="15.0" fill="rgb(233,125,18)" rx="2" ry="2" />
<text  x="482.58" y="1759.5" ></text>
</g>
<g >
<title>THistoryHeuristics::GetCounterMove (5 samples, 0.03%)</title><rect x="52.8" y="1845" width="0.4" height="15.0" fill="rgb(234,96,30)" rx="2" ry="2" />
<text  x="55.82" y="1855.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.01%)</title><rect x="225.3" y="1829" width="0.2" height="15.0" fill="rgb(210,189,37)" rx="2" ry="2" />
<text  x="228.32" y="1839.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (3 samples, 0.02%)</title><rect x="914.3" y="1765" width="0.2" height="15.0" fill="rgb(240,32,15)" rx="2" ry="2" />
<text  x="917.32" y="1775.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (12 samples, 0.08%)</title><rect x="101.4" y="1813" width="0.9" height="15.0" fill="rgb(254,18,20)" rx="2" ry="2" />
<text  x="104.39" y="1823.5" ></text>
</g>
<g >
<title>[unknown] (216 samples, 1.37%)</title><rect x="963.0" y="1429" width="16.1" height="15.0" fill="rgb(216,163,14)" rx="2" ry="2" />
<text  x="965.97" y="1439.5" ></text>
</g>
<g >
<title>__pthread_getspecific (2 samples, 0.01%)</title><rect x="937.4" y="1829" width="0.1" height="15.0" fill="rgb(218,116,11)" rx="2" ry="2" />
<text  x="940.38" y="1839.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (2 samples, 0.01%)</title><rect x="34.5" y="1813" width="0.2" height="15.0" fill="rgb(211,221,8)" rx="2" ry="2" />
<text  x="37.55" y="1823.5" ></text>
</g>
<g >
<title>[unknown] (122 samples, 0.77%)</title><rect x="963.0" y="437" width="9.1" height="15.0" fill="rgb(226,67,24)" rx="2" ry="2" />
<text  x="965.97" y="447.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (3 samples, 0.02%)</title><rect x="951.0" y="1749" width="0.2" height="15.0" fill="rgb(231,218,52)" rx="2" ry="2" />
<text  x="953.96" y="1759.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (2 samples, 0.01%)</title><rect x="124.4" y="1765" width="0.2" height="15.0" fill="rgb(253,96,20)" rx="2" ry="2" />
<text  x="127.45" y="1775.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (16 samples, 0.10%)</title><rect x="529.9" y="1701" width="1.2" height="15.0" fill="rgb(213,186,46)" rx="2" ry="2" />
<text  x="532.87" y="1711.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (3 samples, 0.02%)</title><rect x="231.4" y="1893" width="0.2" height="15.0" fill="rgb(241,201,18)" rx="2" ry="2" />
<text  x="234.36" y="1903.5" ></text>
</g>
<g >
<title>IsCapture (6 samples, 0.04%)</title><rect x="469.7" y="1813" width="0.5" height="15.0" fill="rgb(248,94,39)" rx="2" ry="2" />
<text  x="472.73" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (2 samples, 0.01%)</title><rect x="247.0" y="1813" width="0.1" height="15.0" fill="rgb(221,141,54)" rx="2" ry="2" />
<text  x="249.95" y="1823.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::get_bucket_pointer (3 samples, 0.02%)</title><rect x="350.7" y="1765" width="0.2" height="15.0" fill="rgb(223,5,35)" rx="2" ry="2" />
<text  x="353.66" y="1775.5" ></text>
</g>
<g >
<title>__asan_memset (2 samples, 0.01%)</title><rect x="128.6" y="1829" width="0.1" height="15.0" fill="rgb(206,44,46)" rx="2" ry="2" />
<text  x="131.55" y="1839.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (12 samples, 0.08%)</title><rect x="366.4" y="1781" width="0.9" height="15.0" fill="rgb(233,101,40)" rx="2" ry="2" />
<text  x="369.40" y="1791.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::back (3 samples, 0.02%)</title><rect x="180.8" y="1829" width="0.2" height="15.0" fill="rgb(245,183,25)" rx="2" ry="2" />
<text  x="183.78" y="1839.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::find_node_impl&lt;lczero::Position, TTranspositionTable::TPositionEqualFn&gt; (5 samples, 0.03%)</title><rect x="500.8" y="1717" width="0.4" height="15.0" fill="rgb(222,60,48)" rx="2" ry="2" />
<text  x="503.85" y="1727.5" ></text>
</g>
<g >
<title>lczero::BitBoard::get (3 samples, 0.02%)</title><rect x="151.6" y="1845" width="0.2" height="15.0" fill="rgb(252,179,25)" rx="2" ry="2" />
<text  x="154.61" y="1855.5" ></text>
</g>
<g >
<title>[unknown] (104 samples, 0.66%)</title><rect x="963.0" y="197" width="7.7" height="15.0" fill="rgb(207,38,43)" rx="2" ry="2" />
<text  x="965.97" y="207.5" ></text>
</g>
<g >
<title>TSearchStrategy::CalcMoveOrder (211 samples, 1.33%)</title><rect x="44.6" y="1861" width="15.8" height="15.0" fill="rgb(216,136,38)" rx="2" ry="2" />
<text  x="47.62" y="1871.5" ></text>
</g>
<g >
<title>TSearchStrategy::CalcMoveOrder (2 samples, 0.01%)</title><rect x="356.1" y="1813" width="0.2" height="15.0" fill="rgb(235,199,13)" rx="2" ry="2" />
<text  x="359.11" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::Hash (3 samples, 0.02%)</title><rect x="168.7" y="1781" width="0.2" height="15.0" fill="rgb(220,65,33)" rx="2" ry="2" />
<text  x="171.69" y="1791.5" ></text>
</g>
<g >
<title>CalcPSTScore (22 samples, 0.14%)</title><rect x="245.1" y="1845" width="1.6" height="15.0" fill="rgb(248,30,14)" rx="2" ry="2" />
<text  x="248.09" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (3 samples, 0.02%)</title><rect x="471.2" y="1749" width="0.3" height="15.0" fill="rgb(212,174,16)" rx="2" ry="2" />
<text  x="474.23" y="1759.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::find_node (3 samples, 0.02%)</title><rect x="168.7" y="1829" width="0.2" height="15.0" fill="rgb(206,46,51)" rx="2" ry="2" />
<text  x="171.69" y="1839.5" ></text>
</g>
<g >
<title>__asan::AsanThread::stack_bottom (2 samples, 0.01%)</title><rect x="813.2" y="1781" width="0.1" height="15.0" fill="rgb(239,32,51)" rx="2" ry="2" />
<text  x="816.16" y="1791.5" ></text>
</g>
<g >
<title>TTranspositionTable::Find (11 samples, 0.07%)</title><rect x="485.0" y="1781" width="0.8" height="15.0" fill="rgb(239,169,16)" rx="2" ry="2" />
<text  x="488.03" y="1791.5" ></text>
</g>
<g >
<title>GetPieceType (3 samples, 0.02%)</title><rect x="253.6" y="1829" width="0.2" height="15.0" fill="rgb(209,145,19)" rx="2" ry="2" />
<text  x="256.60" y="1839.5" ></text>
</g>
<g >
<title>boost::unordered::unordered_map&lt;lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt; &gt;::find (3 samples, 0.02%)</title><rect x="226.1" y="1877" width="0.2" height="15.0" fill="rgb(239,70,37)" rx="2" ry="2" />
<text  x="229.06" y="1887.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetBishopAttacks (2 samples, 0.01%)</title><rect x="336.3" y="1781" width="0.2" height="15.0" fill="rgb(228,176,25)" rx="2" ry="2" />
<text  x="339.34" y="1791.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ApplyMove (3 samples, 0.02%)</title><rect x="465.4" y="1749" width="0.2" height="15.0" fill="rgb(206,194,36)" rx="2" ry="2" />
<text  x="468.41" y="1759.5" ></text>
</g>
<g >
<title>[unknown] (206 samples, 1.30%)</title><rect x="963.0" y="1301" width="15.3" height="15.0" fill="rgb(229,185,51)" rx="2" ry="2" />
<text  x="965.97" y="1311.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_emplace_equal&lt;int&amp;, TSearchNode&gt; (194 samples, 1.23%)</title><rect x="200.4" y="1861" width="14.5" height="15.0" fill="rgb(220,102,30)" rx="2" ry="2" />
<text  x="203.40" y="1871.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_get_insert_equal_pos (10 samples, 0.06%)</title><rect x="954.5" y="1861" width="0.8" height="15.0" fill="rgb(222,161,13)" rx="2" ry="2" />
<text  x="957.54" y="1871.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (18 samples, 0.11%)</title><rect x="238.4" y="1877" width="1.3" height="15.0" fill="rgb(230,34,6)" rx="2" ry="2" />
<text  x="241.38" y="1887.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (4 samples, 0.03%)</title><rect x="1189.7" y="2037" width="0.3" height="15.0" fill="rgb(238,165,44)" rx="2" ry="2" />
<text  x="1192.70" y="2047.5" ></text>
</g>
<g >
<title>lczero::BitBoard::get (2 samples, 0.01%)</title><rect x="505.6" y="1717" width="0.2" height="15.0" fill="rgb(226,181,17)" rx="2" ry="2" />
<text  x="508.62" y="1727.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (15 samples, 0.09%)</title><rect x="946.0" y="1845" width="1.2" height="15.0" fill="rgb(249,180,15)" rx="2" ry="2" />
<text  x="949.03" y="1855.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::erase (18 samples, 0.11%)</title><rect x="863.2" y="1813" width="1.4" height="15.0" fill="rgb(252,12,13)" rx="2" ry="2" />
<text  x="866.22" y="1823.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (3 samples, 0.02%)</title><rect x="124.4" y="1781" width="0.2" height="15.0" fill="rgb(231,20,40)" rx="2" ry="2" />
<text  x="127.37" y="1791.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (2 samples, 0.01%)</title><rect x="928.8" y="1813" width="0.1" height="15.0" fill="rgb(222,26,47)" rx="2" ry="2" />
<text  x="931.80" y="1823.5" ></text>
</g>
<g >
<title>operator new (9 samples, 0.06%)</title><rect x="202.9" y="1829" width="0.7" height="15.0" fill="rgb(213,199,4)" rx="2" ry="2" />
<text  x="205.94" y="1839.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetRookAttacks (2 samples, 0.01%)</title><rect x="365.1" y="1781" width="0.1" height="15.0" fill="rgb(228,165,1)" rx="2" ry="2" />
<text  x="368.06" y="1791.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetRookAttacks (4 samples, 0.03%)</title><rect x="159.7" y="1797" width="0.3" height="15.0" fill="rgb(238,3,52)" rx="2" ry="2" />
<text  x="162.66" y="1807.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (2 samples, 0.01%)</title><rect x="34.5" y="1829" width="0.2" height="15.0" fill="rgb(211,226,25)" rx="2" ry="2" />
<text  x="37.55" y="1839.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (3 samples, 0.02%)</title><rect x="339.8" y="1813" width="0.2" height="15.0" fill="rgb(215,135,13)" rx="2" ry="2" />
<text  x="342.77" y="1823.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (94 samples, 0.59%)</title><rect x="105.9" y="1797" width="7.1" height="15.0" fill="rgb(232,49,3)" rx="2" ry="2" />
<text  x="108.95" y="1807.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (3 samples, 0.02%)</title><rect x="570.2" y="1813" width="0.2" height="15.0" fill="rgb(205,191,2)" rx="2" ry="2" />
<text  x="573.16" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsUnderAttack (2 samples, 0.01%)</title><rect x="520.9" y="1685" width="0.2" height="15.0" fill="rgb(226,111,10)" rx="2" ry="2" />
<text  x="523.92" y="1695.5" ></text>
</g>
<g >
<title>lczero::Position::Position (2 samples, 0.01%)</title><rect x="483.7" y="1733" width="0.1" height="15.0" fill="rgb(226,155,50)" rx="2" ry="2" />
<text  x="486.69" y="1743.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (4 samples, 0.03%)</title><rect x="225.5" y="1829" width="0.3" height="15.0" fill="rgb(246,82,22)" rx="2" ry="2" />
<text  x="228.54" y="1839.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_construct_node&lt;int&amp;, TSearchNode&gt; (4 samples, 0.03%)</title><rect x="278.0" y="1845" width="0.3" height="15.0" fill="rgb(241,70,6)" rx="2" ry="2" />
<text  x="280.99" y="1855.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::find_node_impl&lt;lczero::Position, TTranspositionTable::TPositionEqualFn&gt; (2 samples, 0.01%)</title><rect x="256.7" y="1781" width="0.1" height="15.0" fill="rgb(240,124,31)" rx="2" ry="2" />
<text  x="259.65" y="1791.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateKingAttackInfo (4 samples, 0.03%)</title><rect x="152.2" y="1829" width="0.3" height="15.0" fill="rgb(236,24,41)" rx="2" ry="2" />
<text  x="155.20" y="1839.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (3 samples, 0.02%)</title><rect x="653.5" y="1765" width="0.2" height="15.0" fill="rgb(244,110,42)" rx="2" ry="2" />
<text  x="656.49" y="1775.5" ></text>
</g>
<g >
<title>[unknown] (218 samples, 1.38%)</title><rect x="963.0" y="1445" width="16.2" height="15.0" fill="rgb(227,68,21)" rx="2" ry="2" />
<text  x="965.97" y="1455.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ApplyMove (32 samples, 0.20%)</title><rect x="195.0" y="1845" width="2.3" height="15.0" fill="rgb(224,146,44)" rx="2" ry="2" />
<text  x="197.95" y="1855.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (2 samples, 0.01%)</title><rect x="955.7" y="1813" width="0.1" height="15.0" fill="rgb(227,91,25)" rx="2" ry="2" />
<text  x="958.66" y="1823.5" ></text>
</g>
<g >
<title>CalcPSTScore (2 samples, 0.01%)</title><rect x="357.2" y="1749" width="0.1" height="15.0" fill="rgb(226,199,47)" rx="2" ry="2" />
<text  x="360.15" y="1759.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (9 samples, 0.06%)</title><rect x="220.1" y="1813" width="0.7" height="15.0" fill="rgb(221,123,46)" rx="2" ry="2" />
<text  x="223.10" y="1823.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetBishopAttacks (27 samples, 0.17%)</title><rect x="777.7" y="1797" width="2.0" height="15.0" fill="rgb(224,143,15)" rx="2" ry="2" />
<text  x="780.72" y="1807.5" ></text>
</g>
<g >
<title>__sanitizer::mem_is_zero (14 samples, 0.09%)</title><rect x="208.4" y="1813" width="1.0" height="15.0" fill="rgb(220,25,5)" rx="2" ry="2" />
<text  x="211.38" y="1823.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (13 samples, 0.08%)</title><rect x="1019.1" y="2005" width="0.9" height="15.0" fill="rgb(248,57,48)" rx="2" ry="2" />
<text  x="1022.07" y="2015.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_construct_node&lt;int&amp;, TSearchNode&gt; (12 samples, 0.08%)</title><rect x="229.0" y="1861" width="0.9" height="15.0" fill="rgb(218,12,47)" rx="2" ry="2" />
<text  x="232.05" y="1871.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (51 samples, 0.32%)</title><rect x="186.7" y="1797" width="3.8" height="15.0" fill="rgb(235,229,22)" rx="2" ry="2" />
<text  x="189.67" y="1807.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (8 samples, 0.05%)</title><rect x="517.2" y="1669" width="0.6" height="15.0" fill="rgb(246,73,28)" rx="2" ry="2" />
<text  x="520.19" y="1679.5" ></text>
</g>
<g >
<title>TTranspositionTable::Find (4 samples, 0.03%)</title><rect x="238.1" y="1861" width="0.3" height="15.0" fill="rgb(253,185,1)" rx="2" ry="2" />
<text  x="241.08" y="1871.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (79 samples, 0.50%)</title><rect x="16.0" y="2005" width="5.9" height="15.0" fill="rgb(209,121,7)" rx="2" ry="2" />
<text  x="18.97" y="2015.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (2 samples, 0.01%)</title><rect x="230.5" y="1877" width="0.1" height="15.0" fill="rgb(208,194,21)" rx="2" ry="2" />
<text  x="233.47" y="1887.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.01%)</title><rect x="914.2" y="1765" width="0.1" height="15.0" fill="rgb(227,80,41)" rx="2" ry="2" />
<text  x="917.17" y="1775.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (51 samples, 0.32%)</title><rect x="164.4" y="1781" width="3.8" height="15.0" fill="rgb(241,134,9)" rx="2" ry="2" />
<text  x="167.36" y="1791.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (533 samples, 3.37%)</title><rect x="821.3" y="1781" width="39.8" height="15.0" fill="rgb(243,39,26)" rx="2" ry="2" />
<text  x="824.29" y="1791.5" >__g..</text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (3 samples, 0.02%)</title><rect x="981.7" y="1797" width="0.2" height="15.0" fill="rgb(207,12,1)" rx="2" ry="2" />
<text  x="984.69" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (1,032 samples, 6.53%)</title><rect x="577.8" y="1797" width="77.0" height="15.0" fill="rgb(229,229,18)" rx="2" ry="2" />
<text  x="580.84" y="1807.5" >lczero::..</text>
</g>
<g >
<title>__sanitizer::Quarantine&lt;__asan::QuarantineCallback, __asan::AsanChunk&gt;::DoRecycle (2 samples, 0.01%)</title><rect x="978.0" y="1269" width="0.2" height="15.0" fill="rgb(238,213,19)" rx="2" ry="2" />
<text  x="981.04" y="1279.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::hash (21 samples, 0.13%)</title><rect x="708.3" y="1781" width="1.5" height="15.0" fill="rgb(246,154,5)" rx="2" ry="2" />
<text  x="711.26" y="1791.5" ></text>
</g>
<g >
<title>TSearchStrategy::CalcMoveOrder (11 samples, 0.07%)</title><rect x="102.5" y="1813" width="0.8" height="15.0" fill="rgb(228,199,54)" rx="2" ry="2" />
<text  x="105.51" y="1823.5" ></text>
</g>
<g >
<title>TSearchStrategy::CalcMoveOrder (3 samples, 0.02%)</title><rect x="291.6" y="1909" width="0.2" height="15.0" fill="rgb(250,155,26)" rx="2" ry="2" />
<text  x="294.57" y="1919.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::back (7 samples, 0.04%)</title><rect x="545.9" y="1733" width="0.5" height="15.0" fill="rgb(241,34,3)" rx="2" ry="2" />
<text  x="548.91" y="1743.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (2 samples, 0.01%)</title><rect x="292.0" y="1845" width="0.2" height="15.0" fill="rgb(250,131,41)" rx="2" ry="2" />
<text  x="295.02" y="1855.5" ></text>
</g>
<g >
<title>TSearchStrategy::CalcMoveOrder (7 samples, 0.04%)</title><rect x="256.4" y="1829" width="0.5" height="15.0" fill="rgb(239,229,5)" rx="2" ry="2" />
<text  x="259.36" y="1839.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (5 samples, 0.03%)</title><rect x="492.3" y="1733" width="0.4" height="15.0" fill="rgb(242,43,12)" rx="2" ry="2" />
<text  x="495.34" y="1743.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateKingAttackInfo (3 samples, 0.02%)</title><rect x="117.3" y="1797" width="0.2" height="15.0" fill="rgb(219,55,38)" rx="2" ry="2" />
<text  x="120.29" y="1807.5" ></text>
</g>
<g >
<title>CalcPSTScore (16 samples, 0.10%)</title><rect x="103.6" y="1797" width="1.2" height="15.0" fill="rgb(213,75,35)" rx="2" ry="2" />
<text  x="106.56" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateKingAttackInfo (9 samples, 0.06%)</title><rect x="128.9" y="1813" width="0.7" height="15.0" fill="rgb(211,142,43)" rx="2" ry="2" />
<text  x="131.93" y="1823.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (3 samples, 0.02%)</title><rect x="109.1" y="1717" width="0.2" height="15.0" fill="rgb(222,157,42)" rx="2" ry="2" />
<text  x="112.08" y="1727.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::rehash_impl (3 samples, 0.02%)</title><rect x="918.1" y="1797" width="0.2" height="15.0" fill="rgb(246,7,10)" rx="2" ry="2" />
<text  x="921.05" y="1807.5" ></text>
</g>
<g >
<title>CalcPSTScore (10 samples, 0.06%)</title><rect x="106.0" y="1781" width="0.8" height="15.0" fill="rgb(231,118,27)" rx="2" ry="2" />
<text  x="109.02" y="1791.5" ></text>
</g>
<g >
<title>lczero::Position::Position (3 samples, 0.02%)</title><rect x="507.3" y="1701" width="0.2" height="15.0" fill="rgb(212,33,43)" rx="2" ry="2" />
<text  x="510.26" y="1711.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (4 samples, 0.03%)</title><rect x="110.3" y="1733" width="0.3" height="15.0" fill="rgb(252,228,33)" rx="2" ry="2" />
<text  x="113.35" y="1743.5" ></text>
</g>
<g >
<title>lczero::Position::Position (2 samples, 0.01%)</title><rect x="502.6" y="1685" width="0.2" height="15.0" fill="rgb(205,97,22)" rx="2" ry="2" />
<text  x="505.64" y="1695.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetRookAttacks (3 samples, 0.02%)</title><rect x="121.5" y="1765" width="0.3" height="15.0" fill="rgb(225,77,53)" rx="2" ry="2" />
<text  x="124.54" y="1775.5" ></text>
</g>
<g >
<title>[unknown] (138 samples, 0.87%)</title><rect x="963.0" y="581" width="10.3" height="15.0" fill="rgb(244,126,53)" rx="2" ry="2" />
<text  x="965.97" y="591.5" ></text>
</g>
<g >
<title>__pthread_getspecific (28 samples, 0.18%)</title><rect x="1140.5" y="2053" width="2.1" height="15.0" fill="rgb(236,147,38)" rx="2" ry="2" />
<text  x="1143.53" y="2063.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (6 samples, 0.04%)</title><rect x="293.0" y="1893" width="0.4" height="15.0" fill="rgb(240,167,53)" rx="2" ry="2" />
<text  x="295.99" y="1903.5" ></text>
</g>
<g >
<title>GetPieceType (2 samples, 0.01%)</title><rect x="245.9" y="1829" width="0.2" height="15.0" fill="rgb(227,181,25)" rx="2" ry="2" />
<text  x="248.91" y="1839.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (436 samples, 2.76%)</title><rect x="95.9" y="1829" width="32.5" height="15.0" fill="rgb(229,21,41)" rx="2" ry="2" />
<text  x="98.87" y="1839.5" >TS..</text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare&gt; (20 samples, 0.13%)</title><rect x="810.8" y="1797" width="1.5" height="15.0" fill="rgb(212,19,34)" rx="2" ry="2" />
<text  x="813.84" y="1807.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_create_node&lt;int&amp;, TSearchNode&gt; (5 samples, 0.03%)</title><rect x="288.7" y="1877" width="0.4" height="15.0" fill="rgb(243,138,39)" rx="2" ry="2" />
<text  x="291.74" y="1887.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (239 samples, 1.51%)</title><rect x="173.2" y="1861" width="17.8" height="15.0" fill="rgb(242,225,21)" rx="2" ry="2" />
<text  x="176.17" y="1871.5" ></text>
</g>
<g >
<title>TSearchStrategy::Search (8,932 samples, 56.47%)</title><rect x="291.6" y="1941" width="666.4" height="15.0" fill="rgb(221,133,31)" rx="2" ry="2" />
<text  x="294.57" y="1951.5" >TSearchStrategy::Search</text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::reserve (3 samples, 0.02%)</title><rect x="162.4" y="1813" width="0.2" height="15.0" fill="rgb(244,63,1)" rx="2" ry="2" />
<text  x="165.42" y="1823.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare&gt; (2 samples, 0.01%)</title><rect x="71.5" y="1813" width="0.1" height="15.0" fill="rgb(223,68,25)" rx="2" ry="2" />
<text  x="74.48" y="1823.5" ></text>
</g>
<g >
<title>__asan::asan_memalign (2 samples, 0.01%)</title><rect x="813.5" y="1781" width="0.1" height="15.0" fill="rgb(242,213,29)" rx="2" ry="2" />
<text  x="816.45" y="1791.5" ></text>
</g>
<g >
<title>__asan_set_shadow_00 (2 samples, 0.01%)</title><rect x="467.8" y="1797" width="0.1" height="15.0" fill="rgb(249,37,11)" rx="2" ry="2" />
<text  x="470.79" y="1807.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (3 samples, 0.02%)</title><rect x="514.5" y="1621" width="0.2" height="15.0" fill="rgb(216,138,32)" rx="2" ry="2" />
<text  x="517.50" y="1631.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsUnderAttack (3 samples, 0.02%)</title><rect x="535.1" y="1733" width="0.2" height="15.0" fill="rgb(212,51,19)" rx="2" ry="2" />
<text  x="538.09" y="1743.5" ></text>
</g>
<g >
<title>TSearchStrategy::CalcMoveOrder (7 samples, 0.04%)</title><rect x="354.5" y="1829" width="0.5" height="15.0" fill="rgb(221,62,43)" rx="2" ry="2" />
<text  x="357.47" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::Mirror (4 samples, 0.03%)</title><rect x="277.6" y="1845" width="0.3" height="15.0" fill="rgb(254,127,30)" rx="2" ry="2" />
<text  x="280.62" y="1855.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (4 samples, 0.03%)</title><rect x="359.1" y="1765" width="0.3" height="15.0" fill="rgb(239,169,13)" rx="2" ry="2" />
<text  x="362.09" y="1775.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (5 samples, 0.03%)</title><rect x="237.0" y="1813" width="0.3" height="15.0" fill="rgb(236,212,1)" rx="2" ry="2" />
<text  x="239.96" y="1823.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (3 samples, 0.02%)</title><rect x="513.5" y="1637" width="0.2" height="15.0" fill="rgb(227,43,14)" rx="2" ry="2" />
<text  x="516.45" y="1647.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsUnderAttack (61 samples, 0.39%)</title><rect x="782.8" y="1797" width="4.5" height="15.0" fill="rgb(208,165,50)" rx="2" ry="2" />
<text  x="785.79" y="1807.5" ></text>
</g>
<g >
<title>__pthread_getspecific (4 samples, 0.03%)</title><rect x="653.2" y="1765" width="0.3" height="15.0" fill="rgb(233,18,26)" rx="2" ry="2" />
<text  x="656.20" y="1775.5" ></text>
</g>
<g >
<title>lczero::BitBoard::get (2 samples, 0.01%)</title><rect x="512.7" y="1669" width="0.2" height="15.0" fill="rgb(219,65,47)" rx="2" ry="2" />
<text  x="515.71" y="1679.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (19 samples, 0.12%)</title><rect x="517.9" y="1701" width="1.4" height="15.0" fill="rgb(243,72,4)" rx="2" ry="2" />
<text  x="520.86" y="1711.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_get_insert_equal_pos (2 samples, 0.01%)</title><rect x="527.4" y="1717" width="0.2" height="15.0" fill="rgb(215,23,31)" rx="2" ry="2" />
<text  x="530.41" y="1727.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::Hash (6 samples, 0.04%)</title><rect x="244.0" y="1765" width="0.4" height="15.0" fill="rgb(237,79,26)" rx="2" ry="2" />
<text  x="246.97" y="1775.5" ></text>
</g>
<g >
<title>__asan::Allocator::Deallocate (2 samples, 0.01%)</title><rect x="949.8" y="1797" width="0.1" height="15.0" fill="rgb(206,12,17)" rx="2" ry="2" />
<text  x="952.76" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (2 samples, 0.01%)</title><rect x="239.0" y="1829" width="0.1" height="15.0" fill="rgb(224,163,1)" rx="2" ry="2" />
<text  x="241.97" y="1839.5" ></text>
</g>
<g >
<title>lczero::Position::Position (12 samples, 0.08%)</title><rect x="340.0" y="1813" width="0.9" height="15.0" fill="rgb(219,31,3)" rx="2" ry="2" />
<text  x="342.99" y="1823.5" ></text>
</g>
<g >
<title>IsCapture (2 samples, 0.01%)</title><rect x="102.3" y="1813" width="0.1" height="15.0" fill="rgb(240,213,17)" rx="2" ry="2" />
<text  x="105.29" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (2 samples, 0.01%)</title><rect x="320.3" y="1797" width="0.1" height="15.0" fill="rgb(249,44,24)" rx="2" ry="2" />
<text  x="323.29" y="1807.5" ></text>
</g>
<g >
<title>__asan_memset (2 samples, 0.01%)</title><rect x="735.1" y="1797" width="0.2" height="15.0" fill="rgb(218,2,50)" rx="2" ry="2" />
<text  x="738.12" y="1807.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (17 samples, 0.11%)</title><rect x="217.0" y="1829" width="1.3" height="15.0" fill="rgb(230,97,9)" rx="2" ry="2" />
<text  x="220.04" y="1839.5" ></text>
</g>
<g >
<title>[unknown] (265 samples, 1.68%)</title><rect x="963.0" y="1925" width="19.7" height="15.0" fill="rgb(237,177,53)" rx="2" ry="2" />
<text  x="965.97" y="1935.5" ></text>
</g>
<g >
<title>boost::unordered::unordered_map&lt;lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt; &gt;::find (6 samples, 0.04%)</title><rect x="500.8" y="1733" width="0.4" height="15.0" fill="rgb(234,127,36)" rx="2" ry="2" />
<text  x="503.77" y="1743.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.01%)</title><rect x="972.9" y="549" width="0.1" height="15.0" fill="rgb(241,185,53)" rx="2" ry="2" />
<text  x="975.89" y="559.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (615 samples, 3.89%)</title><rect x="654.9" y="1797" width="45.9" height="15.0" fill="rgb(225,199,10)" rx="2" ry="2" />
<text  x="657.91" y="1807.5" >std:..</text>
</g>
<g >
<title>TTranspositionTable::TPositionEqualFn::operator (2 samples, 0.01%)</title><rect x="244.6" y="1797" width="0.1" height="15.0" fill="rgb(248,66,40)" rx="2" ry="2" />
<text  x="247.57" y="1807.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetRookAttacks (3 samples, 0.02%)</title><rect x="465.1" y="1749" width="0.2" height="15.0" fill="rgb(211,25,44)" rx="2" ry="2" />
<text  x="468.11" y="1759.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (2 samples, 0.01%)</title><rect x="202.6" y="1829" width="0.1" height="15.0" fill="rgb(254,36,2)" rx="2" ry="2" />
<text  x="205.56" y="1839.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (42 samples, 0.27%)</title><rect x="488.8" y="1781" width="3.2" height="15.0" fill="rgb(224,99,12)" rx="2" ry="2" />
<text  x="491.83" y="1791.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (40 samples, 0.25%)</title><rect x="124.6" y="1781" width="3.0" height="15.0" fill="rgb(218,33,8)" rx="2" ry="2" />
<text  x="127.60" y="1791.5" ></text>
</g>
<g >
<title>CalcPSTScore (7 samples, 0.04%)</title><rect x="63.4" y="1829" width="0.5" height="15.0" fill="rgb(208,145,17)" rx="2" ry="2" />
<text  x="66.42" y="1839.5" ></text>
</g>
<g >
<title>TSearchStrategy::CalcMoveOrder (257 samples, 1.62%)</title><rect x="331.9" y="1845" width="19.2" height="15.0" fill="rgb(237,161,7)" rx="2" ry="2" />
<text  x="334.93" y="1855.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_get_insert_equal_pos (3 samples, 0.02%)</title><rect x="550.4" y="1765" width="0.2" height="15.0" fill="rgb(209,9,41)" rx="2" ry="2" />
<text  x="553.39" y="1775.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetBishopAttacks (2 samples, 0.01%)</title><rect x="364.9" y="1781" width="0.2" height="15.0" fill="rgb(208,123,44)" rx="2" ry="2" />
<text  x="367.91" y="1791.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (2 samples, 0.01%)</title><rect x="512.9" y="1669" width="0.2" height="15.0" fill="rgb(237,198,15)" rx="2" ry="2" />
<text  x="515.93" y="1679.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (37 samples, 0.23%)</title><rect x="181.0" y="1829" width="2.8" height="15.0" fill="rgb(251,104,31)" rx="2" ry="2" />
<text  x="184.00" y="1839.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (16 samples, 0.10%)</title><rect x="862.0" y="1813" width="1.2" height="15.0" fill="rgb(229,2,1)" rx="2" ry="2" />
<text  x="865.02" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (6 samples, 0.04%)</title><rect x="47.3" y="1781" width="0.5" height="15.0" fill="rgb(221,19,3)" rx="2" ry="2" />
<text  x="50.30" y="1791.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (45 samples, 0.28%)</title><rect x="879.6" y="1781" width="3.4" height="15.0" fill="rgb(219,133,3)" rx="2" ry="2" />
<text  x="882.63" y="1791.5" ></text>
</g>
<g >
<title>[unknown] (212 samples, 1.34%)</title><rect x="963.0" y="1381" width="15.8" height="15.0" fill="rgb(248,163,22)" rx="2" ry="2" />
<text  x="965.97" y="1391.5" ></text>
</g>
<g >
<title>__asan_memcpy (2 samples, 0.01%)</title><rect x="146.8" y="1813" width="0.2" height="15.0" fill="rgb(222,52,40)" rx="2" ry="2" />
<text  x="149.83" y="1823.5" ></text>
</g>
<g >
<title>__asan_memcpy (2 samples, 0.01%)</title><rect x="491.5" y="1749" width="0.2" height="15.0" fill="rgb(244,119,51)" rx="2" ry="2" />
<text  x="494.52" y="1759.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (33 samples, 0.21%)</title><rect x="948.7" y="1829" width="2.5" height="15.0" fill="rgb(237,73,22)" rx="2" ry="2" />
<text  x="951.72" y="1839.5" ></text>
</g>
<g >
<title>lczero::Position::Position (2 samples, 0.01%)</title><rect x="94.8" y="1781" width="0.2" height="15.0" fill="rgb(230,148,35)" rx="2" ry="2" />
<text  x="97.83" y="1791.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_create_node&lt;int&amp;, TSearchNode&gt; (3 samples, 0.02%)</title><rect x="291.2" y="1909" width="0.2" height="15.0" fill="rgb(212,142,22)" rx="2" ry="2" />
<text  x="294.20" y="1919.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ApplyMove (11 samples, 0.07%)</title><rect x="221.5" y="1861" width="0.8" height="15.0" fill="rgb(253,177,2)" rx="2" ry="2" />
<text  x="224.51" y="1871.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::knights (2 samples, 0.01%)</title><rect x="309.3" y="1829" width="0.2" height="15.0" fill="rgb(210,214,36)" rx="2" ry="2" />
<text  x="312.33" y="1839.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (27 samples, 0.17%)</title><rect x="655.5" y="1781" width="2.0" height="15.0" fill="rgb(248,13,12)" rx="2" ry="2" />
<text  x="658.51" y="1791.5" ></text>
</g>
<g >
<title>operator new (9 samples, 0.06%)</title><rect x="937.7" y="1829" width="0.6" height="15.0" fill="rgb(248,205,51)" rx="2" ry="2" />
<text  x="940.68" y="1839.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (37 samples, 0.23%)</title><rect x="124.8" y="1765" width="2.8" height="15.0" fill="rgb(226,121,52)" rx="2" ry="2" />
<text  x="127.82" y="1775.5" ></text>
</g>
<g >
<title>TSearchStrategy::Search (8,804 samples, 55.67%)</title><rect x="295.8" y="1877" width="656.9" height="15.0" fill="rgb(219,126,2)" rx="2" ry="2" />
<text  x="298.82" y="1887.5" >TSearchStrategy::Search</text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (64 samples, 0.40%)</title><rect x="963.0" y="37" width="4.7" height="15.0" fill="rgb(241,95,45)" rx="2" ry="2" />
<text  x="965.97" y="47.5" ></text>
</g>
<g >
<title>__sanitizer::mem_is_zero (2 samples, 0.01%)</title><rect x="279.3" y="1813" width="0.2" height="15.0" fill="rgb(247,145,43)" rx="2" ry="2" />
<text  x="282.33" y="1823.5" ></text>
</g>
<g >
<title>TSearchStrategy::CalcMoveOrder (24 samples, 0.15%)</title><rect x="492.2" y="1781" width="1.8" height="15.0" fill="rgb(229,74,47)" rx="2" ry="2" />
<text  x="495.19" y="1791.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (9 samples, 0.06%)</title><rect x="263.6" y="1765" width="0.7" height="15.0" fill="rgb(247,53,52)" rx="2" ry="2" />
<text  x="266.59" y="1775.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (23 samples, 0.15%)</title><rect x="113.0" y="1781" width="1.7" height="15.0" fill="rgb(231,35,44)" rx="2" ry="2" />
<text  x="116.03" y="1791.5" ></text>
</g>
<g >
<title>[unknown] (255 samples, 1.61%)</title><rect x="963.0" y="1829" width="19.0" height="15.0" fill="rgb(206,174,21)" rx="2" ry="2" />
<text  x="965.97" y="1839.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare&gt; (16 samples, 0.10%)</title><rect x="651.3" y="1781" width="1.1" height="15.0" fill="rgb(217,52,50)" rx="2" ry="2" />
<text  x="654.26" y="1791.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.01%)</title><rect x="981.2" y="1733" width="0.1" height="15.0" fill="rgb(251,227,40)" rx="2" ry="2" />
<text  x="984.17" y="1743.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (8 samples, 0.05%)</title><rect x="252.2" y="1781" width="0.6" height="15.0" fill="rgb(232,87,30)" rx="2" ry="2" />
<text  x="255.18" y="1791.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (11 samples, 0.07%)</title><rect x="517.9" y="1685" width="0.8" height="15.0" fill="rgb(210,198,3)" rx="2" ry="2" />
<text  x="520.86" y="1695.5" ></text>
</g>
<g >
<title>[unknown] (164 samples, 1.04%)</title><rect x="963.0" y="933" width="12.2" height="15.0" fill="rgb(213,30,50)" rx="2" ry="2" />
<text  x="965.97" y="943.5" ></text>
</g>
<g >
<title>lczero::Position::Position (2 samples, 0.01%)</title><rect x="498.4" y="1733" width="0.1" height="15.0" fill="rgb(251,41,29)" rx="2" ry="2" />
<text  x="501.38" y="1743.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (36 samples, 0.23%)</title><rect x="137.3" y="1797" width="2.7" height="15.0" fill="rgb(234,69,23)" rx="2" ry="2" />
<text  x="140.28" y="1807.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (5 samples, 0.03%)</title><rect x="983.5" y="2005" width="0.4" height="15.0" fill="rgb(218,211,27)" rx="2" ry="2" />
<text  x="986.49" y="2015.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::back (8 samples, 0.05%)</title><rect x="811.7" y="1781" width="0.6" height="15.0" fill="rgb(234,18,54)" rx="2" ry="2" />
<text  x="814.74" y="1791.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (304 samples, 1.92%)</title><rect x="1114.7" y="2053" width="22.7" height="15.0" fill="rgb(219,127,20)" rx="2" ry="2" />
<text  x="1117.72" y="2063.5" >_..</text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetRookAttacks (7 samples, 0.04%)</title><rect x="158.3" y="1813" width="0.5" height="15.0" fill="rgb(206,164,40)" rx="2" ry="2" />
<text  x="161.32" y="1823.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (3 samples, 0.02%)</title><rect x="953.3" y="1829" width="0.3" height="15.0" fill="rgb(213,132,28)" rx="2" ry="2" />
<text  x="956.34" y="1839.5" ></text>
</g>
<g >
<title>std::array&lt;int, 2ul&gt;::operator[] (5 samples, 0.03%)</title><rect x="488.3" y="1765" width="0.4" height="15.0" fill="rgb(233,107,11)" rx="2" ry="2" />
<text  x="491.31" y="1775.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ApplyMove (2 samples, 0.01%)</title><rect x="147.0" y="1813" width="0.1" height="15.0" fill="rgb(240,163,31)" rx="2" ry="2" />
<text  x="149.98" y="1823.5" ></text>
</g>
<g >
<title>TSearchStrategy::CalcMoveOrder (221 samples, 1.40%)</title><rect x="301.3" y="1861" width="16.5" height="15.0" fill="rgb(219,83,9)" rx="2" ry="2" />
<text  x="304.27" y="1871.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (4 samples, 0.03%)</title><rect x="815.2" y="1813" width="0.3" height="15.0" fill="rgb(233,13,40)" rx="2" ry="2" />
<text  x="818.17" y="1823.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_get_insert_equal_pos (26 samples, 0.16%)</title><rect x="909.6" y="1845" width="2.0" height="15.0" fill="rgb(246,118,51)" rx="2" ry="2" />
<text  x="912.62" y="1855.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_create_node&lt;int&amp;, TSearchNode&gt; (107 samples, 0.68%)</title><rect x="894.7" y="1829" width="8.0" height="15.0" fill="rgb(237,157,6)" rx="2" ry="2" />
<text  x="897.70" y="1839.5" ></text>
</g>
<g >
<title>[unknown] (118 samples, 0.75%)</title><rect x="963.0" y="389" width="8.8" height="15.0" fill="rgb(211,163,7)" rx="2" ry="2" />
<text  x="965.97" y="399.5" ></text>
</g>
<g >
<title>CalcPSTScore (62 samples, 0.39%)</title><rect x="327.2" y="1845" width="4.6" height="15.0" fill="rgb(222,30,9)" rx="2" ry="2" />
<text  x="330.16" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateKingAttackInfo (6 samples, 0.04%)</title><rect x="66.6" y="1829" width="0.4" height="15.0" fill="rgb(251,123,37)" rx="2" ry="2" />
<text  x="69.55" y="1839.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (4 samples, 0.03%)</title><rect x="104.8" y="1781" width="0.3" height="15.0" fill="rgb(218,117,45)" rx="2" ry="2" />
<text  x="107.75" y="1791.5" ></text>
</g>
<g >
<title>__asan::GetCurrentThreadStats (11 samples, 0.07%)</title><rect x="1108.7" y="2053" width="0.8" height="15.0" fill="rgb(205,15,38)" rx="2" ry="2" />
<text  x="1111.68" y="2063.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (10 samples, 0.06%)</title><rect x="225.1" y="1845" width="0.7" height="15.0" fill="rgb(219,54,39)" rx="2" ry="2" />
<text  x="228.09" y="1855.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (8 samples, 0.05%)</title><rect x="88.0" y="1781" width="0.6" height="15.0" fill="rgb(239,194,31)" rx="2" ry="2" />
<text  x="90.97" y="1791.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (896 samples, 5.67%)</title><rect x="81.5" y="1845" width="66.9" height="15.0" fill="rgb(232,52,11)" rx="2" ry="2" />
<text  x="84.55" y="1855.5" >TSearch..</text>
</g>
<g >
<title>[unknown] (135 samples, 0.85%)</title><rect x="963.0" y="565" width="10.0" height="15.0" fill="rgb(245,163,19)" rx="2" ry="2" />
<text  x="965.97" y="575.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::knights (2 samples, 0.01%)</title><rect x="476.4" y="1765" width="0.2" height="15.0" fill="rgb(208,193,50)" rx="2" ry="2" />
<text  x="479.45" y="1775.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (3 samples, 0.02%)</title><rect x="63.1" y="1845" width="0.2" height="15.0" fill="rgb(215,36,38)" rx="2" ry="2" />
<text  x="66.12" y="1855.5" ></text>
</g>
<g >
<title>lczero::BitBoard::get (4 samples, 0.03%)</title><rect x="355.6" y="1797" width="0.3" height="15.0" fill="rgb(233,67,37)" rx="2" ry="2" />
<text  x="358.58" y="1807.5" ></text>
</g>
<g >
<title>__asan::Allocator::Deallocate (135 samples, 0.85%)</title><rect x="1095.8" y="2053" width="10.1" height="15.0" fill="rgb(207,226,17)" rx="2" ry="2" />
<text  x="1098.84" y="2063.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (10 samples, 0.06%)</title><rect x="94.2" y="1797" width="0.8" height="15.0" fill="rgb(236,14,36)" rx="2" ry="2" />
<text  x="97.23" y="1807.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (13 samples, 0.08%)</title><rect x="366.3" y="1797" width="1.0" height="15.0" fill="rgb(241,9,8)" rx="2" ry="2" />
<text  x="369.33" y="1807.5" ></text>
</g>
<g >
<title>CalcPSTScore (14 samples, 0.09%)</title><rect x="508.0" y="1717" width="1.1" height="15.0" fill="rgb(237,60,27)" rx="2" ry="2" />
<text  x="511.01" y="1727.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetRookAttacks (2 samples, 0.01%)</title><rect x="529.0" y="1717" width="0.2" height="15.0" fill="rgb(215,111,3)" rx="2" ry="2" />
<text  x="532.05" y="1727.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_construct_node&lt;int&amp;, TSearchNode&gt; (50 samples, 0.32%)</title><rect x="938.3" y="1829" width="3.8" height="15.0" fill="rgb(215,37,0)" rx="2" ry="2" />
<text  x="941.35" y="1839.5" ></text>
</g>
<g >
<title>lczero::BitBoard::get (127 samples, 0.80%)</title><rect x="445.8" y="1797" width="9.5" height="15.0" fill="rgb(228,148,44)" rx="2" ry="2" />
<text  x="448.79" y="1807.5" ></text>
</g>
<g >
<title>TTranspositionTable::TPositionEqualFn::operator (2 samples, 0.01%)</title><rect x="28.7" y="1829" width="0.1" height="15.0" fill="rgb(254,53,52)" rx="2" ry="2" />
<text  x="31.65" y="1839.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_construct_node&lt;int&amp;, TSearchNode&gt; (2 samples, 0.01%)</title><rect x="222.6" y="1861" width="0.2" height="15.0" fill="rgb(222,100,17)" rx="2" ry="2" />
<text  x="225.63" y="1871.5" ></text>
</g>
<g >
<title>__asan::GetCurrentThread (3 samples, 0.02%)</title><rect x="991.5" y="2037" width="0.3" height="15.0" fill="rgb(228,182,8)" rx="2" ry="2" />
<text  x="994.54" y="2047.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::bishops (2 samples, 0.01%)</title><rect x="490.2" y="1733" width="0.1" height="15.0" fill="rgb(251,160,46)" rx="2" ry="2" />
<text  x="493.18" y="1743.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (11 samples, 0.07%)</title><rect x="219.1" y="1861" width="0.8" height="15.0" fill="rgb(228,18,5)" rx="2" ry="2" />
<text  x="222.05" y="1871.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.01%)</title><rect x="74.7" y="1845" width="0.1" height="15.0" fill="rgb(229,57,22)" rx="2" ry="2" />
<text  x="77.69" y="1855.5" ></text>
</g>
<g >
<title>boost::unordered::unordered_map&lt;lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt; &gt;::find (2 samples, 0.01%)</title><rect x="105.8" y="1765" width="0.1" height="15.0" fill="rgb(215,121,35)" rx="2" ry="2" />
<text  x="108.80" y="1775.5" ></text>
</g>
<g >
<title>IsCapture (7 samples, 0.04%)</title><rect x="309.5" y="1845" width="0.5" height="15.0" fill="rgb(230,180,17)" rx="2" ry="2" />
<text  x="312.48" y="1855.5" ></text>
</g>
<g >
<title>lczero::Position::Position (4 samples, 0.03%)</title><rect x="31.5" y="1845" width="0.3" height="15.0" fill="rgb(236,36,49)" rx="2" ry="2" />
<text  x="34.49" y="1855.5" ></text>
</g>
<g >
<title>CalcPSTScore (5 samples, 0.03%)</title><rect x="107.9" y="1749" width="0.4" height="15.0" fill="rgb(213,179,26)" rx="2" ry="2" />
<text  x="110.89" y="1759.5" ></text>
</g>
<g >
<title>lczero::Position::Hash (6 samples, 0.04%)</title><rect x="171.7" y="1765" width="0.4" height="15.0" fill="rgb(249,216,7)" rx="2" ry="2" />
<text  x="174.68" y="1775.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (3 samples, 0.02%)</title><rect x="129.3" y="1797" width="0.2" height="15.0" fill="rgb(220,14,18)" rx="2" ry="2" />
<text  x="132.30" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (24 samples, 0.15%)</title><rect x="538.0" y="1701" width="1.8" height="15.0" fill="rgb(243,13,29)" rx="2" ry="2" />
<text  x="541.00" y="1711.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (2 samples, 0.01%)</title><rect x="478.9" y="1733" width="0.2" height="15.0" fill="rgb(235,19,28)" rx="2" ry="2" />
<text  x="481.91" y="1743.5" ></text>
</g>
<g >
<title>TSearchStrategy::Search (779 samples, 4.93%)</title><rect x="233.4" y="1941" width="58.1" height="15.0" fill="rgb(227,67,51)" rx="2" ry="2" />
<text  x="236.38" y="1951.5" >TSearc..</text>
</g>
<g >
<title>std::array&lt;int, 64ul&gt;::operator[] (3 samples, 0.02%)</title><rect x="246.5" y="1829" width="0.2" height="15.0" fill="rgb(205,184,26)" rx="2" ry="2" />
<text  x="249.51" y="1839.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (6 samples, 0.04%)</title><rect x="514.4" y="1637" width="0.5" height="15.0" fill="rgb(250,52,42)" rx="2" ry="2" />
<text  x="517.42" y="1647.5" ></text>
</g>
<g >
<title>lczero::Position::Position (2 samples, 0.01%)</title><rect x="503.8" y="1733" width="0.2" height="15.0" fill="rgb(215,187,41)" rx="2" ry="2" />
<text  x="506.83" y="1743.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (4 samples, 0.03%)</title><rect x="102.5" y="1781" width="0.3" height="15.0" fill="rgb(221,107,20)" rx="2" ry="2" />
<text  x="105.51" y="1791.5" ></text>
</g>
<g >
<title>GetFenBestMove (8,940 samples, 56.53%)</title><rect x="291.6" y="1989" width="667.0" height="15.0" fill="rgb(218,153,13)" rx="2" ry="2" />
<text  x="294.57" y="1999.5" >GetFenBestMove</text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (10 samples, 0.06%)</title><rect x="226.4" y="1877" width="0.8" height="15.0" fill="rgb(207,45,36)" rx="2" ry="2" />
<text  x="229.44" y="1887.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.01%)</title><rect x="971.0" y="261" width="0.2" height="15.0" fill="rgb(208,120,27)" rx="2" ry="2" />
<text  x="974.03" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (26 samples, 0.16%)</title><rect x="544.5" y="1749" width="1.9" height="15.0" fill="rgb(241,51,19)" rx="2" ry="2" />
<text  x="547.49" y="1759.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (2 samples, 0.01%)</title><rect x="64.5" y="1797" width="0.1" height="15.0" fill="rgb(220,195,47)" rx="2" ry="2" />
<text  x="67.46" y="1807.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (13 samples, 0.08%)</title><rect x="263.3" y="1781" width="1.0" height="15.0" fill="rgb(209,48,7)" rx="2" ry="2" />
<text  x="266.29" y="1791.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (7 samples, 0.04%)</title><rect x="287.1" y="1861" width="0.5" height="15.0" fill="rgb(254,3,34)" rx="2" ry="2" />
<text  x="290.09" y="1871.5" ></text>
</g>
<g >
<title>lczero::Position::Position (2 samples, 0.01%)</title><rect x="512.3" y="1669" width="0.1" height="15.0" fill="rgb(248,49,39)" rx="2" ry="2" />
<text  x="515.26" y="1679.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (3 samples, 0.02%)</title><rect x="49.5" y="1797" width="0.3" height="15.0" fill="rgb(245,10,24)" rx="2" ry="2" />
<text  x="52.54" y="1807.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (63 samples, 0.40%)</title><rect x="304.1" y="1845" width="4.7" height="15.0" fill="rgb(209,2,43)" rx="2" ry="2" />
<text  x="307.10" y="1855.5" ></text>
</g>
<g >
<title>[unknown] (151 samples, 0.95%)</title><rect x="963.0" y="805" width="11.2" height="15.0" fill="rgb(245,160,30)" rx="2" ry="2" />
<text  x="965.97" y="815.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (3 samples, 0.02%)</title><rect x="63.1" y="1829" width="0.2" height="15.0" fill="rgb(235,154,46)" rx="2" ry="2" />
<text  x="66.12" y="1839.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::back (5 samples, 0.03%)</title><rect x="250.5" y="1797" width="0.4" height="15.0" fill="rgb(254,220,2)" rx="2" ry="2" />
<text  x="253.54" y="1807.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (27 samples, 0.17%)</title><rect x="335.6" y="1797" width="2.0" height="15.0" fill="rgb(238,206,30)" rx="2" ry="2" />
<text  x="338.59" y="1807.5" ></text>
</g>
<g >
<title>[unknown] (272 samples, 1.72%)</title><rect x="963.0" y="1989" width="20.3" height="15.0" fill="rgb(244,146,45)" rx="2" ry="2" />
<text  x="965.97" y="1999.5" ></text>
</g>
<g >
<title>std::array&lt;int, 2ul&gt;::operator[] (2 samples, 0.01%)</title><rect x="352.7" y="1813" width="0.1" height="15.0" fill="rgb(249,128,25)" rx="2" ry="2" />
<text  x="355.67" y="1823.5" ></text>
</g>
<g >
<title>lczero::Position::Position (2 samples, 0.01%)</title><rect x="74.5" y="1845" width="0.2" height="15.0" fill="rgb(225,35,50)" rx="2" ry="2" />
<text  x="77.54" y="1855.5" ></text>
</g>
<g >
<title>[unknown] (155 samples, 0.98%)</title><rect x="963.0" y="853" width="11.5" height="15.0" fill="rgb(210,158,19)" rx="2" ry="2" />
<text  x="965.97" y="863.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (144 samples, 0.91%)</title><rect x="117.1" y="1813" width="10.8" height="15.0" fill="rgb(225,62,24)" rx="2" ry="2" />
<text  x="120.14" y="1823.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetRookAttacks (8 samples, 0.05%)</title><rect x="556.7" y="1765" width="0.6" height="15.0" fill="rgb(220,74,22)" rx="2" ry="2" />
<text  x="559.73" y="1775.5" ></text>
</g>
<g >
<title>lczero::Position::Position (3 samples, 0.02%)</title><rect x="89.2" y="1781" width="0.2" height="15.0" fill="rgb(250,136,26)" rx="2" ry="2" />
<text  x="92.16" y="1791.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::back (2 samples, 0.01%)</title><rect x="184.1" y="1813" width="0.1" height="15.0" fill="rgb(216,144,32)" rx="2" ry="2" />
<text  x="187.06" y="1823.5" ></text>
</g>
<g >
<title>std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;::pair&lt;lczero::Position const&amp;, 0ul, TTranspositionTable::TNode&amp;&amp;, 0ul&gt; (2 samples, 0.01%)</title><rect x="269.9" y="1797" width="0.1" height="15.0" fill="rgb(216,143,39)" rx="2" ry="2" />
<text  x="272.86" y="1807.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (6 samples, 0.04%)</title><rect x="47.3" y="1797" width="0.5" height="15.0" fill="rgb(230,106,27)" rx="2" ry="2" />
<text  x="50.30" y="1807.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (5 samples, 0.03%)</title><rect x="294.1" y="1845" width="0.4" height="15.0" fill="rgb(252,118,46)" rx="2" ry="2" />
<text  x="297.11" y="1855.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (6 samples, 0.04%)</title><rect x="504.2" y="1717" width="0.5" height="15.0" fill="rgb(240,82,27)" rx="2" ry="2" />
<text  x="507.20" y="1727.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_get_insert_equal_pos (2 samples, 0.01%)</title><rect x="705.9" y="1797" width="0.1" height="15.0" fill="rgb(221,222,51)" rx="2" ry="2" />
<text  x="708.87" y="1807.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (3 samples, 0.02%)</title><rect x="307.0" y="1797" width="0.2" height="15.0" fill="rgb(235,196,19)" rx="2" ry="2" />
<text  x="310.01" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::Hash (3 samples, 0.02%)</title><rect x="235.5" y="1797" width="0.2" height="15.0" fill="rgb(245,165,1)" rx="2" ry="2" />
<text  x="238.47" y="1807.5" ></text>
</g>
<g >
<title>[unknown] (281 samples, 1.78%)</title><rect x="963.0" y="2021" width="20.9" height="15.0" fill="rgb(225,130,39)" rx="2" ry="2" />
<text  x="965.97" y="2031.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetRookAttacks (4 samples, 0.03%)</title><rect x="136.8" y="1781" width="0.3" height="15.0" fill="rgb(236,108,11)" rx="2" ry="2" />
<text  x="139.83" y="1791.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::Mirror (12 samples, 0.08%)</title><rect x="892.5" y="1829" width="0.9" height="15.0" fill="rgb(248,22,7)" rx="2" ry="2" />
<text  x="895.54" y="1839.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (18 samples, 0.11%)</title><rect x="94.0" y="1813" width="1.4" height="15.0" fill="rgb(210,145,34)" rx="2" ry="2" />
<text  x="97.01" y="1823.5" ></text>
</g>
<g >
<title>__asan_memcpy (2 samples, 0.01%)</title><rect x="705.3" y="1765" width="0.1" height="15.0" fill="rgb(205,213,30)" rx="2" ry="2" />
<text  x="708.27" y="1775.5" ></text>
</g>
<g >
<title>CalcPSTScore (4 samples, 0.03%)</title><rect x="512.6" y="1685" width="0.3" height="15.0" fill="rgb(238,67,50)" rx="2" ry="2" />
<text  x="515.56" y="1695.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (39 samples, 0.25%)</title><rect x="478.3" y="1781" width="2.9" height="15.0" fill="rgb(238,29,42)" rx="2" ry="2" />
<text  x="481.31" y="1791.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (29 samples, 0.18%)</title><rect x="470.6" y="1797" width="2.1" height="15.0" fill="rgb(250,207,20)" rx="2" ry="2" />
<text  x="473.56" y="1807.5" ></text>
</g>
<g >
<title>lczero::Position::Hash (3 samples, 0.02%)</title><rect x="95.4" y="1749" width="0.2" height="15.0" fill="rgb(211,18,44)" rx="2" ry="2" />
<text  x="98.43" y="1759.5" ></text>
</g>
<g >
<title>__sanitizer::Quarantine&lt;__asan::QuarantineCallback, __asan::AsanChunk&gt;::DoRecycle (2 samples, 0.01%)</title><rect x="980.0" y="1573" width="0.1" height="15.0" fill="rgb(232,38,29)" rx="2" ry="2" />
<text  x="982.98" y="1583.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (36 samples, 0.23%)</title><rect x="363.6" y="1813" width="2.7" height="15.0" fill="rgb(223,41,39)" rx="2" ry="2" />
<text  x="366.57" y="1823.5" ></text>
</g>
<g >
<title>std::array&lt;int, 2ul&gt;::operator[] (2 samples, 0.01%)</title><rect x="540.5" y="1765" width="0.2" height="15.0" fill="rgb(237,13,46)" rx="2" ry="2" />
<text  x="543.54" y="1775.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::Hash (6 samples, 0.04%)</title><rect x="148.6" y="1765" width="0.5" height="15.0" fill="rgb(222,216,49)" rx="2" ry="2" />
<text  x="151.62" y="1775.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (49 samples, 0.31%)</title><rect x="359.5" y="1813" width="3.7" height="15.0" fill="rgb(233,136,51)" rx="2" ry="2" />
<text  x="362.54" y="1823.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::insert_or_assign_unique&lt;lczero::Position const&amp;, TTranspositionTable::TNode&gt; (10 samples, 0.06%)</title><rect x="917.5" y="1845" width="0.8" height="15.0" fill="rgb(205,182,9)" rx="2" ry="2" />
<text  x="920.53" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ApplyMove (2 samples, 0.01%)</title><rect x="479.7" y="1733" width="0.1" height="15.0" fill="rgb(206,54,1)" rx="2" ry="2" />
<text  x="482.66" y="1743.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (2 samples, 0.01%)</title><rect x="184.7" y="1829" width="0.2" height="15.0" fill="rgb(225,63,46)" rx="2" ry="2" />
<text  x="187.73" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (3 samples, 0.02%)</title><rect x="518.9" y="1637" width="0.2" height="15.0" fill="rgb(215,53,27)" rx="2" ry="2" />
<text  x="521.90" y="1647.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (11 samples, 0.07%)</title><rect x="33.9" y="1861" width="0.8" height="15.0" fill="rgb(235,161,43)" rx="2" ry="2" />
<text  x="36.87" y="1871.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (2 samples, 0.01%)</title><rect x="34.5" y="1797" width="0.2" height="15.0" fill="rgb(250,119,2)" rx="2" ry="2" />
<text  x="37.55" y="1807.5" ></text>
</g>
<g >
<title>TSearchStrategy::MakeMove (779 samples, 4.93%)</title><rect x="233.4" y="1973" width="58.1" height="15.0" fill="rgb(222,165,33)" rx="2" ry="2" />
<text  x="236.38" y="1983.5" >TSearc..</text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (28 samples, 0.18%)</title><rect x="285.5" y="1893" width="2.1" height="15.0" fill="rgb(232,63,30)" rx="2" ry="2" />
<text  x="288.53" y="1903.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetRookAttacks (2 samples, 0.01%)</title><rect x="112.1" y="1733" width="0.2" height="15.0" fill="rgb(229,23,20)" rx="2" ry="2" />
<text  x="115.14" y="1743.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::reserve_for_insert (3 samples, 0.02%)</title><rect x="918.1" y="1813" width="0.2" height="15.0" fill="rgb(216,212,48)" rx="2" ry="2" />
<text  x="921.05" y="1823.5" ></text>
</g>
<g >
<title>[unknown] (195 samples, 1.23%)</title><rect x="963.0" y="1157" width="14.5" height="15.0" fill="rgb(206,166,38)" rx="2" ry="2" />
<text  x="965.97" y="1167.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (3 samples, 0.02%)</title><rect x="101.8" y="1781" width="0.2" height="15.0" fill="rgb(219,19,1)" rx="2" ry="2" />
<text  x="104.77" y="1791.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (3 samples, 0.02%)</title><rect x="282.9" y="1861" width="0.2" height="15.0" fill="rgb(221,136,23)" rx="2" ry="2" />
<text  x="285.92" y="1871.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::Unwind (3 samples, 0.02%)</title><rect x="202.7" y="1829" width="0.2" height="15.0" fill="rgb(244,167,43)" rx="2" ry="2" />
<text  x="205.71" y="1839.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::hash (6 samples, 0.04%)</title><rect x="171.7" y="1781" width="0.4" height="15.0" fill="rgb(241,76,13)" rx="2" ry="2" />
<text  x="174.68" y="1791.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_construct_node&lt;int&amp;, TSearchNode&gt; (7 samples, 0.04%)</title><rect x="936.3" y="1845" width="0.5" height="15.0" fill="rgb(242,115,16)" rx="2" ry="2" />
<text  x="939.26" y="1855.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (5 samples, 0.03%)</title><rect x="295.5" y="1877" width="0.3" height="15.0" fill="rgb(232,161,11)" rx="2" ry="2" />
<text  x="298.45" y="1887.5" ></text>
</g>
<g >
<title>boost::unordered::unordered_map&lt;lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt; &gt;::find (2 samples, 0.01%)</title><rect x="281.3" y="1861" width="0.1" height="15.0" fill="rgb(211,222,54)" rx="2" ry="2" />
<text  x="284.27" y="1871.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (4 samples, 0.03%)</title><rect x="536.8" y="1733" width="0.3" height="15.0" fill="rgb(239,78,49)" rx="2" ry="2" />
<text  x="539.81" y="1743.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::next_for_find (2 samples, 0.01%)</title><rect x="917.4" y="1813" width="0.1" height="15.0" fill="rgb(228,134,2)" rx="2" ry="2" />
<text  x="920.38" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ChessBoard (18 samples, 0.11%)</title><rect x="891.2" y="1829" width="1.3" height="15.0" fill="rgb(224,201,48)" rx="2" ry="2" />
<text  x="894.19" y="1839.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_create_node&lt;int&amp;, TSearchNode&gt; (11 samples, 0.07%)</title><rect x="705.0" y="1797" width="0.9" height="15.0" fill="rgb(246,219,21)" rx="2" ry="2" />
<text  x="708.05" y="1807.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (4 samples, 0.03%)</title><rect x="478.8" y="1749" width="0.3" height="15.0" fill="rgb(236,175,34)" rx="2" ry="2" />
<text  x="481.76" y="1759.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::Hash (2 samples, 0.01%)</title><rect x="281.3" y="1797" width="0.1" height="15.0" fill="rgb(248,74,15)" rx="2" ry="2" />
<text  x="284.27" y="1807.5" ></text>
</g>
<g >
<title>__asan_memset (3 samples, 0.02%)</title><rect x="618.4" y="1781" width="0.3" height="15.0" fill="rgb(206,172,45)" rx="2" ry="2" />
<text  x="621.43" y="1791.5" ></text>
</g>
<g >
<title>GetPieceType (2 samples, 0.01%)</title><rect x="355.4" y="1797" width="0.2" height="15.0" fill="rgb(223,5,9)" rx="2" ry="2" />
<text  x="358.44" y="1807.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (10 samples, 0.06%)</title><rect x="514.3" y="1653" width="0.7" height="15.0" fill="rgb(252,101,13)" rx="2" ry="2" />
<text  x="517.28" y="1663.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::~vector (2 samples, 0.01%)</title><rect x="148.2" y="1829" width="0.2" height="15.0" fill="rgb(206,188,17)" rx="2" ry="2" />
<text  x="151.25" y="1839.5" ></text>
</g>
<g >
<title>TTranspositionTable::TPositionEqualFn::operator (2 samples, 0.01%)</title><rect x="295.3" y="1813" width="0.2" height="15.0" fill="rgb(231,122,23)" rx="2" ry="2" />
<text  x="298.30" y="1823.5" ></text>
</g>
<g >
<title>CalcPSTScore (604 samples, 3.82%)</title><rect x="369.2" y="1829" width="45.0" height="15.0" fill="rgb(252,44,27)" rx="2" ry="2" />
<text  x="372.16" y="1839.5" >Calc..</text>
</g>
<g >
<title>EvaluateCaptureSEE (6 samples, 0.04%)</title><rect x="354.5" y="1813" width="0.4" height="15.0" fill="rgb(232,66,43)" rx="2" ry="2" />
<text  x="357.47" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (6 samples, 0.04%)</title><rect x="479.1" y="1749" width="0.4" height="15.0" fill="rgb(248,141,25)" rx="2" ry="2" />
<text  x="482.06" y="1759.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::find_node (7 samples, 0.04%)</title><rect x="148.5" y="1813" width="0.6" height="15.0" fill="rgb(245,88,24)" rx="2" ry="2" />
<text  x="151.55" y="1823.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (2 samples, 0.01%)</title><rect x="227.0" y="1861" width="0.2" height="15.0" fill="rgb(223,115,37)" rx="2" ry="2" />
<text  x="230.03" y="1871.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::knights (2 samples, 0.01%)</title><rect x="51.1" y="1829" width="0.2" height="15.0" fill="rgb(232,45,54)" rx="2" ry="2" />
<text  x="54.11" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (31 samples, 0.20%)</title><rect x="265.2" y="1829" width="2.3" height="15.0" fill="rgb(222,184,41)" rx="2" ry="2" />
<text  x="268.16" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (17 samples, 0.11%)</title><rect x="285.7" y="1877" width="1.2" height="15.0" fill="rgb(222,6,21)" rx="2" ry="2" />
<text  x="288.68" y="1887.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (2 samples, 0.01%)</title><rect x="35.1" y="1829" width="0.2" height="15.0" fill="rgb(222,118,7)" rx="2" ry="2" />
<text  x="38.14" y="1839.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::hash (4 samples, 0.03%)</title><rect x="292.5" y="1829" width="0.3" height="15.0" fill="rgb(235,0,51)" rx="2" ry="2" />
<text  x="295.54" y="1839.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_emplace_equal&lt;int&amp;, TSearchNode&gt; (152 samples, 0.96%)</title><rect x="935.9" y="1861" width="11.3" height="15.0" fill="rgb(232,176,16)" rx="2" ry="2" />
<text  x="938.89" y="1871.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (7 samples, 0.04%)</title><rect x="247.0" y="1829" width="0.5" height="15.0" fill="rgb(244,199,35)" rx="2" ry="2" />
<text  x="249.95" y="1839.5" ></text>
</g>
<g >
<title>TTranspositionTable::Insert (2 samples, 0.01%)</title><rect x="952.7" y="1877" width="0.2" height="15.0" fill="rgb(236,204,48)" rx="2" ry="2" />
<text  x="955.75" y="1887.5" ></text>
</g>
<g >
<title>__sanitizer::mem_is_zero (2 samples, 0.01%)</title><rect x="869.0" y="1765" width="0.1" height="15.0" fill="rgb(245,221,45)" rx="2" ry="2" />
<text  x="871.96" y="1775.5" ></text>
</g>
<g >
<title>[unknown] (121 samples, 0.77%)</title><rect x="963.0" y="421" width="9.0" height="15.0" fill="rgb(234,180,20)" rx="2" ry="2" />
<text  x="965.97" y="431.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateKingAttackInfo (4 samples, 0.03%)</title><rect x="551.1" y="1781" width="0.3" height="15.0" fill="rgb(225,154,53)" rx="2" ry="2" />
<text  x="554.13" y="1791.5" ></text>
</g>
<g >
<title>lczero::Position::Hash (6 samples, 0.04%)</title><rect x="32.2" y="1797" width="0.5" height="15.0" fill="rgb(230,95,4)" rx="2" ry="2" />
<text  x="35.23" y="1807.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (623 samples, 3.94%)</title><rect x="815.5" y="1813" width="46.4" height="15.0" fill="rgb(218,49,27)" rx="2" ry="2" />
<text  x="818.47" y="1823.5" >std:..</text>
</g>
<g >
<title>EvaluateCaptureSEE (21 samples, 0.13%)</title><rect x="502.4" y="1749" width="1.6" height="15.0" fill="rgb(244,93,4)" rx="2" ry="2" />
<text  x="505.41" y="1759.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ChessBoard (6 samples, 0.04%)</title><rect x="468.8" y="1781" width="0.4" height="15.0" fill="rgb(253,219,34)" rx="2" ry="2" />
<text  x="471.76" y="1791.5" ></text>
</g>
<g >
<title>TSearchStrategy::Search (2,764 samples, 17.48%)</title><rect x="26.1" y="1925" width="206.2" height="15.0" fill="rgb(244,0,29)" rx="2" ry="2" />
<text  x="29.12" y="1935.5" >TSearchStrategy::Search</text>
</g>
<g >
<title>[libc-2.31.so] (6 samples, 0.04%)</title><rect x="884.2" y="1829" width="0.4" height="15.0" fill="rgb(206,64,48)" rx="2" ry="2" />
<text  x="887.18" y="1839.5" ></text>
</g>
<g >
<title>__sanitizer::SizeClassAllocator64&lt;__asan::AP64&gt;::GetFromAllocator (10 samples, 0.06%)</title><rect x="997.1" y="2037" width="0.8" height="15.0" fill="rgb(231,137,20)" rx="2" ry="2" />
<text  x="1000.14" y="2047.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (2 samples, 0.01%)</title><rect x="358.3" y="1749" width="0.2" height="15.0" fill="rgb(248,132,14)" rx="2" ry="2" />
<text  x="361.34" y="1759.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ApplyMove (4 samples, 0.03%)</title><rect x="283.4" y="1861" width="0.3" height="15.0" fill="rgb(210,66,52)" rx="2" ry="2" />
<text  x="286.36" y="1871.5" ></text>
</g>
<g >
<title>IsCapture (10 samples, 0.06%)</title><rect x="482.5" y="1797" width="0.7" height="15.0" fill="rgb(216,165,18)" rx="2" ry="2" />
<text  x="485.49" y="1807.5" ></text>
</g>
<g >
<title>lczero::Position::Position (7 samples, 0.04%)</title><rect x="472.2" y="1781" width="0.5" height="15.0" fill="rgb(206,13,14)" rx="2" ry="2" />
<text  x="475.20" y="1791.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (3 samples, 0.02%)</title><rect x="506.1" y="1701" width="0.2" height="15.0" fill="rgb(210,54,46)" rx="2" ry="2" />
<text  x="509.07" y="1711.5" ></text>
</g>
<g >
<title>GetPieceType (2 samples, 0.01%)</title><rect x="505.5" y="1717" width="0.1" height="15.0" fill="rgb(238,222,21)" rx="2" ry="2" />
<text  x="508.47" y="1727.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::begin (7 samples, 0.04%)</title><rect x="316.9" y="1797" width="0.5" height="15.0" fill="rgb(221,186,1)" rx="2" ry="2" />
<text  x="319.86" y="1807.5" ></text>
</g>
<g >
<title>__asan::asan_memalign (2 samples, 0.01%)</title><rect x="895.4" y="1813" width="0.2" height="15.0" fill="rgb(235,56,30)" rx="2" ry="2" />
<text  x="898.45" y="1823.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (2 samples, 0.01%)</title><rect x="146.3" y="1813" width="0.2" height="15.0" fill="rgb(220,161,33)" rx="2" ry="2" />
<text  x="149.31" y="1823.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::hash (2 samples, 0.01%)</title><rect x="238.2" y="1813" width="0.1" height="15.0" fill="rgb(230,155,28)" rx="2" ry="2" />
<text  x="241.15" y="1823.5" ></text>
</g>
<g >
<title>__asan_region_is_poisoned (23 samples, 0.15%)</title><rect x="206.7" y="1813" width="1.7" height="15.0" fill="rgb(207,153,9)" rx="2" ry="2" />
<text  x="209.67" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::Mirror (10 samples, 0.06%)</title><rect x="935.0" y="1845" width="0.7" height="15.0" fill="rgb(221,161,16)" rx="2" ry="2" />
<text  x="937.99" y="1855.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (4 samples, 0.03%)</title><rect x="258.4" y="1781" width="0.3" height="15.0" fill="rgb(216,0,14)" rx="2" ry="2" />
<text  x="261.44" y="1791.5" ></text>
</g>
<g >
<title>GetPieceType (15 samples, 0.09%)</title><rect x="340.9" y="1829" width="1.1" height="15.0" fill="rgb(253,228,7)" rx="2" ry="2" />
<text  x="343.89" y="1839.5" ></text>
</g>
<g >
<title>CalcPSTScore (5 samples, 0.03%)</title><rect x="237.3" y="1877" width="0.4" height="15.0" fill="rgb(222,12,10)" rx="2" ry="2" />
<text  x="240.33" y="1887.5" ></text>
</g>
<g >
<title>GetPieceType (2 samples, 0.01%)</title><rect x="33.4" y="1845" width="0.2" height="15.0" fill="rgb(223,160,52)" rx="2" ry="2" />
<text  x="36.43" y="1855.5" ></text>
</g>
<g >
<title>TTranspositionTable::Find (2 samples, 0.01%)</title><rect x="105.8" y="1781" width="0.1" height="15.0" fill="rgb(208,208,9)" rx="2" ry="2" />
<text  x="108.80" y="1791.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (34 samples, 0.21%)</title><rect x="547.0" y="1733" width="2.5" height="15.0" fill="rgb(246,165,16)" rx="2" ry="2" />
<text  x="549.95" y="1743.5" ></text>
</g>
<g >
<title>CalcPSTScore (2 samples, 0.01%)</title><rect x="233.7" y="1909" width="0.2" height="15.0" fill="rgb(209,112,53)" rx="2" ry="2" />
<text  x="236.75" y="1919.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (169 samples, 1.07%)</title><rect x="870.8" y="1845" width="12.6" height="15.0" fill="rgb(240,214,21)" rx="2" ry="2" />
<text  x="873.83" y="1855.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetRookAttacks (5 samples, 0.03%)</title><rect x="180.4" y="1813" width="0.4" height="15.0" fill="rgb(228,214,4)" rx="2" ry="2" />
<text  x="183.40" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateKingAttackInfo (47 samples, 0.30%)</title><rect x="574.3" y="1797" width="3.5" height="15.0" fill="rgb(239,136,47)" rx="2" ry="2" />
<text  x="577.33" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ApplyMove (3 samples, 0.02%)</title><rect x="50.5" y="1813" width="0.2" height="15.0" fill="rgb(239,48,11)" rx="2" ry="2" />
<text  x="53.51" y="1823.5" ></text>
</g>
<g >
<title>__asan_memcpy (5 samples, 0.03%)</title><rect x="939.8" y="1813" width="0.4" height="15.0" fill="rgb(248,136,12)" rx="2" ry="2" />
<text  x="942.84" y="1823.5" ></text>
</g>
<g >
<title>GetFenBestMove (780 samples, 4.93%)</title><rect x="233.4" y="1989" width="58.2" height="15.0" fill="rgb(215,63,7)" rx="2" ry="2" />
<text  x="236.38" y="1999.5" >GetFen..</text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (4 samples, 0.03%)</title><rect x="950.9" y="1781" width="0.3" height="15.0" fill="rgb(217,58,16)" rx="2" ry="2" />
<text  x="953.88" y="1791.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (60 samples, 0.38%)</title><rect x="532.3" y="1749" width="4.5" height="15.0" fill="rgb(245,17,15)" rx="2" ry="2" />
<text  x="535.33" y="1759.5" ></text>
</g>
<g >
<title>__sanitizer::mem_is_zero (17 samples, 0.11%)</title><rect x="901.4" y="1797" width="1.3" height="15.0" fill="rgb(241,104,43)" rx="2" ry="2" />
<text  x="904.42" y="1807.5" ></text>
</g>
<g >
<title>[unknown] (107 samples, 0.68%)</title><rect x="963.0" y="229" width="8.0" height="15.0" fill="rgb(226,163,23)" rx="2" ry="2" />
<text  x="965.97" y="239.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::~_Rb_tree (6 samples, 0.04%)</title><rect x="280.8" y="1861" width="0.4" height="15.0" fill="rgb(250,104,43)" rx="2" ry="2" />
<text  x="283.75" y="1871.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (5 samples, 0.03%)</title><rect x="506.0" y="1717" width="0.4" height="15.0" fill="rgb(229,99,49)" rx="2" ry="2" />
<text  x="508.99" y="1727.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::back (2 samples, 0.01%)</title><rect x="137.1" y="1797" width="0.2" height="15.0" fill="rgb(229,46,20)" rx="2" ry="2" />
<text  x="140.13" y="1807.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::back (7 samples, 0.04%)</title><rect x="536.2" y="1717" width="0.5" height="15.0" fill="rgb(245,19,49)" rx="2" ry="2" />
<text  x="539.21" y="1727.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (24 samples, 0.15%)</title><rect x="907.8" y="1829" width="1.8" height="15.0" fill="rgb(228,39,12)" rx="2" ry="2" />
<text  x="910.83" y="1839.5" ></text>
</g>
<g >
<title>THistoryHeuristics::Get (11 samples, 0.07%)</title><rect x="342.6" y="1829" width="0.8" height="15.0" fill="rgb(242,75,13)" rx="2" ry="2" />
<text  x="345.60" y="1839.5" ></text>
</g>
<g >
<title>__asan_region_is_poisoned (13 samples, 0.08%)</title><rect x="940.2" y="1813" width="1.0" height="15.0" fill="rgb(205,11,31)" rx="2" ry="2" />
<text  x="943.21" y="1823.5" ></text>
</g>
<g >
<title>[unknown] (91 samples, 0.58%)</title><rect x="963.0" y="69" width="6.8" height="15.0" fill="rgb(210,191,24)" rx="2" ry="2" />
<text  x="965.97" y="79.5" ></text>
</g>
<g >
<title>lczero::Position::Position (2 samples, 0.01%)</title><rect x="104.9" y="1765" width="0.2" height="15.0" fill="rgb(214,88,0)" rx="2" ry="2" />
<text  x="107.90" y="1775.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (4 samples, 0.03%)</title><rect x="955.9" y="1893" width="0.3" height="15.0" fill="rgb(220,93,43)" rx="2" ry="2" />
<text  x="958.88" y="1903.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::hash (3 samples, 0.02%)</title><rect x="168.7" y="1813" width="0.2" height="15.0" fill="rgb(246,147,4)" rx="2" ry="2" />
<text  x="171.69" y="1823.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (3 samples, 0.02%)</title><rect x="231.1" y="1861" width="0.3" height="15.0" fill="rgb(213,190,36)" rx="2" ry="2" />
<text  x="234.14" y="1871.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (10 samples, 0.06%)</title><rect x="220.0" y="1829" width="0.8" height="15.0" fill="rgb(217,23,3)" rx="2" ry="2" />
<text  x="223.02" y="1839.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (4 samples, 0.03%)</title><rect x="470.9" y="1749" width="0.3" height="15.0" fill="rgb(209,55,41)" rx="2" ry="2" />
<text  x="473.93" y="1759.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (8 samples, 0.05%)</title><rect x="319.8" y="1813" width="0.6" height="15.0" fill="rgb(216,107,22)" rx="2" ry="2" />
<text  x="322.85" y="1823.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (8 samples, 0.05%)</title><rect x="262.1" y="1797" width="0.6" height="15.0" fill="rgb(235,105,32)" rx="2" ry="2" />
<text  x="265.10" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::operator== (6 samples, 0.04%)</title><rect x="350.1" y="1765" width="0.5" height="15.0" fill="rgb(246,119,20)" rx="2" ry="2" />
<text  x="353.14" y="1775.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (2 samples, 0.01%)</title><rect x="256.4" y="1781" width="0.2" height="15.0" fill="rgb(224,36,41)" rx="2" ry="2" />
<text  x="259.43" y="1791.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::hash (59 samples, 0.37%)</title><rect x="345.2" y="1781" width="4.4" height="15.0" fill="rgb(226,7,23)" rx="2" ry="2" />
<text  x="348.21" y="1791.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (43 samples, 0.27%)</title><rect x="21.9" y="2005" width="3.2" height="15.0" fill="rgb(230,129,11)" rx="2" ry="2" />
<text  x="24.86" y="2015.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetBishopAttacks (2 samples, 0.01%)</title><rect x="158.2" y="1813" width="0.1" height="15.0" fill="rgb(246,35,22)" rx="2" ry="2" />
<text  x="161.17" y="1823.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (2 samples, 0.01%)</title><rect x="472.2" y="1765" width="0.1" height="15.0" fill="rgb(236,153,49)" rx="2" ry="2" />
<text  x="475.20" y="1775.5" ></text>
</g>
<g >
<title>CalcPSTScore (23 samples, 0.15%)</title><rect x="239.8" y="1861" width="1.7" height="15.0" fill="rgb(249,185,44)" rx="2" ry="2" />
<text  x="242.79" y="1871.5" ></text>
</g>
<g >
<title>__asan_region_is_poisoned (2 samples, 0.01%)</title><rect x="957.8" y="1877" width="0.2" height="15.0" fill="rgb(249,15,19)" rx="2" ry="2" />
<text  x="960.82" y="1887.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (13 samples, 0.08%)</title><rect x="110.8" y="1765" width="1.0" height="15.0" fill="rgb(207,194,15)" rx="2" ry="2" />
<text  x="113.80" y="1775.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (3 samples, 0.02%)</title><rect x="205.9" y="1813" width="0.2" height="15.0" fill="rgb(220,10,20)" rx="2" ry="2" />
<text  x="208.92" y="1823.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (10 samples, 0.06%)</title><rect x="913.8" y="1781" width="0.7" height="15.0" fill="rgb(211,183,13)" rx="2" ry="2" />
<text  x="916.80" y="1791.5" ></text>
</g>
<g >
<title>[unknown] (142 samples, 0.90%)</title><rect x="963.0" y="677" width="10.6" height="15.0" fill="rgb(246,114,12)" rx="2" ry="2" />
<text  x="965.97" y="687.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ChessBoard (18 samples, 0.11%)</title><rect x="197.3" y="1845" width="1.4" height="15.0" fill="rgb(230,52,4)" rx="2" ry="2" />
<text  x="200.34" y="1855.5" ></text>
</g>
<g >
<title>[unknown] (226 samples, 1.43%)</title><rect x="963.0" y="1557" width="16.8" height="15.0" fill="rgb(208,55,27)" rx="2" ry="2" />
<text  x="965.97" y="1567.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetBishopAttacks (2 samples, 0.01%)</title><rect x="874.6" y="1813" width="0.2" height="15.0" fill="rgb(252,57,34)" rx="2" ry="2" />
<text  x="877.63" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (4 samples, 0.03%)</title><rect x="358.8" y="1781" width="0.3" height="15.0" fill="rgb(245,194,4)" rx="2" ry="2" />
<text  x="361.79" y="1791.5" ></text>
</g>
<g >
<title>[unknown] (139 samples, 0.88%)</title><rect x="963.0" y="613" width="10.3" height="15.0" fill="rgb(220,52,0)" rx="2" ry="2" />
<text  x="965.97" y="623.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (3 samples, 0.02%)</title><rect x="239.1" y="1845" width="0.2" height="15.0" fill="rgb(240,207,29)" rx="2" ry="2" />
<text  x="242.12" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (4 samples, 0.03%)</title><rect x="290.8" y="1925" width="0.3" height="15.0" fill="rgb(235,208,31)" rx="2" ry="2" />
<text  x="293.82" y="1935.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsUnderAttack (6 samples, 0.04%)</title><rect x="557.3" y="1765" width="0.5" height="15.0" fill="rgb(231,64,3)" rx="2" ry="2" />
<text  x="560.32" y="1775.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (12 samples, 0.08%)</title><rect x="492.2" y="1749" width="0.9" height="15.0" fill="rgb(246,139,25)" rx="2" ry="2" />
<text  x="495.19" y="1759.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (5 samples, 0.03%)</title><rect x="258.8" y="1765" width="0.4" height="15.0" fill="rgb(212,226,30)" rx="2" ry="2" />
<text  x="261.82" y="1775.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::knights (13 samples, 0.08%)</title><rect x="444.8" y="1781" width="1.0" height="15.0" fill="rgb(219,31,26)" rx="2" ry="2" />
<text  x="447.82" y="1791.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_create_node&lt;int&amp;, TSearchNode&gt; (126 samples, 0.80%)</title><rect x="998.0" y="2037" width="9.4" height="15.0" fill="rgb(240,94,42)" rx="2" ry="2" />
<text  x="1001.03" y="2047.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_construct_node&lt;int&amp;, TSearchNode&gt; (11 samples, 0.07%)</title><rect x="705.0" y="1781" width="0.9" height="15.0" fill="rgb(219,59,44)" rx="2" ry="2" />
<text  x="708.05" y="1791.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_construct_node&lt;int&amp;, TSearchNode&gt; (2 samples, 0.01%)</title><rect x="127.9" y="1781" width="0.1" height="15.0" fill="rgb(246,125,30)" rx="2" ry="2" />
<text  x="130.88" y="1791.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::next_for_find (2 samples, 0.01%)</title><rect x="103.2" y="1749" width="0.1" height="15.0" fill="rgb(215,81,41)" rx="2" ry="2" />
<text  x="106.19" y="1759.5" ></text>
</g>
<g >
<title>TTranspositionTable::Find (91 samples, 0.58%)</title><rect x="53.2" y="1845" width="6.8" height="15.0" fill="rgb(252,196,25)" rx="2" ry="2" />
<text  x="56.20" y="1855.5" ></text>
</g>
<g >
<title>__asan_memcpy (2 samples, 0.01%)</title><rect x="287.7" y="1877" width="0.1" height="15.0" fill="rgb(245,170,6)" rx="2" ry="2" />
<text  x="290.69" y="1887.5" ></text>
</g>
<g >
<title>boost::unordered::unordered_map&lt;lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt; &gt;::find (6 samples, 0.04%)</title><rect x="95.4" y="1797" width="0.4" height="15.0" fill="rgb(209,185,16)" rx="2" ry="2" />
<text  x="98.35" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (3 samples, 0.02%)</title><rect x="353.4" y="1797" width="0.2" height="15.0" fill="rgb(223,113,17)" rx="2" ry="2" />
<text  x="356.42" y="1807.5" ></text>
</g>
<g >
<title>CalcPSTScore (8 samples, 0.05%)</title><rect x="30.1" y="1877" width="0.6" height="15.0" fill="rgb(212,62,20)" rx="2" ry="2" />
<text  x="33.07" y="1887.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (2 samples, 0.01%)</title><rect x="319.0" y="1765" width="0.2" height="15.0" fill="rgb(233,33,20)" rx="2" ry="2" />
<text  x="322.03" y="1775.5" ></text>
</g>
<g >
<title>__asan::RZSize2Log (28 samples, 0.18%)</title><rect x="1137.4" y="2053" width="2.1" height="15.0" fill="rgb(252,43,21)" rx="2" ry="2" />
<text  x="1140.40" y="2063.5" ></text>
</g>
<g >
<title>TTranspositionTable::Find (6 samples, 0.04%)</title><rect x="102.9" y="1797" width="0.4" height="15.0" fill="rgb(218,170,25)" rx="2" ry="2" />
<text  x="105.89" y="1807.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (2 samples, 0.01%)</title><rect x="516.3" y="1621" width="0.1" height="15.0" fill="rgb(247,211,29)" rx="2" ry="2" />
<text  x="519.29" y="1631.5" ></text>
</g>
<g >
<title>GetPieceType (4 samples, 0.03%)</title><rect x="255.0" y="1813" width="0.3" height="15.0" fill="rgb(215,167,45)" rx="2" ry="2" />
<text  x="258.01" y="1823.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_emplace_equal&lt;int&amp;, TSearchNode&gt; (9 samples, 0.06%)</title><rect x="566.3" y="1797" width="0.6" height="15.0" fill="rgb(213,47,7)" rx="2" ry="2" />
<text  x="569.28" y="1807.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::find_node_impl&lt;lczero::Position, TTranspositionTable::TPositionEqualFn&gt; (8 samples, 0.05%)</title><rect x="493.4" y="1733" width="0.6" height="15.0" fill="rgb(236,76,13)" rx="2" ry="2" />
<text  x="496.39" y="1743.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::Hash (40 samples, 0.25%)</title><rect x="55.0" y="1765" width="3.0" height="15.0" fill="rgb(252,200,5)" rx="2" ry="2" />
<text  x="57.99" y="1775.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_get_insert_equal_pos (3 samples, 0.02%)</title><rect x="280.5" y="1861" width="0.3" height="15.0" fill="rgb(246,44,34)" rx="2" ry="2" />
<text  x="283.53" y="1871.5" ></text>
</g>
<g >
<title>lczero::Position::Position (4 samples, 0.03%)</title><rect x="465.4" y="1765" width="0.3" height="15.0" fill="rgb(205,137,53)" rx="2" ry="2" />
<text  x="468.41" y="1775.5" ></text>
</g>
<g >
<title>__asan::Allocator::GetAsanChunkByAddrFastLocked (35 samples, 0.22%)</title><rect x="984.4" y="2037" width="2.6" height="15.0" fill="rgb(207,45,25)" rx="2" ry="2" />
<text  x="987.38" y="2047.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::delete_buckets (8 samples, 0.05%)</title><rect x="958.0" y="1973" width="0.6" height="15.0" fill="rgb(245,34,12)" rx="2" ry="2" />
<text  x="960.97" y="1983.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (14 samples, 0.09%)</title><rect x="521.9" y="1669" width="1.0" height="15.0" fill="rgb(231,161,43)" rx="2" ry="2" />
<text  x="524.89" y="1679.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (2 samples, 0.01%)</title><rect x="471.0" y="1733" width="0.2" height="15.0" fill="rgb(229,85,21)" rx="2" ry="2" />
<text  x="474.00" y="1743.5" ></text>
</g>
<g >
<title>[unknown] (261 samples, 1.65%)</title><rect x="963.0" y="1877" width="19.4" height="15.0" fill="rgb(248,204,52)" rx="2" ry="2" />
<text  x="965.97" y="1887.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (9 samples, 0.06%)</title><rect x="338.1" y="1797" width="0.7" height="15.0" fill="rgb(221,99,47)" rx="2" ry="2" />
<text  x="341.13" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (5 samples, 0.03%)</title><rect x="239.3" y="1845" width="0.4" height="15.0" fill="rgb(213,171,50)" rx="2" ry="2" />
<text  x="242.34" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (9 samples, 0.06%)</title><rect x="656.9" y="1765" width="0.6" height="15.0" fill="rgb(222,84,31)" rx="2" ry="2" />
<text  x="659.85" y="1775.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (6 samples, 0.04%)</title><rect x="192.0" y="1845" width="0.4" height="15.0" fill="rgb(213,90,53)" rx="2" ry="2" />
<text  x="194.97" y="1855.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (4 samples, 0.03%)</title><rect x="899.0" y="1797" width="0.3" height="15.0" fill="rgb(230,43,34)" rx="2" ry="2" />
<text  x="901.95" y="1807.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (7 samples, 0.04%)</title><rect x="518.7" y="1685" width="0.5" height="15.0" fill="rgb(238,55,10)" rx="2" ry="2" />
<text  x="521.68" y="1695.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.03%)</title><rect x="704.7" y="1813" width="0.3" height="15.0" fill="rgb(219,61,51)" rx="2" ry="2" />
<text  x="707.68" y="1823.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (2 samples, 0.01%)</title><rect x="320.7" y="1813" width="0.1" height="15.0" fill="rgb(215,76,31)" rx="2" ry="2" />
<text  x="323.67" y="1823.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::hash (2 samples, 0.01%)</title><rect x="917.8" y="1829" width="0.2" height="15.0" fill="rgb(236,8,39)" rx="2" ry="2" />
<text  x="920.83" y="1839.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (7 samples, 0.04%)</title><rect x="236.8" y="1861" width="0.5" height="15.0" fill="rgb(214,89,34)" rx="2" ry="2" />
<text  x="239.81" y="1871.5" ></text>
</g>
<g >
<title>lczero::Position::Position (11 samples, 0.07%)</title><rect x="227.8" y="1893" width="0.8" height="15.0" fill="rgb(217,61,46)" rx="2" ry="2" />
<text  x="230.78" y="1903.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::erase (24 samples, 0.15%)</title><rect x="701.9" y="1797" width="1.8" height="15.0" fill="rgb(236,162,18)" rx="2" ry="2" />
<text  x="704.91" y="1807.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (5 samples, 0.03%)</title><rect x="280.8" y="1829" width="0.4" height="15.0" fill="rgb(254,50,15)" rx="2" ry="2" />
<text  x="283.83" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (12 samples, 0.08%)</title><rect x="89.6" y="1797" width="0.9" height="15.0" fill="rgb(230,60,32)" rx="2" ry="2" />
<text  x="92.61" y="1807.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (6 samples, 0.04%)</title><rect x="236.9" y="1829" width="0.4" height="15.0" fill="rgb(230,55,1)" rx="2" ry="2" />
<text  x="239.88" y="1839.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (20 samples, 0.13%)</title><rect x="319.3" y="1845" width="1.5" height="15.0" fill="rgb(216,45,24)" rx="2" ry="2" />
<text  x="322.32" y="1855.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_get_insert_equal_pos (61 samples, 0.39%)</title><rect x="902.7" y="1829" width="4.5" height="15.0" fill="rgb(241,97,4)" rx="2" ry="2" />
<text  x="905.68" y="1839.5" ></text>
</g>
<g >
<title>std::array&lt;int, 2ul&gt;::operator[] (4 samples, 0.03%)</title><rect x="100.8" y="1797" width="0.3" height="15.0" fill="rgb(215,205,54)" rx="2" ry="2" />
<text  x="103.80" y="1807.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_emplace_equal&lt;int&amp;, TSearchNode&gt; (35 samples, 0.22%)</title><rect x="277.9" y="1861" width="2.6" height="15.0" fill="rgb(252,49,20)" rx="2" ry="2" />
<text  x="280.92" y="1871.5" ></text>
</g>
<g >
<title>__asan::Allocator::Allocate (890 samples, 5.63%)</title><rect x="1029.4" y="2053" width="66.4" height="15.0" fill="rgb(225,26,0)" rx="2" ry="2" />
<text  x="1032.44" y="2063.5" >__asan:..</text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (2 samples, 0.01%)</title><rect x="261.4" y="1797" width="0.1" height="15.0" fill="rgb(252,100,53)" rx="2" ry="2" />
<text  x="264.35" y="1807.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::erase (4 samples, 0.03%)</title><rect x="146.5" y="1813" width="0.3" height="15.0" fill="rgb(218,9,41)" rx="2" ry="2" />
<text  x="149.46" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (83 samples, 0.52%)</title><rect x="919.0" y="1845" width="6.2" height="15.0" fill="rgb(218,81,15)" rx="2" ry="2" />
<text  x="922.02" y="1855.5" ></text>
</g>
<g >
<title>IsTerminal (4 samples, 0.03%)</title><rect x="470.2" y="1813" width="0.3" height="15.0" fill="rgb(228,216,19)" rx="2" ry="2" />
<text  x="473.18" y="1823.5" ></text>
</g>
<g >
<title>lczero::Position::Position (3 samples, 0.02%)</title><rect x="509.7" y="1685" width="0.2" height="15.0" fill="rgb(220,199,3)" rx="2" ry="2" />
<text  x="512.72" y="1695.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;boost::unordered::detail::ptr_node&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt; &gt;::construct&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;lczero::Position const&amp;&gt;, std::tuple&lt;TTranspositionTable::TNode&amp;&amp;&gt; &gt; (5 samples, 0.03%)</title><rect x="868.7" y="1797" width="0.4" height="15.0" fill="rgb(247,162,30)" rx="2" ry="2" />
<text  x="871.74" y="1807.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (2 samples, 0.01%)</title><rect x="703.9" y="1797" width="0.2" height="15.0" fill="rgb(216,69,12)" rx="2" ry="2" />
<text  x="706.93" y="1807.5" ></text>
</g>
<g >
<title>__pthread_getspecific (9 samples, 0.06%)</title><rect x="993.9" y="2037" width="0.7" height="15.0" fill="rgb(206,136,23)" rx="2" ry="2" />
<text  x="996.93" y="2047.5" ></text>
</g>
<g >
<title>__asan::AsanChunk::UsedSize (2 samples, 0.01%)</title><rect x="984.0" y="2021" width="0.2" height="15.0" fill="rgb(250,81,8)" rx="2" ry="2" />
<text  x="987.01" y="2031.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::find_node_impl&lt;lczero::Position, TTranspositionTable::TPositionEqualFn&gt; (6 samples, 0.04%)</title><rect x="32.7" y="1829" width="0.4" height="15.0" fill="rgb(236,169,13)" rx="2" ry="2" />
<text  x="35.68" y="1839.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.01%)</title><rect x="980.1" y="1589" width="0.2" height="15.0" fill="rgb(250,157,39)" rx="2" ry="2" />
<text  x="983.13" y="1599.5" ></text>
</g>
<g >
<title>[unknown] (219 samples, 1.38%)</title><rect x="963.0" y="1461" width="16.3" height="15.0" fill="rgb(205,207,42)" rx="2" ry="2" />
<text  x="965.97" y="1471.5" ></text>
</g>
<g >
<title>__asan::GetCurrentThread (2 samples, 0.01%)</title><rect x="202.0" y="1829" width="0.2" height="15.0" fill="rgb(248,58,32)" rx="2" ry="2" />
<text  x="205.04" y="1839.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetRookAttacks (4 samples, 0.03%)</title><rect x="543.7" y="1749" width="0.3" height="15.0" fill="rgb(244,206,39)" rx="2" ry="2" />
<text  x="546.67" y="1759.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (21 samples, 0.13%)</title><rect x="514.1" y="1669" width="1.5" height="15.0" fill="rgb(241,221,10)" rx="2" ry="2" />
<text  x="517.05" y="1679.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::reserve (2 samples, 0.01%)</title><rect x="251.0" y="1813" width="0.1" height="15.0" fill="rgb(217,36,37)" rx="2" ry="2" />
<text  x="253.98" y="1823.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::~_Rb_tree (6 samples, 0.04%)</title><rect x="957.1" y="1893" width="0.4" height="15.0" fill="rgb(209,210,18)" rx="2" ry="2" />
<text  x="960.07" y="1903.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (2 samples, 0.01%)</title><rect x="295.7" y="1829" width="0.1" height="15.0" fill="rgb(251,153,17)" rx="2" ry="2" />
<text  x="298.67" y="1839.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetRookAttacks (41 samples, 0.26%)</title><rect x="779.7" y="1797" width="3.1" height="15.0" fill="rgb(236,183,13)" rx="2" ry="2" />
<text  x="782.73" y="1807.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::~_Rb_tree (3 samples, 0.02%)</title><rect x="531.3" y="1749" width="0.2" height="15.0" fill="rgb(210,214,48)" rx="2" ry="2" />
<text  x="534.29" y="1759.5" ></text>
</g>
<g >
<title>__asan_memcpy (2 samples, 0.01%)</title><rect x="91.7" y="1797" width="0.1" height="15.0" fill="rgb(250,0,34)" rx="2" ry="2" />
<text  x="94.70" y="1807.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (2 samples, 0.01%)</title><rect x="338.9" y="1781" width="0.2" height="15.0" fill="rgb(240,95,44)" rx="2" ry="2" />
<text  x="341.95" y="1791.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ApplyMove (2 samples, 0.01%)</title><rect x="953.7" y="1861" width="0.2" height="15.0" fill="rgb(238,141,18)" rx="2" ry="2" />
<text  x="956.72" y="1871.5" ></text>
</g>
<g >
<title>GetPieceType (5 samples, 0.03%)</title><rect x="99.2" y="1797" width="0.4" height="15.0" fill="rgb(243,1,20)" rx="2" ry="2" />
<text  x="102.23" y="1807.5" ></text>
</g>
<g >
<title>__asan_memcpy (2 samples, 0.01%)</title><rect x="172.6" y="1861" width="0.1" height="15.0" fill="rgb(208,165,10)" rx="2" ry="2" />
<text  x="175.57" y="1871.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.01%)</title><rect x="973.6" y="677" width="0.1" height="15.0" fill="rgb(211,120,53)" rx="2" ry="2" />
<text  x="976.56" y="687.5" ></text>
</g>
<g >
<title>[unknown] (79 samples, 0.50%)</title><rect x="16.0" y="2021" width="5.9" height="15.0" fill="rgb(206,192,44)" rx="2" ry="2" />
<text  x="18.97" y="2031.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (3 samples, 0.02%)</title><rect x="506.8" y="1685" width="0.2" height="15.0" fill="rgb(231,173,20)" rx="2" ry="2" />
<text  x="509.81" y="1695.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (2 samples, 0.01%)</title><rect x="319.0" y="1781" width="0.2" height="15.0" fill="rgb(206,229,35)" rx="2" ry="2" />
<text  x="322.03" y="1791.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (11 samples, 0.07%)</title><rect x="225.0" y="1861" width="0.8" height="15.0" fill="rgb(237,188,18)" rx="2" ry="2" />
<text  x="228.02" y="1871.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.01%)</title><rect x="979.3" y="1477" width="0.2" height="15.0" fill="rgb(239,176,42)" rx="2" ry="2" />
<text  x="982.31" y="1487.5" ></text>
</g>
<g >
<title>lczero::Position::Position (14 samples, 0.09%)</title><rect x="91.3" y="1813" width="1.1" height="15.0" fill="rgb(221,90,22)" rx="2" ry="2" />
<text  x="94.32" y="1823.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (59 samples, 0.37%)</title><rect x="958.6" y="2037" width="4.4" height="15.0" fill="rgb(252,120,52)" rx="2" ry="2" />
<text  x="961.57" y="2047.5" ></text>
</g>
<g >
<title>TTranspositionTable::Find (253 samples, 1.60%)</title><rect x="708.1" y="1829" width="18.9" height="15.0" fill="rgb(223,9,30)" rx="2" ry="2" />
<text  x="711.11" y="1839.5" ></text>
</g>
<g >
<title>__asan_memcpy (7 samples, 0.04%)</title><rect x="931.4" y="1845" width="0.5" height="15.0" fill="rgb(225,140,31)" rx="2" ry="2" />
<text  x="934.41" y="1855.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_get_insert_equal_pos (2 samples, 0.01%)</title><rect x="290.6" y="1909" width="0.1" height="15.0" fill="rgb(242,12,15)" rx="2" ry="2" />
<text  x="293.60" y="1919.5" ></text>
</g>
<g >
<title>__asan_memcpy (2 samples, 0.01%)</title><rect x="50.4" y="1813" width="0.1" height="15.0" fill="rgb(205,190,17)" rx="2" ry="2" />
<text  x="53.36" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (11 samples, 0.07%)</title><rect x="305.0" y="1797" width="0.8" height="15.0" fill="rgb(244,25,50)" rx="2" ry="2" />
<text  x="308.00" y="1807.5" ></text>
</g>
<g >
<title>lczero::BitBoard::get (3 samples, 0.02%)</title><rect x="104.4" y="1781" width="0.2" height="15.0" fill="rgb(253,22,23)" rx="2" ry="2" />
<text  x="107.38" y="1791.5" ></text>
</g>
<g >
<title>lczero::Position::Position (5 samples, 0.03%)</title><rect x="95.0" y="1797" width="0.4" height="15.0" fill="rgb(208,34,51)" rx="2" ry="2" />
<text  x="97.98" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (4 samples, 0.03%)</title><rect x="25.1" y="1893" width="0.3" height="15.0" fill="rgb(240,19,14)" rx="2" ry="2" />
<text  x="28.15" y="1903.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (31 samples, 0.20%)</title><rect x="256.9" y="1829" width="2.3" height="15.0" fill="rgb(212,36,45)" rx="2" ry="2" />
<text  x="259.88" y="1839.5" ></text>
</g>
<g >
<title>TSearchStrategy::Search (8,929 samples, 56.46%)</title><rect x="291.6" y="1925" width="666.1" height="15.0" fill="rgb(239,175,44)" rx="2" ry="2" />
<text  x="294.57" y="1935.5" >TSearchStrategy::Search</text>
</g>
<g >
<title>std::_Rb_tree_increment (10 samples, 0.06%)</title><rect x="951.3" y="1861" width="0.7" height="15.0" fill="rgb(214,15,0)" rx="2" ry="2" />
<text  x="954.25" y="1871.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (24 samples, 0.15%)</title><rect x="927.0" y="1797" width="1.8" height="15.0" fill="rgb(208,208,36)" rx="2" ry="2" />
<text  x="930.01" y="1807.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (12 samples, 0.08%)</title><rect x="525.0" y="1701" width="0.9" height="15.0" fill="rgb(241,35,8)" rx="2" ry="2" />
<text  x="528.02" y="1711.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.01%)</title><rect x="973.9" y="741" width="0.1" height="15.0" fill="rgb(216,215,14)" rx="2" ry="2" />
<text  x="976.86" y="751.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::Hash (27 samples, 0.17%)</title><rect x="313.5" y="1765" width="2.0" height="15.0" fill="rgb(215,205,9)" rx="2" ry="2" />
<text  x="316.51" y="1775.5" ></text>
</g>
<g >
<title>__asan_memcpy (3 samples, 0.02%)</title><rect x="344.5" y="1813" width="0.3" height="15.0" fill="rgb(212,202,22)" rx="2" ry="2" />
<text  x="347.54" y="1823.5" ></text>
</g>
<g >
<title>std::array&lt;int, 2ul&gt;::operator[] (10 samples, 0.06%)</title><rect x="43.3" y="1845" width="0.7" height="15.0" fill="rgb(223,79,9)" rx="2" ry="2" />
<text  x="46.28" y="1855.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::back (7 samples, 0.04%)</title><rect x="560.2" y="1749" width="0.6" height="15.0" fill="rgb(225,23,44)" rx="2" ry="2" />
<text  x="563.23" y="1759.5" ></text>
</g>
<g >
<title>__sanitizer::mem_is_zero (12 samples, 0.08%)</title><rect x="941.2" y="1813" width="0.9" height="15.0" fill="rgb(234,67,10)" rx="2" ry="2" />
<text  x="944.18" y="1823.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (2 samples, 0.01%)</title><rect x="516.9" y="1653" width="0.1" height="15.0" fill="rgb(217,184,3)" rx="2" ry="2" />
<text  x="519.89" y="1663.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (27 samples, 0.17%)</title><rect x="72.2" y="1797" width="2.0" height="15.0" fill="rgb(224,206,3)" rx="2" ry="2" />
<text  x="75.22" y="1807.5" ></text>
</g>
<g >
<title>CalcPSTScore (5 samples, 0.03%)</title><rect x="107.4" y="1765" width="0.3" height="15.0" fill="rgb(211,30,9)" rx="2" ry="2" />
<text  x="110.36" y="1775.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (59 samples, 0.37%)</title><rect x="561.3" y="1765" width="4.4" height="15.0" fill="rgb(217,39,5)" rx="2" ry="2" />
<text  x="564.28" y="1775.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (4 samples, 0.03%)</title><rect x="497.3" y="1717" width="0.3" height="15.0" fill="rgb(242,14,18)" rx="2" ry="2" />
<text  x="500.34" y="1727.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (321 samples, 2.03%)</title><rect x="627.3" y="1781" width="24.0" height="15.0" fill="rgb(243,178,17)" rx="2" ry="2" />
<text  x="630.31" y="1791.5" >s..</text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (29 samples, 0.18%)</title><rect x="321.0" y="1829" width="2.1" height="15.0" fill="rgb(232,2,34)" rx="2" ry="2" />
<text  x="323.97" y="1839.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (3 samples, 0.02%)</title><rect x="282.9" y="1845" width="0.2" height="15.0" fill="rgb(209,144,22)" rx="2" ry="2" />
<text  x="285.92" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateKingAttackInfo (3 samples, 0.02%)</title><rect x="918.8" y="1845" width="0.2" height="15.0" fill="rgb(205,32,8)" rx="2" ry="2" />
<text  x="921.80" y="1855.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (22 samples, 0.14%)</title><rect x="304.4" y="1813" width="1.6" height="15.0" fill="rgb(227,2,8)" rx="2" ry="2" />
<text  x="307.40" y="1823.5" ></text>
</g>
<g >
<title>TTranspositionTable::TPositionEqualFn::operator (12 samples, 0.08%)</title><rect x="915.7" y="1813" width="0.9" height="15.0" fill="rgb(218,108,29)" rx="2" ry="2" />
<text  x="918.74" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (4 samples, 0.03%)</title><rect x="109.5" y="1717" width="0.3" height="15.0" fill="rgb(217,192,45)" rx="2" ry="2" />
<text  x="112.45" y="1727.5" ></text>
</g>
<g >
<title>GetPieceValue (3 samples, 0.02%)</title><rect x="509.2" y="1685" width="0.2" height="15.0" fill="rgb(227,223,29)" rx="2" ry="2" />
<text  x="512.20" y="1695.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.01%)</title><rect x="972.3" y="469" width="0.1" height="15.0" fill="rgb(248,17,47)" rx="2" ry="2" />
<text  x="975.29" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (29 samples, 0.18%)</title><rect x="923.0" y="1829" width="2.1" height="15.0" fill="rgb(226,31,36)" rx="2" ry="2" />
<text  x="925.98" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (2 samples, 0.01%)</title><rect x="255.8" y="1781" width="0.1" height="15.0" fill="rgb(216,8,6)" rx="2" ry="2" />
<text  x="258.76" y="1791.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (13 samples, 0.08%)</title><rect x="70.5" y="1813" width="1.0" height="15.0" fill="rgb(253,187,24)" rx="2" ry="2" />
<text  x="73.51" y="1823.5" ></text>
</g>
<g >
<title>time_benchmark_invoker (8,940 samples, 56.53%)</title><rect x="291.6" y="2021" width="667.0" height="15.0" fill="rgb(209,164,49)" rx="2" ry="2" />
<text  x="294.57" y="2031.5" >time_benchmark_invoker</text>
</g>
<g >
<title>__asan::GetCurrentThreadStats (7 samples, 0.04%)</title><rect x="991.8" y="2037" width="0.5" height="15.0" fill="rgb(220,133,8)" rx="2" ry="2" />
<text  x="994.77" y="2047.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (5 samples, 0.03%)</title><rect x="247.1" y="1797" width="0.4" height="15.0" fill="rgb(209,39,36)" rx="2" ry="2" />
<text  x="250.10" y="1807.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::~_Rb_tree (3 samples, 0.02%)</title><rect x="147.7" y="1829" width="0.3" height="15.0" fill="rgb(251,13,17)" rx="2" ry="2" />
<text  x="150.73" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (16 samples, 0.10%)</title><rect x="257.6" y="1797" width="1.2" height="15.0" fill="rgb(225,192,38)" rx="2" ry="2" />
<text  x="260.62" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (22 samples, 0.14%)</title><rect x="281.6" y="1877" width="1.6" height="15.0" fill="rgb(205,122,21)" rx="2" ry="2" />
<text  x="284.57" y="1887.5" ></text>
</g>
<g >
<title>lczero::Position::Hash (3 samples, 0.02%)</title><rect x="915.5" y="1797" width="0.2" height="15.0" fill="rgb(240,118,53)" rx="2" ry="2" />
<text  x="918.52" y="1807.5" ></text>
</g>
<g >
<title>__asan_memcpy (2 samples, 0.01%)</title><rect x="497.6" y="1701" width="0.2" height="15.0" fill="rgb(237,3,23)" rx="2" ry="2" />
<text  x="500.64" y="1711.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.01%)</title><rect x="278.4" y="1829" width="0.2" height="15.0" fill="rgb(250,81,23)" rx="2" ry="2" />
<text  x="281.44" y="1839.5" ></text>
</g>
<g >
<title>lczero::Position::Position (3 samples, 0.02%)</title><rect x="305.8" y="1797" width="0.2" height="15.0" fill="rgb(251,148,54)" rx="2" ry="2" />
<text  x="308.82" y="1807.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (6 samples, 0.04%)</title><rect x="34.0" y="1845" width="0.5" height="15.0" fill="rgb(232,38,12)" rx="2" ry="2" />
<text  x="37.02" y="1855.5" ></text>
</g>
<g >
<title>lczero::Position::Position (2 samples, 0.01%)</title><rect x="108.6" y="1701" width="0.2" height="15.0" fill="rgb(220,191,32)" rx="2" ry="2" />
<text  x="111.63" y="1711.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (2 samples, 0.01%)</title><rect x="359.4" y="1813" width="0.1" height="15.0" fill="rgb(243,139,50)" rx="2" ry="2" />
<text  x="362.39" y="1823.5" ></text>
</g>
<g >
<title>__asan_memcpy (2 samples, 0.01%)</title><rect x="918.4" y="1861" width="0.2" height="15.0" fill="rgb(237,212,28)" rx="2" ry="2" />
<text  x="921.43" y="1871.5" ></text>
</g>
<g >
<title>lczero::Position::Hash (4 samples, 0.03%)</title><rect x="292.5" y="1813" width="0.3" height="15.0" fill="rgb(233,197,53)" rx="2" ry="2" />
<text  x="295.54" y="1823.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (57 samples, 0.36%)</title><rect x="142.0" y="1781" width="4.2" height="15.0" fill="rgb(209,138,5)" rx="2" ry="2" />
<text  x="144.98" y="1791.5" ></text>
</g>
<g >
<title>GetPieceType (2 samples, 0.01%)</title><rect x="243.3" y="1845" width="0.1" height="15.0" fill="rgb(222,215,26)" rx="2" ry="2" />
<text  x="246.30" y="1855.5" ></text>
</g>
<g >
<title>[unknown] (113 samples, 0.71%)</title><rect x="963.0" y="325" width="8.4" height="15.0" fill="rgb(233,7,42)" rx="2" ry="2" />
<text  x="965.97" y="335.5" ></text>
</g>
<g >
<title>[unknown] (43 samples, 0.27%)</title><rect x="21.9" y="2021" width="3.2" height="15.0" fill="rgb(210,117,13)" rx="2" ry="2" />
<text  x="24.86" y="2031.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::begin (2 samples, 0.01%)</title><rect x="95.6" y="1765" width="0.2" height="15.0" fill="rgb(226,128,38)" rx="2" ry="2" />
<text  x="98.65" y="1775.5" ></text>
</g>
<g >
<title>[unknown] (235 samples, 1.49%)</title><rect x="963.0" y="1685" width="17.5" height="15.0" fill="rgb(241,206,53)" rx="2" ry="2" />
<text  x="965.97" y="1695.5" ></text>
</g>
<g >
<title>lczero::Position::Position (10 samples, 0.06%)</title><rect x="491.2" y="1765" width="0.8" height="15.0" fill="rgb(229,201,46)" rx="2" ry="2" />
<text  x="494.22" y="1775.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetBishopAttacks (2 samples, 0.01%)</title><rect x="520.8" y="1685" width="0.1" height="15.0" fill="rgb(214,45,15)" rx="2" ry="2" />
<text  x="523.77" y="1695.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.01%)</title><rect x="977.5" y="1157" width="0.2" height="15.0" fill="rgb(226,201,10)" rx="2" ry="2" />
<text  x="980.52" y="1167.5" ></text>
</g>
<g >
<title>TTranspositionTable::TPositionEqualFn::operator (2 samples, 0.01%)</title><rect x="235.8" y="1829" width="0.1" height="15.0" fill="rgb(212,10,23)" rx="2" ry="2" />
<text  x="238.76" y="1839.5" ></text>
</g>
<g >
<title>std::multimap&lt;int, TSearchNode, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::emplace&lt;int&amp;, TSearchNode&gt; (2 samples, 0.01%)</title><rect x="218.5" y="1861" width="0.1" height="15.0" fill="rgb(244,176,40)" rx="2" ry="2" />
<text  x="221.45" y="1871.5" ></text>
</g>
<g >
<title>TTranspositionTable::Find (2 samples, 0.01%)</title><rect x="504.8" y="1733" width="0.1" height="15.0" fill="rgb(251,198,45)" rx="2" ry="2" />
<text  x="507.80" y="1743.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (2 samples, 0.01%)</title><rect x="229.3" y="1845" width="0.1" height="15.0" fill="rgb(254,210,28)" rx="2" ry="2" />
<text  x="232.27" y="1855.5" ></text>
</g>
<g >
<title>boost::unordered::unordered_map&lt;lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt; &gt;::find (6 samples, 0.04%)</title><rect x="269.4" y="1845" width="0.5" height="15.0" fill="rgb(234,176,31)" rx="2" ry="2" />
<text  x="272.41" y="1855.5" ></text>
</g>
<g >
<title>clock_gettime (4 samples, 0.03%)</title><rect x="1189.7" y="2053" width="0.3" height="15.0" fill="rgb(233,94,3)" rx="2" ry="2" />
<text  x="1192.70" y="2063.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::find_node_impl&lt;lczero::Position, TTranspositionTable::TPositionEqualFn&gt; (24 samples, 0.15%)</title><rect x="915.7" y="1829" width="1.8" height="15.0" fill="rgb(226,35,30)" rx="2" ry="2" />
<text  x="918.74" y="1839.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (3 samples, 0.02%)</title><rect x="221.1" y="1861" width="0.2" height="15.0" fill="rgb(250,101,43)" rx="2" ry="2" />
<text  x="224.07" y="1871.5" ></text>
</g>
<g >
<title>lczero::Position::Position (3 samples, 0.02%)</title><rect x="539.9" y="1765" width="0.3" height="15.0" fill="rgb(238,138,9)" rx="2" ry="2" />
<text  x="542.94" y="1775.5" ></text>
</g>
<g >
<title>lczero::BitBoard::get (12 samples, 0.08%)</title><rect x="61.9" y="1829" width="0.9" height="15.0" fill="rgb(207,135,26)" rx="2" ry="2" />
<text  x="64.93" y="1839.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::rehash_impl (9 samples, 0.06%)</title><rect x="869.3" y="1781" width="0.7" height="15.0" fill="rgb(214,180,20)" rx="2" ry="2" />
<text  x="872.33" y="1791.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (13 samples, 0.08%)</title><rect x="365.2" y="1797" width="1.0" height="15.0" fill="rgb(236,138,45)" rx="2" ry="2" />
<text  x="368.21" y="1807.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (4 samples, 0.03%)</title><rect x="256.4" y="1813" width="0.3" height="15.0" fill="rgb(211,167,19)" rx="2" ry="2" />
<text  x="259.36" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ChessBoard (2 samples, 0.01%)</title><rect x="277.5" y="1845" width="0.1" height="15.0" fill="rgb(224,195,9)" rx="2" ry="2" />
<text  x="280.47" y="1855.5" ></text>
</g>
<g >
<title>TSearchStrategy::Search (746 samples, 4.72%)</title><rect x="234.3" y="1909" width="55.7" height="15.0" fill="rgb(246,166,24)" rx="2" ry="2" />
<text  x="237.35" y="1919.5" >TSear..</text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_construct_node&lt;int&amp;, TSearchNode&gt; (2 samples, 0.01%)</title><rect x="566.4" y="1765" width="0.2" height="15.0" fill="rgb(226,6,5)" rx="2" ry="2" />
<text  x="569.43" y="1775.5" ></text>
</g>
<g >
<title>[unknown] (247 samples, 1.56%)</title><rect x="963.0" y="1749" width="18.4" height="15.0" fill="rgb(215,152,3)" rx="2" ry="2" />
<text  x="965.97" y="1759.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::find_node_impl&lt;lczero::Position, TTranspositionTable::TPositionEqualFn&gt; (230 samples, 1.45%)</title><rect x="709.8" y="1797" width="17.2" height="15.0" fill="rgb(251,79,42)" rx="2" ry="2" />
<text  x="712.82" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (2 samples, 0.01%)</title><rect x="64.3" y="1797" width="0.2" height="15.0" fill="rgb(236,192,30)" rx="2" ry="2" />
<text  x="67.31" y="1807.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (22 samples, 0.14%)</title><rect x="251.1" y="1829" width="1.7" height="15.0" fill="rgb(250,32,16)" rx="2" ry="2" />
<text  x="254.13" y="1839.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::~_Rb_tree (29 samples, 0.18%)</title><rect x="216.1" y="1861" width="2.2" height="15.0" fill="rgb(233,71,37)" rx="2" ry="2" />
<text  x="219.14" y="1871.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (58 samples, 0.37%)</title><rect x="265.1" y="1845" width="4.3" height="15.0" fill="rgb(240,144,20)" rx="2" ry="2" />
<text  x="268.08" y="1855.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (61 samples, 0.39%)</title><rect x="561.1" y="1781" width="4.6" height="15.0" fill="rgb(231,197,9)" rx="2" ry="2" />
<text  x="564.13" y="1791.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_get_insert_equal_pos (2 samples, 0.01%)</title><rect x="224.1" y="1861" width="0.2" height="15.0" fill="rgb(235,156,32)" rx="2" ry="2" />
<text  x="227.12" y="1871.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (2 samples, 0.01%)</title><rect x="323.1" y="1813" width="0.2" height="15.0" fill="rgb(231,201,52)" rx="2" ry="2" />
<text  x="326.13" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::operator== (54 samples, 0.34%)</title><rect x="710.1" y="1765" width="4.1" height="15.0" fill="rgb(246,129,26)" rx="2" ry="2" />
<text  x="713.12" y="1775.5" ></text>
</g>
<g >
<title>TTranspositionTable::Find (2 samples, 0.01%)</title><rect x="291.6" y="1893" width="0.2" height="15.0" fill="rgb(239,36,51)" rx="2" ry="2" />
<text  x="294.65" y="1903.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.01%)</title><rect x="975.7" y="965" width="0.1" height="15.0" fill="rgb(240,104,49)" rx="2" ry="2" />
<text  x="978.65" y="975.5" ></text>
</g>
<g >
<title>TSearchStrategy::CalcMoveOrder (22 samples, 0.14%)</title><rect x="27.4" y="1893" width="1.6" height="15.0" fill="rgb(229,27,27)" rx="2" ry="2" />
<text  x="30.38" y="1903.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetRookAttacks (2 samples, 0.01%)</title><rect x="464.4" y="1765" width="0.2" height="15.0" fill="rgb(247,55,48)" rx="2" ry="2" />
<text  x="467.44" y="1775.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (14 samples, 0.09%)</title><rect x="114.9" y="1749" width="1.0" height="15.0" fill="rgb(212,210,7)" rx="2" ry="2" />
<text  x="117.90" y="1759.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (2 samples, 0.01%)</title><rect x="236.4" y="1877" width="0.1" height="15.0" fill="rgb(249,65,45)" rx="2" ry="2" />
<text  x="239.36" y="1887.5" ></text>
</g>
<g >
<title>boost::unordered::unordered_map&lt;lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt; &gt;::find (85 samples, 0.54%)</title><rect x="344.8" y="1813" width="6.3" height="15.0" fill="rgb(250,81,1)" rx="2" ry="2" />
<text  x="347.77" y="1823.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (2 samples, 0.01%)</title><rect x="289.9" y="1877" width="0.1" height="15.0" fill="rgb(215,44,38)" rx="2" ry="2" />
<text  x="292.85" y="1887.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (9 samples, 0.06%)</title><rect x="115.3" y="1733" width="0.6" height="15.0" fill="rgb(207,153,29)" rx="2" ry="2" />
<text  x="118.27" y="1743.5" ></text>
</g>
<g >
<title>[unknown] (214 samples, 1.35%)</title><rect x="963.0" y="1397" width="15.9" height="15.0" fill="rgb(206,189,25)" rx="2" ry="2" />
<text  x="965.97" y="1407.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (580 samples, 3.67%)</title><rect x="657.5" y="1781" width="43.3" height="15.0" fill="rgb(228,64,38)" rx="2" ry="2" />
<text  x="660.52" y="1791.5" >std:..</text>
</g>
<g >
<title>EvaluateCaptureSEE (10 samples, 0.06%)</title><rect x="104.8" y="1797" width="0.7" height="15.0" fill="rgb(241,153,37)" rx="2" ry="2" />
<text  x="107.75" y="1807.5" ></text>
</g>
<g >
<title>CalcPSTScore (14 samples, 0.09%)</title><rect x="317.8" y="1845" width="1.0" height="15.0" fill="rgb(241,210,22)" rx="2" ry="2" />
<text  x="320.76" y="1855.5" ></text>
</g>
<g >
<title>[unknown] (120 samples, 0.76%)</title><rect x="963.0" y="405" width="8.9" height="15.0" fill="rgb(207,195,33)" rx="2" ry="2" />
<text  x="965.97" y="415.5" ></text>
</g>
<g >
<title>IsTerminal (2 samples, 0.01%)</title><rect x="107.1" y="1781" width="0.1" height="15.0" fill="rgb(235,154,7)" rx="2" ry="2" />
<text  x="110.06" y="1791.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.01%)</title><rect x="972.7" y="533" width="0.2" height="15.0" fill="rgb(226,167,50)" rx="2" ry="2" />
<text  x="975.74" y="543.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_emplace_equal&lt;int&amp;, TSearchNode&gt; (4 samples, 0.03%)</title><rect x="290.3" y="1909" width="0.3" height="15.0" fill="rgb(218,220,6)" rx="2" ry="2" />
<text  x="293.30" y="1919.5" ></text>
</g>
<g >
<title>lczero::Position::Position (9 samples, 0.06%)</title><rect x="490.3" y="1749" width="0.7" height="15.0" fill="rgb(216,200,3)" rx="2" ry="2" />
<text  x="493.33" y="1759.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (16 samples, 0.10%)</title><rect x="357.2" y="1765" width="1.1" height="15.0" fill="rgb(249,33,12)" rx="2" ry="2" />
<text  x="360.15" y="1775.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (2 samples, 0.01%)</title><rect x="280.4" y="1845" width="0.1" height="15.0" fill="rgb(239,49,17)" rx="2" ry="2" />
<text  x="283.38" y="1855.5" ></text>
</g>
<g >
<title>std::array&lt;std::array&lt;int, 64ul&gt;, 6ul&gt;::at (3 samples, 0.02%)</title><rect x="343.1" y="1813" width="0.2" height="15.0" fill="rgb(218,178,4)" rx="2" ry="2" />
<text  x="346.05" y="1823.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (2 samples, 0.01%)</title><rect x="570.8" y="1813" width="0.2" height="15.0" fill="rgb(245,29,54)" rx="2" ry="2" />
<text  x="573.83" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (3 samples, 0.02%)</title><rect x="509.4" y="1685" width="0.2" height="15.0" fill="rgb(206,50,34)" rx="2" ry="2" />
<text  x="512.43" y="1695.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::hash (4 samples, 0.03%)</title><rect x="235.4" y="1829" width="0.3" height="15.0" fill="rgb(249,78,12)" rx="2" ry="2" />
<text  x="238.39" y="1839.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (75 samples, 0.47%)</title><rect x="162.6" y="1829" width="5.6" height="15.0" fill="rgb(234,180,43)" rx="2" ry="2" />
<text  x="165.65" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (91 samples, 0.58%)</title><rect x="117.5" y="1797" width="6.8" height="15.0" fill="rgb(233,201,20)" rx="2" ry="2" />
<text  x="120.51" y="1807.5" ></text>
</g>
<g >
<title>[unknown] (106 samples, 0.67%)</title><rect x="963.0" y="213" width="7.9" height="15.0" fill="rgb(227,137,10)" rx="2" ry="2" />
<text  x="965.97" y="223.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsUnderAttack (9 samples, 0.06%)</title><rect x="180.1" y="1829" width="0.7" height="15.0" fill="rgb(236,7,53)" rx="2" ry="2" />
<text  x="183.11" y="1839.5" ></text>
</g>
<g >
<title>TTranspositionTable::Find (2 samples, 0.01%)</title><rect x="233.9" y="1893" width="0.1" height="15.0" fill="rgb(236,57,45)" rx="2" ry="2" />
<text  x="236.90" y="1903.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetBishopAttacks (18 samples, 0.11%)</title><rect x="618.7" y="1781" width="1.3" height="15.0" fill="rgb(237,77,54)" rx="2" ry="2" />
<text  x="621.65" y="1791.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (407 samples, 2.57%)</title><rect x="501.2" y="1765" width="30.4" height="15.0" fill="rgb(245,115,42)" rx="2" ry="2" />
<text  x="504.22" y="1775.5" >TS..</text>
</g>
<g >
<title>THistoryHeuristics::Get (10 samples, 0.06%)</title><rect x="310.0" y="1845" width="0.7" height="15.0" fill="rgb(219,20,30)" rx="2" ry="2" />
<text  x="313.00" y="1855.5" ></text>
</g>
<g >
<title>TSearchStrategy::CalcMoveOrder (10 samples, 0.06%)</title><rect x="504.2" y="1749" width="0.7" height="15.0" fill="rgb(250,144,34)" rx="2" ry="2" />
<text  x="507.20" y="1759.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.01%)</title><rect x="971.2" y="293" width="0.1" height="15.0" fill="rgb(241,106,13)" rx="2" ry="2" />
<text  x="974.17" y="303.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::Mirror (3 samples, 0.02%)</title><rect x="479.8" y="1733" width="0.2" height="15.0" fill="rgb(227,165,12)" rx="2" ry="2" />
<text  x="482.81" y="1743.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (2 samples, 0.01%)</title><rect x="319.7" y="1813" width="0.1" height="15.0" fill="rgb(230,99,26)" rx="2" ry="2" />
<text  x="322.70" y="1823.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_begin (2 samples, 0.01%)</title><rect x="906.9" y="1813" width="0.1" height="15.0" fill="rgb(221,138,27)" rx="2" ry="2" />
<text  x="909.86" y="1823.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (3 samples, 0.02%)</title><rect x="106.8" y="1765" width="0.2" height="15.0" fill="rgb(246,116,8)" rx="2" ry="2" />
<text  x="109.77" y="1775.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (3 samples, 0.02%)</title><rect x="65.9" y="1845" width="0.2" height="15.0" fill="rgb(249,228,37)" rx="2" ry="2" />
<text  x="68.88" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (6 samples, 0.04%)</title><rect x="109.9" y="1733" width="0.4" height="15.0" fill="rgb(254,163,6)" rx="2" ry="2" />
<text  x="112.90" y="1743.5" ></text>
</g>
<g >
<title>TTranspositionTable::Insert (20 samples, 0.13%)</title><rect x="868.7" y="1845" width="1.5" height="15.0" fill="rgb(235,198,51)" rx="2" ry="2" />
<text  x="871.74" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsUnderAttack (2 samples, 0.01%)</title><rect x="112.1" y="1749" width="0.2" height="15.0" fill="rgb(222,14,0)" rx="2" ry="2" />
<text  x="115.14" y="1759.5" ></text>
</g>
<g >
<title>IsCapture (2 samples, 0.01%)</title><rect x="492.0" y="1781" width="0.1" height="15.0" fill="rgb(245,102,0)" rx="2" ry="2" />
<text  x="494.97" y="1791.5" ></text>
</g>
<g >
<title>[unknown] (198 samples, 1.25%)</title><rect x="963.0" y="1189" width="14.7" height="15.0" fill="rgb(223,130,2)" rx="2" ry="2" />
<text  x="965.97" y="1199.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::back (8 samples, 0.05%)</title><rect x="123.3" y="1765" width="0.6" height="15.0" fill="rgb(213,102,23)" rx="2" ry="2" />
<text  x="126.25" y="1775.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (4 samples, 0.03%)</title><rect x="312.1" y="1829" width="0.3" height="15.0" fill="rgb(219,217,24)" rx="2" ry="2" />
<text  x="315.09" y="1839.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_create_node&lt;int&amp;, TSearchNode&gt; (3 samples, 0.02%)</title><rect x="566.4" y="1781" width="0.2" height="15.0" fill="rgb(226,217,4)" rx="2" ry="2" />
<text  x="569.35" y="1791.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetRookAttacks (2 samples, 0.01%)</title><rect x="266.1" y="1813" width="0.1" height="15.0" fill="rgb(207,75,17)" rx="2" ry="2" />
<text  x="269.05" y="1823.5" ></text>
</g>
<g >
<title>boost::unordered::unordered_map&lt;lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt; &gt;::find (7 samples, 0.04%)</title><rect x="28.5" y="1861" width="0.5" height="15.0" fill="rgb(242,115,52)" rx="2" ry="2" />
<text  x="31.50" y="1871.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ApplyMove (4 samples, 0.03%)</title><rect x="228.2" y="1877" width="0.3" height="15.0" fill="rgb(221,6,16)" rx="2" ry="2" />
<text  x="231.23" y="1887.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (19 samples, 0.12%)</title><rect x="88.0" y="1797" width="1.4" height="15.0" fill="rgb(215,174,44)" rx="2" ry="2" />
<text  x="90.97" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ChessBoard (2 samples, 0.01%)</title><rect x="339.4" y="1781" width="0.1" height="15.0" fill="rgb(215,27,31)" rx="2" ry="2" />
<text  x="342.39" y="1791.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::find_node_impl&lt;lczero::Position, TTranspositionTable::TPositionEqualFn&gt; (2 samples, 0.01%)</title><rect x="510.8" y="1669" width="0.2" height="15.0" fill="rgb(245,115,20)" rx="2" ry="2" />
<text  x="513.84" y="1679.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (21 samples, 0.13%)</title><rect x="478.5" y="1765" width="1.5" height="15.0" fill="rgb(242,168,54)" rx="2" ry="2" />
<text  x="481.46" y="1775.5" ></text>
</g>
<g >
<title>GetPieceType (2 samples, 0.01%)</title><rect x="89.4" y="1797" width="0.1" height="15.0" fill="rgb(216,218,23)" rx="2" ry="2" />
<text  x="92.38" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (88 samples, 0.56%)</title><rect x="871.4" y="1829" width="6.6" height="15.0" fill="rgb(224,208,30)" rx="2" ry="2" />
<text  x="874.42" y="1839.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetRookAttacks (4 samples, 0.03%)</title><rect x="135.9" y="1797" width="0.3" height="15.0" fill="rgb(206,85,30)" rx="2" ry="2" />
<text  x="138.94" y="1807.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (2 samples, 0.01%)</title><rect x="295.7" y="1813" width="0.1" height="15.0" fill="rgb(235,42,51)" rx="2" ry="2" />
<text  x="298.67" y="1823.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_create_node&lt;int&amp;, TSearchNode&gt; (7 samples, 0.04%)</title><rect x="954.0" y="1861" width="0.5" height="15.0" fill="rgb(213,55,7)" rx="2" ry="2" />
<text  x="957.01" y="1871.5" ></text>
</g>
<g >
<title>CalcPSTScore (607 samples, 3.84%)</title><rect x="417.7" y="1813" width="45.3" height="15.0" fill="rgb(250,63,26)" rx="2" ry="2" />
<text  x="420.73" y="1823.5" >Calc..</text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetRookAttacks (2 samples, 0.01%)</title><rect x="70.4" y="1797" width="0.1" height="15.0" fill="rgb(245,77,29)" rx="2" ry="2" />
<text  x="73.36" y="1807.5" ></text>
</g>
<g >
<title>THistoryHeuristics::GetCounterMove (4 samples, 0.03%)</title><rect x="294.8" y="1861" width="0.3" height="15.0" fill="rgb(228,179,10)" rx="2" ry="2" />
<text  x="297.78" y="1871.5" ></text>
</g>
<g >
<title>alpha_beta_invoker (8 samples, 0.05%)</title><rect x="25.1" y="2021" width="0.6" height="15.0" fill="rgb(220,81,36)" rx="2" ry="2" />
<text  x="28.07" y="2031.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (16 samples, 0.10%)</title><rect x="529.9" y="1717" width="1.2" height="15.0" fill="rgb(226,72,2)" rx="2" ry="2" />
<text  x="532.87" y="1727.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.03%)</title><rect x="912.8" y="1797" width="0.3" height="15.0" fill="rgb(210,8,50)" rx="2" ry="2" />
<text  x="915.76" y="1807.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (12 samples, 0.08%)</title><rect x="219.9" y="1861" width="0.9" height="15.0" fill="rgb(236,212,0)" rx="2" ry="2" />
<text  x="222.87" y="1871.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (42 samples, 0.27%)</title><rect x="259.7" y="1813" width="3.1" height="15.0" fill="rgb(210,49,10)" rx="2" ry="2" />
<text  x="262.71" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ApplyMove (59 samples, 0.37%)</title><rect x="886.8" y="1829" width="4.4" height="15.0" fill="rgb(224,120,23)" rx="2" ry="2" />
<text  x="889.79" y="1839.5" ></text>
</g>
<g >
<title>lczero::BitBoard::get (2 samples, 0.01%)</title><rect x="106.5" y="1765" width="0.1" height="15.0" fill="rgb(226,65,45)" rx="2" ry="2" />
<text  x="109.47" y="1775.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (13 samples, 0.08%)</title><rect x="352.9" y="1813" width="1.0" height="15.0" fill="rgb(209,23,37)" rx="2" ry="2" />
<text  x="355.90" y="1823.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.01%)</title><rect x="976.3" y="1045" width="0.2" height="15.0" fill="rgb(241,88,0)" rx="2" ry="2" />
<text  x="979.32" y="1055.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (3,914 samples, 24.75%)</title><rect x="416.1" y="1829" width="292.0" height="15.0" fill="rgb(223,145,10)" rx="2" ry="2" />
<text  x="419.09" y="1839.5" >TSearchStrategy::QuiescenceSearch</text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (14 samples, 0.09%)</title><rect x="249.9" y="1813" width="1.0" height="15.0" fill="rgb(250,156,45)" rx="2" ry="2" />
<text  x="252.86" y="1823.5" ></text>
</g>
<g >
<title>__asan::Allocator::Deallocate (2 samples, 0.01%)</title><rect x="727.2" y="1829" width="0.2" height="15.0" fill="rgb(253,103,8)" rx="2" ry="2" />
<text  x="730.21" y="1839.5" ></text>
</g>
<g >
<title>[unknown] (156 samples, 0.99%)</title><rect x="1007.4" y="2021" width="11.7" height="15.0" fill="rgb(240,55,30)" rx="2" ry="2" />
<text  x="1010.43" y="2031.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (7 samples, 0.04%)</title><rect x="323.4" y="1797" width="0.5" height="15.0" fill="rgb(233,143,47)" rx="2" ry="2" />
<text  x="326.35" y="1807.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (3 samples, 0.02%)</title><rect x="955.6" y="1845" width="0.2" height="15.0" fill="rgb(209,57,54)" rx="2" ry="2" />
<text  x="958.58" y="1855.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ApplyMove (3 samples, 0.02%)</title><rect x="491.7" y="1749" width="0.2" height="15.0" fill="rgb(215,69,17)" rx="2" ry="2" />
<text  x="494.67" y="1759.5" ></text>
</g>
<g >
<title>std::array&lt;std::array&lt;int, 64ul&gt;, 6ul&gt;::at (2 samples, 0.01%)</title><rect x="310.5" y="1829" width="0.2" height="15.0" fill="rgb(233,157,27)" rx="2" ry="2" />
<text  x="313.52" y="1839.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (3 samples, 0.02%)</title><rect x="975.2" y="933" width="0.2" height="15.0" fill="rgb(239,87,31)" rx="2" ry="2" />
<text  x="978.20" y="943.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (3 samples, 0.02%)</title><rect x="320.1" y="1781" width="0.2" height="15.0" fill="rgb(225,88,31)" rx="2" ry="2" />
<text  x="323.07" y="1791.5" ></text>
</g>
<g >
<title>boost::unordered::unordered_map&lt;lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn, std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt; &gt;::find (2 samples, 0.01%)</title><rect x="504.8" y="1717" width="0.1" height="15.0" fill="rgb(224,180,42)" rx="2" ry="2" />
<text  x="507.80" y="1727.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (2 samples, 0.01%)</title><rect x="294.3" y="1813" width="0.2" height="15.0" fill="rgb(225,195,29)" rx="2" ry="2" />
<text  x="297.33" y="1823.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (19 samples, 0.12%)</title><rect x="913.1" y="1797" width="1.4" height="15.0" fill="rgb(215,124,24)" rx="2" ry="2" />
<text  x="916.13" y="1807.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::begin (5 samples, 0.03%)</title><rect x="493.6" y="1717" width="0.4" height="15.0" fill="rgb(251,215,50)" rx="2" ry="2" />
<text  x="496.61" y="1727.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::back (3 samples, 0.02%)</title><rect x="262.5" y="1781" width="0.2" height="15.0" fill="rgb(212,18,44)" rx="2" ry="2" />
<text  x="265.47" y="1791.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetBishopAttacks (2 samples, 0.01%)</title><rect x="922.4" y="1829" width="0.1" height="15.0" fill="rgb(208,14,1)" rx="2" ry="2" />
<text  x="925.38" y="1839.5" ></text>
</g>
<g >
<title>[unknown] (102 samples, 0.64%)</title><rect x="963.0" y="181" width="7.6" height="15.0" fill="rgb(220,124,6)" rx="2" ry="2" />
<text  x="965.97" y="191.5" ></text>
</g>
<g >
<title>TSearchStrategy::Search (8,878 samples, 56.13%)</title><rect x="293.4" y="1893" width="662.4" height="15.0" fill="rgb(214,40,33)" rx="2" ry="2" />
<text  x="296.44" y="1903.5" >TSearchStrategy::Search</text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::begin (2 samples, 0.01%)</title><rect x="172.3" y="1813" width="0.1" height="15.0" fill="rgb(253,100,40)" rx="2" ry="2" />
<text  x="175.27" y="1823.5" ></text>
</g>
<g >
<title>IsTerminal (2 samples, 0.01%)</title><rect x="301.1" y="1861" width="0.2" height="15.0" fill="rgb(225,32,54)" rx="2" ry="2" />
<text  x="304.12" y="1871.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ApplyMove (3 samples, 0.02%)</title><rect x="91.8" y="1797" width="0.3" height="15.0" fill="rgb(215,46,18)" rx="2" ry="2" />
<text  x="94.84" y="1807.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (2 samples, 0.01%)</title><rect x="883.1" y="1829" width="0.1" height="15.0" fill="rgb(251,137,33)" rx="2" ry="2" />
<text  x="886.06" y="1839.5" ></text>
</g>
<g >
<title>TSearchStrategy::CalcMoveOrder (2 samples, 0.01%)</title><rect x="233.9" y="1909" width="0.1" height="15.0" fill="rgb(222,110,47)" rx="2" ry="2" />
<text  x="236.90" y="1919.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (10 samples, 0.06%)</title><rect x="817.5" y="1781" width="0.7" height="15.0" fill="rgb(242,124,45)" rx="2" ry="2" />
<text  x="820.48" y="1791.5" ></text>
</g>
<g >
<title>GetPieceType (6 samples, 0.04%)</title><rect x="50.8" y="1845" width="0.5" height="15.0" fill="rgb(221,58,53)" rx="2" ry="2" />
<text  x="53.81" y="1855.5" ></text>
</g>
<g >
<title>__asan::AsanChunk::UsedSize (21 samples, 0.13%)</title><rect x="989.5" y="2037" width="1.6" height="15.0" fill="rgb(209,106,25)" rx="2" ry="2" />
<text  x="992.53" y="2047.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (2 samples, 0.01%)</title><rect x="25.2" y="1877" width="0.2" height="15.0" fill="rgb(251,36,54)" rx="2" ry="2" />
<text  x="28.22" y="1887.5" ></text>
</g>
<g >
<title>lczero::BitBoard::get (6 samples, 0.04%)</title><rect x="487.9" y="1765" width="0.4" height="15.0" fill="rgb(244,121,37)" rx="2" ry="2" />
<text  x="490.86" y="1775.5" ></text>
</g>
<g >
<title>lczero::Position::Position (11 samples, 0.07%)</title><rect x="498.7" y="1749" width="0.8" height="15.0" fill="rgb(247,102,5)" rx="2" ry="2" />
<text  x="501.68" y="1759.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (2 samples, 0.01%)</title><rect x="514.5" y="1589" width="0.1" height="15.0" fill="rgb(226,34,39)" rx="2" ry="2" />
<text  x="517.50" y="1599.5" ></text>
</g>
<g >
<title>lczero::BitBoard::get (2 samples, 0.01%)</title><rect x="352.5" y="1813" width="0.2" height="15.0" fill="rgb(228,61,2)" rx="2" ry="2" />
<text  x="355.53" y="1823.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::hash (2 samples, 0.01%)</title><rect x="28.5" y="1829" width="0.2" height="15.0" fill="rgb(244,103,42)" rx="2" ry="2" />
<text  x="31.50" y="1839.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GenerateLegalMoves (65 samples, 0.41%)</title><rect x="259.5" y="1829" width="4.8" height="15.0" fill="rgb(229,132,41)" rx="2" ry="2" />
<text  x="262.49" y="1839.5" ></text>
</g>
<g >
<title>boost::unordered::detail::table&lt;boost::unordered::detail::map&lt;std::allocator&lt;std::pair&lt;lczero::Position const, TTranspositionTable::TNode&gt; &gt;, lczero::Position, TTranspositionTable::TNode, TTranspositionTable::TPositionHasher, TTranspositionTable::TPositionEqualFn&gt; &gt;::find_node_impl&lt;lczero::Position, TTranspositionTable::TPositionEqualFn&gt; (5 samples, 0.03%)</title><rect x="103.0" y="1765" width="0.3" height="15.0" fill="rgb(232,32,46)" rx="2" ry="2" />
<text  x="105.96" y="1775.5" ></text>
</g>
<g >
<title>std::array&lt;int, 2ul&gt;::operator[] (5 samples, 0.03%)</title><rect x="496.7" y="1749" width="0.3" height="15.0" fill="rgb(222,85,33)" rx="2" ry="2" />
<text  x="499.67" y="1759.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GetSmallestAttacker (3 samples, 0.02%)</title><rect x="353.2" y="1781" width="0.2" height="15.0" fill="rgb(216,32,4)" rx="2" ry="2" />
<text  x="356.20" y="1791.5" ></text>
</g>
<g >
<title>TSearchStrategy::Search (2,744 samples, 17.35%)</title><rect x="26.9" y="1909" width="204.7" height="15.0" fill="rgb(241,201,52)" rx="2" ry="2" />
<text  x="29.86" y="1919.5" >TSearchStrategy::Search</text>
</g>
<g >
<title>GetPieceType (110 samples, 0.70%)</title><rect x="389.2" y="1813" width="8.2" height="15.0" fill="rgb(216,229,3)" rx="2" ry="2" />
<text  x="392.16" y="1823.5" ></text>
</g>
<g >
<title>TSearchStrategy::CalcMoveOrder (15 samples, 0.09%)</title><rect x="506.7" y="1733" width="1.2" height="15.0" fill="rgb(228,80,5)" rx="2" ry="2" />
<text  x="509.74" y="1743.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (4 samples, 0.03%)</title><rect x="320.0" y="1797" width="0.3" height="15.0" fill="rgb(215,190,20)" rx="2" ry="2" />
<text  x="323.00" y="1807.5" ></text>
</g>
<g >
<title>[unknown] (208 samples, 1.32%)</title><rect x="963.0" y="1333" width="15.5" height="15.0" fill="rgb(228,198,15)" rx="2" ry="2" />
<text  x="965.97" y="1343.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::IsLegalMove (2 samples, 0.01%)</title><rect x="925.4" y="1813" width="0.2" height="15.0" fill="rgb(232,225,33)" rx="2" ry="2" />
<text  x="928.44" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (2 samples, 0.01%)</title><rect x="320.4" y="1797" width="0.2" height="15.0" fill="rgb(208,209,42)" rx="2" ry="2" />
<text  x="323.44" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::Hash (2 samples, 0.01%)</title><rect x="292.7" y="1797" width="0.1" height="15.0" fill="rgb(219,69,25)" rx="2" ry="2" />
<text  x="295.69" y="1807.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::ApplyMove (2 samples, 0.01%)</title><rect x="89.2" y="1765" width="0.1" height="15.0" fill="rgb(233,4,48)" rx="2" ry="2" />
<text  x="92.16" y="1775.5" ></text>
</g>
<g >
<title>GetPieceValue (3 samples, 0.02%)</title><rect x="467.3" y="1797" width="0.3" height="15.0" fill="rgb(247,139,14)" rx="2" ry="2" />
<text  x="470.35" y="1807.5" ></text>
</g>
<g >
<title>__asan::PoisonShadow (12 samples, 0.08%)</title><rect x="992.3" y="2037" width="0.9" height="15.0" fill="rgb(252,101,11)" rx="2" ry="2" />
<text  x="995.29" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (266 samples, 1.68%)</title><rect x="963.0" y="1941" width="19.8" height="15.0" fill="rgb(240,161,43)" rx="2" ry="2" />
<text  x="965.97" y="1951.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::GeneratePseudolegalMoves (64 samples, 0.40%)</title><rect x="67.0" y="1829" width="4.8" height="15.0" fill="rgb(216,9,7)" rx="2" ry="2" />
<text  x="70.00" y="1839.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::~_Rb_tree (40 samples, 0.25%)</title><rect x="911.6" y="1845" width="2.9" height="15.0" fill="rgb(240,121,11)" rx="2" ry="2" />
<text  x="914.56" y="1855.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (11 samples, 0.07%)</title><rect x="526.3" y="1685" width="0.8" height="15.0" fill="rgb(254,152,37)" rx="2" ry="2" />
<text  x="529.29" y="1695.5" ></text>
</g>
<g >
<title>std::array&lt;int, 2ul&gt;::operator[] (9 samples, 0.06%)</title><rect x="706.6" y="1813" width="0.7" height="15.0" fill="rgb(206,91,29)" rx="2" ry="2" />
<text  x="709.61" y="1823.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::emplace_back&lt;lczero::BoardSquare&amp;, lczero::BoardSquare const&amp;&gt; (11 samples, 0.07%)</title><rect x="273.1" y="1829" width="0.9" height="15.0" fill="rgb(231,163,34)" rx="2" ry="2" />
<text  x="276.14" y="1839.5" ></text>
</g>
<g >
<title>[unknown] (201 samples, 1.27%)</title><rect x="963.0" y="1253" width="15.0" height="15.0" fill="rgb(251,56,12)" rx="2" ry="2" />
<text  x="965.97" y="1263.5" ></text>
</g>
<g >
<title>lczero::(anonymous namespace)::GetRookAttacks (3 samples, 0.02%)</title><rect x="466.3" y="1765" width="0.2" height="15.0" fill="rgb(215,114,45)" rx="2" ry="2" />
<text  x="469.30" y="1775.5" ></text>
</g>
<g >
<title>TSearchStrategy::MakeMove (8,932 samples, 56.47%)</title><rect x="291.6" y="1973" width="666.4" height="15.0" fill="rgb(252,145,38)" rx="2" ry="2" />
<text  x="294.57" y="1983.5" >TSearchStrategy::MakeMove</text>
</g>
<g >
<title>lczero::BitBoard::get (10 samples, 0.06%)</title><rect x="495.9" y="1749" width="0.8" height="15.0" fill="rgb(249,80,25)" rx="2" ry="2" />
<text  x="498.92" y="1759.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (4 samples, 0.03%)</title><rect x="511.8" y="1701" width="0.3" height="15.0" fill="rgb(251,217,50)" rx="2" ry="2" />
<text  x="514.81" y="1711.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.03%)</title><rect x="283.8" y="1845" width="0.4" height="15.0" fill="rgb(214,101,1)" rx="2" ry="2" />
<text  x="286.81" y="1855.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (18 samples, 0.11%)</title><rect x="529.7" y="1733" width="1.4" height="15.0" fill="rgb(244,156,3)" rx="2" ry="2" />
<text  x="532.72" y="1743.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (8 samples, 0.05%)</title><rect x="504.2" y="1733" width="0.6" height="15.0" fill="rgb(252,107,11)" rx="2" ry="2" />
<text  x="507.20" y="1743.5" ></text>
</g>
<g >
<title>[unknown] (124 samples, 0.78%)</title><rect x="1020.1" y="2021" width="9.3" height="15.0" fill="rgb(222,7,47)" rx="2" ry="2" />
<text  x="1023.12" y="2031.5" ></text>
</g>
<g >
<title>EvaluateStaticExchange (2 samples, 0.01%)</title><rect x="31.3" y="1829" width="0.2" height="15.0" fill="rgb(239,89,43)" rx="2" ry="2" />
<text  x="34.34" y="1839.5" ></text>
</g>
<g >
<title>IsCapture (6 samples, 0.04%)</title><rect x="342.0" y="1829" width="0.5" height="15.0" fill="rgb(236,152,8)" rx="2" ry="2" />
<text  x="345.01" y="1839.5" ></text>
</g>
<g >
<title>TSearchStrategy::Search (2,632 samples, 16.64%)</title><rect x="29.7" y="1893" width="196.4" height="15.0" fill="rgb(210,6,18)" rx="2" ry="2" />
<text  x="32.70" y="1903.5" >TSearchStrategy::Search</text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::erase (3 samples, 0.02%)</title><rect x="883.2" y="1829" width="0.2" height="15.0" fill="rgb(254,176,12)" rx="2" ry="2" />
<text  x="886.21" y="1839.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (2 samples, 0.01%)</title><rect x="105.6" y="1781" width="0.2" height="15.0" fill="rgb(215,209,17)" rx="2" ry="2" />
<text  x="108.65" y="1791.5" ></text>
</g>
<g >
<title>TSearchStrategy::QuiescenceSearch (2 samples, 0.01%)</title><rect x="239.0" y="1845" width="0.1" height="15.0" fill="rgb(227,188,8)" rx="2" ry="2" />
<text  x="241.97" y="1855.5" ></text>
</g>
<g >
<title>std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt;::_M_erase (2 samples, 0.01%)</title><rect x="146.6" y="1797" width="0.2" height="15.0" fill="rgb(228,80,38)" rx="2" ry="2" />
<text  x="149.61" y="1807.5" ></text>
</g>
<g >
<title>CalcPSTScore (16 samples, 0.10%)</title><rect x="254.6" y="1829" width="1.2" height="15.0" fill="rgb(208,162,51)" rx="2" ry="2" />
<text  x="257.56" y="1839.5" ></text>
</g>
<g >
<title>lczero::BitBoard::get (2 samples, 0.01%)</title><rect x="257.2" y="1797" width="0.1" height="15.0" fill="rgb(209,48,40)" rx="2" ry="2" />
<text  x="260.18" y="1807.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;lczero::Move*, std::vector&lt;lczero::Move, std::allocator&lt;lczero::Move&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;lczero::ChessBoard::GenerateLegalMoves (18 samples, 0.11%)</title><rect x="521.6" y="1685" width="1.3" height="15.0" fill="rgb(226,44,30)" rx="2" ry="2" />
<text  x="524.59" y="1695.5" ></text>
</g>
<g >
<title>[unknown] (145 samples, 0.92%)</title><rect x="963.0" y="709" width="10.8" height="15.0" fill="rgb(245,11,6)" rx="2" ry="2" />
<text  x="965.97" y="719.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_erase (2 samples, 0.01%)</title><rect x="914.4" y="1749" width="0.1" height="15.0" fill="rgb(215,166,41)" rx="2" ry="2" />
<text  x="917.40" y="1759.5" ></text>
</g>
<g >
<title>TTranspositionTable::Find (18 samples, 0.11%)</title><rect x="243.6" y="1845" width="1.3" height="15.0" fill="rgb(236,18,28)" rx="2" ry="2" />
<text  x="246.60" y="1855.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (4 samples, 0.03%)</title><rect x="512.9" y="1685" width="0.3" height="15.0" fill="rgb(234,186,35)" rx="2" ry="2" />
<text  x="515.86" y="1695.5" ></text>
</g>
<g >
<title>TTranspositionTable::Find (6 samples, 0.04%)</title><rect x="95.4" y="1813" width="0.4" height="15.0" fill="rgb(252,213,53)" rx="2" ry="2" />
<text  x="98.35" y="1823.5" ></text>
</g>
<g >
<title>lczero::ChessBoard::operator== (12 samples, 0.08%)</title><rect x="915.7" y="1797" width="0.9" height="15.0" fill="rgb(220,33,2)" rx="2" ry="2" />
<text  x="918.74" y="1807.5" ></text>
</g>
<g >
<title>EvaluateCaptureSEE (3 samples, 0.02%)</title><rect x="512.2" y="1685" width="0.2" height="15.0" fill="rgb(230,89,51)" rx="2" ry="2" />
<text  x="515.19" y="1695.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, TSearchNode&gt;, std::_Select1st&lt;std::pair&lt;int const, TSearchNode&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, TSearchNode&gt; &gt; &gt;::_M_get_insert_equal_pos (7 samples, 0.04%)</title><rect x="229.9" y="1877" width="0.6" height="15.0" fill="rgb(227,74,10)" rx="2" ry="2" />
<text  x="232.94" y="1887.5" ></text>
</g>
<g >
<title>TSearchStrategy::CalcMoveOrder (33 samples, 0.21%)</title><rect x="470.5" y="1813" width="2.4" height="15.0" fill="rgb(239,206,48)" rx="2" ry="2" />
<text  x="473.48" y="1823.5" ></text>
</g>
<g >
<title>lczero::Position::Position (4 samples, 0.03%)</title><rect x="549.9" y="1781" width="0.3" height="15.0" fill="rgb(244,63,27)" rx="2" ry="2" />
<text  x="552.86" y="1791.5" ></text>
</g>
</g>
</svg>
